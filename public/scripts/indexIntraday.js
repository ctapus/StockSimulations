/*! For license information please see indexIntraday.js.LICENSE.txt */
(()=>{var t={692:function(t,e){var n;!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(r,i){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,u=o.flat?function(t){return o.flat.call(t)}:function(t){return o.concat.apply([],t)},l=o.push,c=o.indexOf,h={},f=h.toString,p=h.hasOwnProperty,d=p.toString,y=d.call(Object),g={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},m=function(t){return null!=t&&t===t.window},x=r.document,w={type:!0,src:!0,nonce:!0,noModule:!0};function _(t,e,n){var r,i,o=(n=n||x).createElement("script");if(o.text=t,e)for(r in w)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function b(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[f.call(t)]||"object":typeof t}var D="3.7.1",A=/HTML$/i,S=function(t,e){return new S.fn.init(t,e)};function T(t){var e=!!t&&"length"in t&&t.length,n=b(t);return!v(t)&&!m(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}function E(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}S.fn=S.prototype={jquery:D,constructor:S,length:0,toArray:function(){return s.call(this)},get:function(t){return null==t?s.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=S.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return S.each(this,t)},map:function(t){return this.pushStack(S.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(S.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(S.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},S.extend=S.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(l&&r&&(S.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||S.isPlainObject(n)?n:{},i=!1,a[e]=S.extend(l,o,r)):void 0!==r&&(a[e]=r));return a},S.extend({expando:"jQuery"+(D+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==f.call(t)||(e=a(t))&&("function"!=typeof(n=p.call(e,"constructor")&&e.constructor)||d.call(n)!==y))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){_(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,r=0;if(T(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},text:function(t){var e,n="",r=0,i=t.nodeType;if(!i)for(;e=t[r++];)n+=S.text(e);return 1===i||11===i?t.textContent:9===i?t.documentElement.textContent:3===i||4===i?t.nodeValue:n},makeArray:function(t,e){var n=e||[];return null!=t&&(T(Object(t))?S.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:c.call(e,t,n)},isXMLDoc:function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!A.test(e||n&&n.nodeName||"HTML")},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,o=0,a=[];if(T(t))for(r=t.length;o<r;o++)null!=(i=e(t[o],o,n))&&a.push(i);else for(o in t)null!=(i=e(t[o],o,n))&&a.push(i);return u(a)},guid:1,support:g}),"function"==typeof Symbol&&(S.fn[Symbol.iterator]=o[Symbol.iterator]),S.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){h["[object "+e+"]"]=e.toLowerCase()}));var M=o.pop,k=o.sort,C=o.splice,N="[\\x20\\t\\r\\n\\f]",O=new RegExp("^"+N+"+|((?:^|[^\\\\])(?:\\\\.)*)"+N+"+$","g");S.contains=function(t,e){var n=e&&e.parentNode;return t===n||!(!n||1!==n.nodeType||!(t.contains?t.contains(n):t.compareDocumentPosition&&16&t.compareDocumentPosition(n)))};var $=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;function H(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t}S.escapeSelector=function(t){return(t+"").replace($,H)};var L=x,I=l;!function(){var t,e,n,i,a,u,l,h,f,d,y=I,v=S.expando,m=0,x=0,w=tt(),_=tt(),b=tt(),D=tt(),A=function(t,e){return t===e&&(a=!0),0},T="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",$="(?:\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",H="\\["+N+"*("+$+")(?:"+N+"*([*^$|!~]?=)"+N+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+$+"))|)"+N+"*\\]",j=":("+$+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+H+")*)|.*)\\)|)",P=new RegExp(N+"+","g"),U=new RegExp("^"+N+"*,"+N+"*"),R=new RegExp("^"+N+"*([>+~]|"+N+")"+N+"*"),F=new RegExp(N+"|>"),q=new RegExp(j),Y=new RegExp("^"+$+"$"),B={ID:new RegExp("^#("+$+")"),CLASS:new RegExp("^\\.("+$+")"),TAG:new RegExp("^("+$+"|[*])"),ATTR:new RegExp("^"+H),PSEUDO:new RegExp("^"+j),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+N+"*(even|odd|(([+-]|)(\\d*)n|)"+N+"*(?:([+-]|)"+N+"*(\\d+)|))"+N+"*\\)|)","i"),bool:new RegExp("^(?:"+T+")$","i"),needsContext:new RegExp("^"+N+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+N+"*((?:-\\d)?\\d*)"+N+"*\\)|)(?=[^-]|$)","i")},W=/^(?:input|select|textarea|button)$/i,X=/^h\d$/i,G=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,V=/[+~]/,z=new RegExp("\\\\[\\da-fA-F]{1,6}"+N+"?|\\\\([^\\r\\n\\f])","g"),Q=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},Z=function(){ut()},J=ft((function(t){return!0===t.disabled&&E(t,"fieldset")}),{dir:"parentNode",next:"legend"});try{y.apply(o=s.call(L.childNodes),L.childNodes),o[L.childNodes.length].nodeType}catch(t){y={apply:function(t,e){I.apply(t,s.call(e))},call:function(t){I.apply(t,s.call(arguments,1))}}}function K(t,e,n,r){var i,o,a,s,l,c,p,d=e&&e.ownerDocument,m=e?e.nodeType:9;if(n=n||[],"string"!=typeof t||!t||1!==m&&9!==m&&11!==m)return n;if(!r&&(ut(e),e=e||u,h)){if(11!==m&&(l=G.exec(t)))if(i=l[1]){if(9===m){if(!(a=e.getElementById(i)))return n;if(a.id===i)return y.call(n,a),n}else if(d&&(a=d.getElementById(i))&&K.contains(e,a)&&a.id===i)return y.call(n,a),n}else{if(l[2])return y.apply(n,e.getElementsByTagName(t)),n;if((i=l[3])&&e.getElementsByClassName)return y.apply(n,e.getElementsByClassName(i)),n}if(!(D[t+" "]||f&&f.test(t))){if(p=t,d=e,1===m&&(F.test(t)||R.test(t))){for((d=V.test(t)&&st(e.parentNode)||e)==e&&g.scope||((s=e.getAttribute("id"))?s=S.escapeSelector(s):e.setAttribute("id",s=v)),o=(c=ct(t)).length;o--;)c[o]=(s?"#"+s:":scope")+" "+ht(c[o]);p=c.join(",")}try{return y.apply(n,d.querySelectorAll(p)),n}catch(e){D(t,!0)}finally{s===v&&e.removeAttribute("id")}}}return mt(t.replace(O,"$1"),e,n,r)}function tt(){var t=[];return function n(r,i){return t.push(r+" ")>e.cacheLength&&delete n[t.shift()],n[r+" "]=i}}function et(t){return t[v]=!0,t}function nt(t){var e=u.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function rt(t){return function(e){return E(e,"input")&&e.type===t}}function it(t){return function(e){return(E(e,"input")||E(e,"button"))&&e.type===t}}function ot(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&J(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function at(t){return et((function(e){return e=+e,et((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function st(t){return t&&void 0!==t.getElementsByTagName&&t}function ut(t){var n,r=t?t.ownerDocument||t:L;return r!=u&&9===r.nodeType&&r.documentElement?(l=(u=r).documentElement,h=!S.isXMLDoc(u),d=l.matches||l.webkitMatchesSelector||l.msMatchesSelector,l.msMatchesSelector&&L!=u&&(n=u.defaultView)&&n.top!==n&&n.addEventListener("unload",Z),g.getById=nt((function(t){return l.appendChild(t).id=S.expando,!u.getElementsByName||!u.getElementsByName(S.expando).length})),g.disconnectedMatch=nt((function(t){return d.call(t,"*")})),g.scope=nt((function(){return u.querySelectorAll(":scope")})),g.cssHas=nt((function(){try{return u.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),g.getById?(e.filter.ID=function(t){var e=t.replace(z,Q);return function(t){return t.getAttribute("id")===e}},e.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n=e.getElementById(t);return n?[n]:[]}}):(e.filter.ID=function(t){var e=t.replace(z,Q);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},e.find.ID=function(t,e){if(void 0!==e.getElementById&&h){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),e.find.TAG=function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):e.querySelectorAll(t)},e.find.CLASS=function(t,e){if(void 0!==e.getElementsByClassName&&h)return e.getElementsByClassName(t)},f=[],nt((function(t){var e;l.appendChild(t).innerHTML="<a id='"+v+"' href='' disabled='disabled'></a><select id='"+v+"-\r\\' disabled='disabled'><option selected=''></option></select>",t.querySelectorAll("[selected]").length||f.push("\\["+N+"*(?:value|"+T+")"),t.querySelectorAll("[id~="+v+"-]").length||f.push("~="),t.querySelectorAll("a#"+v+"+*").length||f.push(".#.+[+~]"),t.querySelectorAll(":checked").length||f.push(":checked"),(e=u.createElement("input")).setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),l.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&f.push(":enabled",":disabled"),(e=u.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||f.push("\\["+N+"*name"+N+"*="+N+"*(?:''|\"\")")})),g.cssHas||f.push(":has"),f=f.length&&new RegExp(f.join("|")),A=function(t,e){if(t===e)return a=!0,0;var n=!t.compareDocumentPosition-!e.compareDocumentPosition;return n||(1&(n=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!g.sortDetached&&e.compareDocumentPosition(t)===n?t===u||t.ownerDocument==L&&K.contains(L,t)?-1:e===u||e.ownerDocument==L&&K.contains(L,e)?1:i?c.call(i,t)-c.call(i,e):0:4&n?-1:1)},u):u}for(t in K.matches=function(t,e){return K(t,null,null,e)},K.matchesSelector=function(t,e){if(ut(t),h&&!D[e+" "]&&(!f||!f.test(e)))try{var n=d.call(t,e);if(n||g.disconnectedMatch||t.document&&11!==t.document.nodeType)return n}catch(t){D(e,!0)}return K(e,u,null,[t]).length>0},K.contains=function(t,e){return(t.ownerDocument||t)!=u&&ut(t),S.contains(t,e)},K.attr=function(t,n){(t.ownerDocument||t)!=u&&ut(t);var r=e.attrHandle[n.toLowerCase()],i=r&&p.call(e.attrHandle,n.toLowerCase())?r(t,n,!h):void 0;return void 0!==i?i:t.getAttribute(n)},K.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},S.uniqueSort=function(t){var e,n=[],r=0,o=0;if(a=!g.sortStable,i=!g.sortStable&&s.call(t,0),k.call(t,A),a){for(;e=t[o++];)e===t[o]&&(r=n.push(o));for(;r--;)C.call(t,n[r],1)}return i=null,t},S.fn.uniqueSort=function(){return this.pushStack(S.uniqueSort(s.apply(this)))},e=S.expr={cacheLength:50,createPseudo:et,match:B,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(z,Q),t[3]=(t[3]||t[4]||t[5]||"").replace(z,Q),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||K.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&K.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return B.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&q.test(n)&&(e=ct(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(z,Q).toLowerCase();return"*"===t?function(){return!0}:function(t){return E(t,e)}},CLASS:function(t){var e=w[t+" "];return e||(e=new RegExp("(^|"+N+")"+t+"("+N+"|$)"))&&w(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=K.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(P," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,u){var l,c,h,f,p,d=o!==a?"nextSibling":"previousSibling",y=e.parentNode,g=s&&e.nodeName.toLowerCase(),x=!u&&!s,w=!1;if(y){if(o){for(;d;){for(h=e;h=h[d];)if(s?E(h,g):1===h.nodeType)return!1;p=d="only"===t&&!p&&"nextSibling"}return!0}if(p=[a?y.firstChild:y.lastChild],a&&x){for(w=(f=(l=(c=y[v]||(y[v]={}))[t]||[])[0]===m&&l[1])&&l[2],h=f&&y.childNodes[f];h=++f&&h&&h[d]||(w=f=0)||p.pop();)if(1===h.nodeType&&++w&&h===e){c[t]=[m,f,w];break}}else if(x&&(w=f=(l=(c=e[v]||(e[v]={}))[t]||[])[0]===m&&l[1]),!1===w)for(;(h=++f&&h&&h[d]||(w=f=0)||p.pop())&&(!(s?E(h,g):1===h.nodeType)||!++w||(x&&((c=h[v]||(h[v]={}))[t]=[m,w]),h!==e)););return(w-=i)===r||w%r==0&&w/r>=0}}},PSEUDO:function(t,n){var r,i=e.pseudos[t]||e.setFilters[t.toLowerCase()]||K.error("unsupported pseudo: "+t);return i[v]?i(n):i.length>1?(r=[t,t,"",n],e.setFilters.hasOwnProperty(t.toLowerCase())?et((function(t,e){for(var r,o=i(t,n),a=o.length;a--;)t[r=c.call(t,o[a])]=!(e[r]=o[a])})):function(t){return i(t,0,r)}):i}},pseudos:{not:et((function(t){var e=[],n=[],r=vt(t.replace(O,"$1"));return r[v]?et((function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:et((function(t){return function(e){return K(t,e).length>0}})),contains:et((function(t){return t=t.replace(z,Q),function(e){return(e.textContent||S.text(e)).indexOf(t)>-1}})),lang:et((function(t){return Y.test(t||"")||K.error("unsupported lang: "+t),t=t.replace(z,Q).toLowerCase(),function(e){var n;do{if(n=h?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(t){var e=r.location&&r.location.hash;return e&&e.slice(1)===t.id},root:function(t){return t===l},focus:function(t){return t===function(){try{return u.activeElement}catch(t){}}()&&u.hasFocus()&&!!(t.type||t.href||~t.tabIndex)},enabled:ot(!1),disabled:ot(!0),checked:function(t){return E(t,"input")&&!!t.checked||E(t,"option")&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!e.pseudos.empty(t)},header:function(t){return X.test(t.nodeName)},input:function(t){return W.test(t.nodeName)},button:function(t){return E(t,"input")&&"button"===t.type||E(t,"button")},text:function(t){var e;return E(t,"input")&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:at((function(){return[0]})),last:at((function(t,e){return[e-1]})),eq:at((function(t,e,n){return[n<0?n+e:n]})),even:at((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:at((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:at((function(t,e,n){var r;for(r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:at((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}},e.pseudos.nth=e.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})e.pseudos[t]=rt(t);for(t in{submit:!0,reset:!0})e.pseudos[t]=it(t);function lt(){}function ct(t,n){var r,i,o,a,s,u,l,c=_[t+" "];if(c)return n?0:c.slice(0);for(s=t,u=[],l=e.preFilter;s;){for(a in r&&!(i=U.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),r=!1,(i=R.exec(s))&&(r=i.shift(),o.push({value:r,type:i[0].replace(O," ")}),s=s.slice(r.length)),e.filter)!(i=B[a].exec(s))||l[a]&&!(i=l[a](i))||(r=i.shift(),o.push({value:r,type:a,matches:i}),s=s.slice(r.length));if(!r)break}return n?s.length:s?K.error(t):_(t,u).slice(0)}function ht(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function ft(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=x++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,u){var l,c,h=[m,s];if(u){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,u))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(c=e[v]||(e[v]={}),i&&E(e,i))e=e[r]||e;else{if((l=c[o])&&l[0]===m&&l[1]===s)return h[2]=l[2];if(c[o]=h,h[2]=t(e,n,u))return!0}return!1}}function pt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function dt(t,e,n,r,i){for(var o,a=[],s=0,u=t.length,l=null!=e;s<u;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),l&&e.push(s)));return a}function yt(t,e,n,r,i,o){return r&&!r[v]&&(r=yt(r)),i&&!i[v]&&(i=yt(i,o)),et((function(o,a,s,u){var l,h,f,p,d=[],g=[],v=a.length,m=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)K(t,e[r],n);return n}(e||"*",s.nodeType?[s]:s,[]),x=!t||!o&&e?m:dt(m,d,t,s,u);if(n?n(x,p=i||(o?t:v||r)?[]:a,s,u):p=x,r)for(l=dt(p,g),r(l,[],s,u),h=l.length;h--;)(f=l[h])&&(p[g[h]]=!(x[g[h]]=f));if(o){if(i||t){if(i){for(l=[],h=p.length;h--;)(f=p[h])&&l.push(x[h]=f);i(null,p=[],l,u)}for(h=p.length;h--;)(f=p[h])&&(l=i?c.call(o,f):d[h])>-1&&(o[l]=!(a[l]=f))}}else p=dt(p===a?p.splice(v,p.length):p),i?i(null,a,p,u):y.apply(a,p)}))}function gt(t){for(var r,i,o,a=t.length,s=e.relative[t[0].type],u=s||e.relative[" "],l=s?1:0,h=ft((function(t){return t===r}),u,!0),f=ft((function(t){return c.call(r,t)>-1}),u,!0),p=[function(t,e,i){var o=!s&&(i||e!=n)||((r=e).nodeType?h(t,e,i):f(t,e,i));return r=null,o}];l<a;l++)if(i=e.relative[t[l].type])p=[ft(pt(p),i)];else{if((i=e.filter[t[l].type].apply(null,t[l].matches))[v]){for(o=++l;o<a&&!e.relative[t[o].type];o++);return yt(l>1&&pt(p),l>1&&ht(t.slice(0,l-1).concat({value:" "===t[l-2].type?"*":""})).replace(O,"$1"),i,l<o&&gt(t.slice(l,o)),o<a&&gt(t=t.slice(o)),o<a&&ht(t))}p.push(i)}return pt(p)}function vt(t,r){var i,o=[],a=[],s=b[t+" "];if(!s){for(r||(r=ct(t)),i=r.length;i--;)(s=gt(r[i]))[v]?o.push(s):a.push(s);s=b(t,function(t,r){var i=r.length>0,o=t.length>0,a=function(a,s,l,c,f){var p,d,g,v=0,x="0",w=a&&[],_=[],b=n,D=a||o&&e.find.TAG("*",f),A=m+=null==b?1:Math.random()||.1,T=D.length;for(f&&(n=s==u||s||f);x!==T&&null!=(p=D[x]);x++){if(o&&p){for(d=0,s||p.ownerDocument==u||(ut(p),l=!h);g=t[d++];)if(g(p,s||u,l)){y.call(c,p);break}f&&(m=A)}i&&((p=!g&&p)&&v--,a&&w.push(p))}if(v+=x,i&&x!==v){for(d=0;g=r[d++];)g(w,_,s,l);if(a){if(v>0)for(;x--;)w[x]||_[x]||(_[x]=M.call(c));_=dt(_)}y.apply(c,_),f&&!a&&_.length>0&&v+r.length>1&&S.uniqueSort(c)}return f&&(m=A,n=b),w};return i?et(a):a}(a,o)),s.selector=t}return s}function mt(t,n,r,i){var o,a,s,u,l,c="function"==typeof t&&t,f=!i&&ct(t=c.selector||t);if(r=r||[],1===f.length){if((a=f[0]=f[0].slice(0)).length>2&&"ID"===(s=a[0]).type&&9===n.nodeType&&h&&e.relative[a[1].type]){if(!(n=(e.find.ID(s.matches[0].replace(z,Q),n)||[])[0]))return r;c&&(n=n.parentNode),t=t.slice(a.shift().value.length)}for(o=B.needsContext.test(t)?0:a.length;o--&&(s=a[o],!e.relative[u=s.type]);)if((l=e.find[u])&&(i=l(s.matches[0].replace(z,Q),V.test(a[0].type)&&st(n.parentNode)||n))){if(a.splice(o,1),!(t=i.length&&ht(a)))return y.apply(r,i),r;break}}return(c||vt(t,f))(i,n,!h,r,!n||V.test(t)&&st(n.parentNode)||n),r}lt.prototype=e.filters=e.pseudos,e.setFilters=new lt,g.sortStable=v.split("").sort(A).join("")===v,ut(),g.sortDetached=nt((function(t){return 1&t.compareDocumentPosition(u.createElement("fieldset"))})),S.find=K,S.expr[":"]=S.expr.pseudos,S.unique=S.uniqueSort,K.compile=vt,K.select=mt,K.setDocument=ut,K.tokenize=ct,K.escape=S.escapeSelector,K.getText=S.text,K.isXML=S.isXMLDoc,K.selectors=S.expr,K.support=S.support,K.uniqueSort=S.uniqueSort}();var j=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&S(t).is(n))break;r.push(t)}return r},P=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},U=S.expr.match.needsContext,R=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function F(t,e,n){return v(e)?S.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?S.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?S.grep(t,(function(t){return c.call(e,t)>-1!==n})):S.filter(e,t,n)}S.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?S.find.matchesSelector(r,t)?[r]:[]:S.find.matches(t,S.grep(e,(function(t){return 1===t.nodeType})))},S.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(S(t).filter((function(){for(e=0;e<r;e++)if(S.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)S.find(t,i[e],n);return r>1?S.uniqueSort(n):n},filter:function(t){return this.pushStack(F(this,t||[],!1))},not:function(t){return this.pushStack(F(this,t||[],!0))},is:function(t){return!!F(this,"string"==typeof t&&U.test(t)?S(t):t||[],!1).length}});var q,Y=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(S.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||q,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:Y.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof S?e[0]:e,S.merge(this,S.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:x,!0)),R.test(r[1])&&S.isPlainObject(e))for(r in e)v(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=x.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==n.ready?n.ready(t):t(S):S.makeArray(t,this)}).prototype=S.fn,q=S(x);var B=/^(?:parents|prev(?:Until|All))/,W={children:!0,contents:!0,next:!0,prev:!0};function X(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}S.fn.extend({has:function(t){var e=S(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(S.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&S(t);if(!U.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&S.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?S.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?c.call(S(t),this[0]):c.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(S.uniqueSort(S.merge(this.get(),S(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),S.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return j(t,"parentNode")},parentsUntil:function(t,e,n){return j(t,"parentNode",n)},next:function(t){return X(t,"nextSibling")},prev:function(t){return X(t,"previousSibling")},nextAll:function(t){return j(t,"nextSibling")},prevAll:function(t){return j(t,"previousSibling")},nextUntil:function(t,e,n){return j(t,"nextSibling",n)},prevUntil:function(t,e,n){return j(t,"previousSibling",n)},siblings:function(t){return P((t.parentNode||{}).firstChild,t)},children:function(t){return P(t.firstChild)},contents:function(t){return null!=t.contentDocument&&a(t.contentDocument)?t.contentDocument:(E(t,"template")&&(t=t.content||t),S.merge([],t.childNodes))}},(function(t,e){S.fn[t]=function(n,r){var i=S.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=S.filter(r,i)),this.length>1&&(W[t]||S.uniqueSort(i),B.test(t)&&i.reverse()),this.pushStack(i)}}));var G=/[^\x20\t\r\n\f]+/g;function V(t){return t}function z(t){throw t}function Q(t,e,n,r){var i;try{t&&v(i=t.promise)?i.call(t).done(e).fail(n):t&&v(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}S.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return S.each(t.match(G)||[],(function(t,n){e[n]=!0})),e}(t):S.extend({},t);var e,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){S.each(n,(function(n,r){v(r)?t.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==b(r)&&e(r)}))}(arguments),n&&!e&&u()),this},remove:function(){return S.each(arguments,(function(t,e){for(var n;(n=S.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?S.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},S.extend({Deferred:function(t){var e=[["notify","progress",S.Callbacks("memory"),S.Callbacks("memory"),2],["resolve","done",S.Callbacks("once memory"),S.Callbacks("once memory"),0,"resolved"],["reject","fail",S.Callbacks("once memory"),S.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return S.Deferred((function(n){S.each(e,(function(e,r){var i=v(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&v(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(t,n,i){var o=0;function a(t,e,n,i){return function(){var s=this,u=arguments,l=function(){var r,l;if(!(t<o)){if((r=n.apply(s,u))===e.promise())throw new TypeError("Thenable self-resolution");l=r&&("object"==typeof r||"function"==typeof r)&&r.then,v(l)?i?l.call(r,a(o,e,V,i),a(o,e,z,i)):(o++,l.call(r,a(o,e,V,i),a(o,e,z,i),a(o,e,V,e.notifyWith))):(n!==V&&(s=void 0,u=[r]),(i||e.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(r){S.Deferred.exceptionHook&&S.Deferred.exceptionHook(r,c.error),t+1>=o&&(n!==z&&(s=void 0,u=[r]),e.rejectWith(s,u))}};t?c():(S.Deferred.getErrorHook?c.error=S.Deferred.getErrorHook():S.Deferred.getStackHook&&(c.error=S.Deferred.getStackHook()),r.setTimeout(c))}}return S.Deferred((function(r){e[0][3].add(a(0,r,v(i)?i:V,r.notifyWith)),e[1][3].add(a(0,r,v(t)?t:V)),e[2][3].add(a(0,r,v(n)?n:z))})).promise()},promise:function(t){return null!=t?S.extend(t,i):i}},o={};return S.each(e,(function(t,r){var a=r[2],s=r[5];i[r[1]]=a.add,s&&a.add((function(){n=s}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),a.add(r[3].fire),o[r[0]]=function(){return o[r[0]+"With"](this===o?void 0:this,arguments),this},o[r[0]+"With"]=a.fireWith})),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=s.call(arguments),o=S.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?s.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(Q(t,o.done(a(n)).resolve,o.reject,!e),"pending"===o.state()||v(i[n]&&i[n].then)))return o.then();for(;n--;)Q(i[n],a(n),o.reject);return o.promise()}});var Z=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;S.Deferred.exceptionHook=function(t,e){r.console&&r.console.warn&&t&&Z.test(t.name)&&r.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},S.readyException=function(t){r.setTimeout((function(){throw t}))};var J=S.Deferred();function K(){x.removeEventListener("DOMContentLoaded",K),r.removeEventListener("load",K),S.ready()}S.fn.ready=function(t){return J.then(t).catch((function(t){S.readyException(t)})),this},S.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--S.readyWait:S.isReady)||(S.isReady=!0,!0!==t&&--S.readyWait>0||J.resolveWith(x,[S]))}}),S.ready.then=J.then,"complete"===x.readyState||"loading"!==x.readyState&&!x.documentElement.doScroll?r.setTimeout(S.ready):(x.addEventListener("DOMContentLoaded",K),r.addEventListener("load",K));var tt=function(t,e,n,r,i,o,a){var s=0,u=t.length,l=null==n;if("object"===b(n))for(s in i=!0,n)tt(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,v(r)||(a=!0),l&&(a?(e.call(t,r),e=null):(l=e,e=function(t,e,n){return l.call(S(t),n)})),e))for(;s<u;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:l?e.call(t):u?e(t[0],n):o},et=/^-ms-/,nt=/-([a-z])/g;function rt(t,e){return e.toUpperCase()}function it(t){return t.replace(et,"ms-").replace(nt,rt)}var ot=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function at(){this.expando=S.expando+at.uid++}at.uid=1,at.prototype={cache:function(t){var e=t[this.expando];return e||(e={},ot(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[it(e)]=n;else for(r in e)i[it(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][it(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(it):(e=it(e))in r?[e]:e.match(G)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||S.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!S.isEmptyObject(e)}};var st=new at,ut=new at,lt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,ct=/[A-Z]/g;function ht(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(ct,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:lt.test(t)?JSON.parse(t):t)}(n)}catch(t){}ut.set(t,e,n)}else n=void 0;return n}S.extend({hasData:function(t){return ut.hasData(t)||st.hasData(t)},data:function(t,e,n){return ut.access(t,e,n)},removeData:function(t,e){ut.remove(t,e)},_data:function(t,e,n){return st.access(t,e,n)},_removeData:function(t,e){st.remove(t,e)}}),S.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=ut.get(o),1===o.nodeType&&!st.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=it(r.slice(5)),ht(o,r,i[r]));st.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){ut.set(this,t)})):tt(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=ut.get(o,t))||void 0!==(n=ht(o,t))?n:void 0;this.each((function(){ut.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){ut.remove(this,t)}))}}),S.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=st.get(t,e),n&&(!r||Array.isArray(n)?r=st.access(t,e,S.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=S.queue(t,e),r=n.length,i=n.shift(),o=S._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){S.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return st.get(t,n)||st.access(t,n,{empty:S.Callbacks("once memory").add((function(){st.remove(t,[e+"queue",n])}))})}}),S.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?S.queue(this[0],t):void 0===e?this:this.each((function(){var n=S.queue(this,t,e);S._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&S.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){S.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=S.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=st.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var ft=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,pt=new RegExp("^(?:([+-])=|)("+ft+")([a-z%]*)$","i"),dt=["Top","Right","Bottom","Left"],yt=x.documentElement,gt=function(t){return S.contains(t.ownerDocument,t)},vt={composed:!0};yt.getRootNode&&(gt=function(t){return S.contains(t.ownerDocument,t)||t.getRootNode(vt)===t.ownerDocument});var mt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&gt(t)&&"none"===S.css(t,"display")};function xt(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return S.css(t,e,"")},u=s(),l=n&&n[3]||(S.cssNumber[e]?"":"px"),c=t.nodeType&&(S.cssNumber[e]||"px"!==l&&+u)&&pt.exec(S.css(t,e));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;a--;)S.style(t,e,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,S.style(t,e,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var wt={};function _t(t){var e,n=t.ownerDocument,r=t.nodeName,i=wt[r];return i||(e=n.body.appendChild(n.createElement(r)),i=S.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),wt[r]=i,i)}function bt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=st.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&mt(r)&&(i[o]=_t(r))):"none"!==n&&(i[o]="none",st.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}S.fn.extend({show:function(){return bt(this,!0)},hide:function(){return bt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){mt(this)?S(this).show():S(this).hide()}))}});var Dt,At,St=/^(?:checkbox|radio)$/i,Tt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,Et=/^$|^module$|\/(?:java|ecma)script/i;Dt=x.createDocumentFragment().appendChild(x.createElement("div")),(At=x.createElement("input")).setAttribute("type","radio"),At.setAttribute("checked","checked"),At.setAttribute("name","t"),Dt.appendChild(At),g.checkClone=Dt.cloneNode(!0).cloneNode(!0).lastChild.checked,Dt.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!Dt.cloneNode(!0).lastChild.defaultValue,Dt.innerHTML="<option></option>",g.option=!!Dt.lastChild;var Mt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function kt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&E(t,e)?S.merge([t],n):n}function Ct(t,e){for(var n=0,r=t.length;n<r;n++)st.set(t[n],"globalEval",!e||st.get(e[n],"globalEval"))}Mt.tbody=Mt.tfoot=Mt.colgroup=Mt.caption=Mt.thead,Mt.th=Mt.td,g.option||(Mt.optgroup=Mt.option=[1,"<select multiple='multiple'>","</select>"]);var Nt=/<|&#?\w+;/;function Ot(t,e,n,r,i){for(var o,a,s,u,l,c,h=e.createDocumentFragment(),f=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===b(o))S.merge(f,o.nodeType?[o]:o);else if(Nt.test(o)){for(a=a||h.appendChild(e.createElement("div")),s=(Tt.exec(o)||["",""])[1].toLowerCase(),u=Mt[s]||Mt._default,a.innerHTML=u[1]+S.htmlPrefilter(o)+u[2],c=u[0];c--;)a=a.lastChild;S.merge(f,a.childNodes),(a=h.firstChild).textContent=""}else f.push(e.createTextNode(o));for(h.textContent="",p=0;o=f[p++];)if(r&&S.inArray(o,r)>-1)i&&i.push(o);else if(l=gt(o),a=kt(h.appendChild(o),"script"),l&&Ct(a),n)for(c=0;o=a[c++];)Et.test(o.type||"")&&n.push(o);return h}var $t=/^([^.]*)(?:\.(.+)|)/;function Ht(){return!0}function Lt(){return!1}function It(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)It(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=Lt;else if(!i)return t;return 1===o&&(a=i,i=function(t){return S().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=S.guid++)),t.each((function(){S.event.add(this,e,i,r,n)}))}function jt(t,e,n){n?(st.set(t,e,!1),S.event.add(t,e,{namespace:!1,handler:function(t){var n,r=st.get(this,e);if(1&t.isTrigger&&this[e]){if(r)(S.event.special[e]||{}).delegateType&&t.stopPropagation();else if(r=s.call(arguments),st.set(this,e,r),this[e](),n=st.get(this,e),st.set(this,e,!1),r!==n)return t.stopImmediatePropagation(),t.preventDefault(),n}else r&&(st.set(this,e,S.event.trigger(r[0],r.slice(1),this)),t.stopPropagation(),t.isImmediatePropagationStopped=Ht)}})):void 0===st.get(t,e)&&S.event.add(t,e,Ht)}S.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,h,f,p,d,y,g=st.get(t);if(ot(t))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&S.find.matchesSelector(yt,i),n.guid||(n.guid=S.guid++),(u=g.events)||(u=g.events=Object.create(null)),(a=g.handle)||(a=g.handle=function(e){return void 0!==S&&S.event.triggered!==e.type?S.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(G)||[""]).length;l--;)p=y=(s=$t.exec(e[l])||[])[1],d=(s[2]||"").split(".").sort(),p&&(h=S.event.special[p]||{},p=(i?h.delegateType:h.bindType)||p,h=S.event.special[p]||{},c=S.extend({type:p,origType:y,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&S.expr.match.needsContext.test(i),namespace:d.join(".")},o),(f=u[p])||((f=u[p]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(t,r,d,a)||t.addEventListener&&t.addEventListener(p,a)),h.add&&(h.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,c):f.push(c),S.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,s,u,l,c,h,f,p,d,y,g=st.hasData(t)&&st.get(t);if(g&&(u=g.events)){for(l=(e=(e||"").match(G)||[""]).length;l--;)if(p=y=(s=$t.exec(e[l])||[])[1],d=(s[2]||"").split(".").sort(),p){for(h=S.event.special[p]||{},f=u[p=(r?h.delegateType:h.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)c=f[o],!i&&y!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,h.remove&&h.remove.call(t,c));a&&!f.length&&(h.teardown&&!1!==h.teardown.call(t,d,g.handle)||S.removeEvent(t,p,g.handle),delete u[p])}else for(p in u)S.event.remove(t,p+e[l],n,r,!0);S.isEmptyObject(u)&&st.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=new Array(arguments.length),u=S.event.fix(t),l=(st.get(this,"events")||Object.create(null))[u.type]||[],c=S.event.special[u.type]||{};for(s[0]=u,e=1;e<arguments.length;e++)s[e]=arguments[e];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){for(a=S.event.handlers.call(this,u,l),e=0;(i=a[e++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((S.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(t,e){var n,r,i,o,a,s=[],u=e.delegateCount,l=t.target;if(u&&l.nodeType&&!("click"===t.type&&t.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==t.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?S(i,this).index(l)>-1:S.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<e.length&&s.push({elem:l,handlers:e.slice(u)}),s},addProp:function(t,e){Object.defineProperty(S.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[S.expando]?t:new S.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return St.test(e.type)&&e.click&&E(e,"input")&&jt(e,"click",!0),!1},trigger:function(t){var e=this||t;return St.test(e.type)&&e.click&&E(e,"input")&&jt(e,"click"),!0},_default:function(t){var e=t.target;return St.test(e.type)&&e.click&&E(e,"input")&&st.get(e,"click")||E(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},S.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},S.Event=function(t,e){if(!(this instanceof S.Event))return new S.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Ht:Lt,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&S.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[S.expando]=!0},S.Event.prototype={constructor:S.Event,isDefaultPrevented:Lt,isPropagationStopped:Lt,isImmediatePropagationStopped:Lt,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Ht,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Ht,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Ht,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},S.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},S.event.addProp),S.each({focus:"focusin",blur:"focusout"},(function(t,e){function n(t){if(x.documentMode){var n=st.get(this,"handle"),r=S.event.fix(t);r.type="focusin"===t.type?"focus":"blur",r.isSimulated=!0,n(t),r.target===r.currentTarget&&n(r)}else S.event.simulate(e,t.target,S.event.fix(t))}S.event.special[t]={setup:function(){var r;if(jt(this,t,!0),!x.documentMode)return!1;(r=st.get(this,e))||this.addEventListener(e,n),st.set(this,e,(r||0)+1)},trigger:function(){return jt(this,t),!0},teardown:function(){var t;if(!x.documentMode)return!1;(t=st.get(this,e)-1)?st.set(this,e,t):(this.removeEventListener(e,n),st.remove(this,e))},_default:function(e){return st.get(e.target,t)},delegateType:e},S.event.special[e]={setup:function(){var r=this.ownerDocument||this.document||this,i=x.documentMode?this:r,o=st.get(i,e);o||(x.documentMode?this.addEventListener(e,n):r.addEventListener(t,n,!0)),st.set(i,e,(o||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=x.documentMode?this:r,o=st.get(i,e)-1;o?st.set(i,e,o):(x.documentMode?this.removeEventListener(e,n):r.removeEventListener(t,n,!0),st.remove(i,e))}}})),S.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){S.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||S.contains(this,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}})),S.fn.extend({on:function(t,e,n,r){return It(this,t,e,n,r)},one:function(t,e,n,r){return It(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,S(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=Lt),this.each((function(){S.event.remove(this,t,n,e)}))}});var Pt=/<script|<style|<link/i,Ut=/checked\s*(?:[^=]|=\s*.checked.)/i,Rt=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function Ft(t,e){return E(t,"table")&&E(11!==e.nodeType?e:e.firstChild,"tr")&&S(t).children("tbody")[0]||t}function qt(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Yt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function Bt(t,e){var n,r,i,o,a,s;if(1===e.nodeType){if(st.hasData(t)&&(s=st.get(t).events))for(i in st.remove(e,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)S.event.add(e,i,s[i][n]);ut.hasData(t)&&(o=ut.access(t),a=S.extend({},o),ut.set(e,a))}}function Wt(t,e){var n=e.nodeName.toLowerCase();"input"===n&&St.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Xt(t,e,n,r){e=u(e);var i,o,a,s,l,c,h=0,f=t.length,p=f-1,d=e[0],y=v(d);if(y||f>1&&"string"==typeof d&&!g.checkClone&&Ut.test(d))return t.each((function(i){var o=t.eq(i);y&&(e[0]=d.call(this,i,o.html())),Xt(o,e,n,r)}));if(f&&(o=(i=Ot(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=S.map(kt(i,"script"),qt)).length;h<f;h++)l=i,h!==p&&(l=S.clone(l,!0,!0),s&&S.merge(a,kt(l,"script"))),n.call(t[h],l,h);if(s)for(c=a[a.length-1].ownerDocument,S.map(a,Yt),h=0;h<s;h++)l=a[h],Et.test(l.type||"")&&!st.access(l,"globalEval")&&S.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?S._evalUrl&&!l.noModule&&S._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):_(l.textContent.replace(Rt,""),l,c))}return t}function Gt(t,e,n){for(var r,i=e?S.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||S.cleanData(kt(r)),r.parentNode&&(n&&gt(r)&&Ct(kt(r,"script")),r.parentNode.removeChild(r));return t}S.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),u=gt(t);if(!(g.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||S.isXMLDoc(t)))for(a=kt(s),r=0,i=(o=kt(t)).length;r<i;r++)Wt(o[r],a[r]);if(e)if(n)for(o=o||kt(t),a=a||kt(s),r=0,i=o.length;r<i;r++)Bt(o[r],a[r]);else Bt(t,s);return(a=kt(s,"script")).length>0&&Ct(a,!u&&kt(t,"script")),s},cleanData:function(t){for(var e,n,r,i=S.event.special,o=0;void 0!==(n=t[o]);o++)if(ot(n)){if(e=n[st.expando]){if(e.events)for(r in e.events)i[r]?S.event.remove(n,r):S.removeEvent(n,r,e.handle);n[st.expando]=void 0}n[ut.expando]&&(n[ut.expando]=void 0)}}}),S.fn.extend({detach:function(t){return Gt(this,t,!0)},remove:function(t){return Gt(this,t)},text:function(t){return tt(this,(function(t){return void 0===t?S.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Xt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||Ft(this,t).appendChild(t)}))},prepend:function(){return Xt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=Ft(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Xt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Xt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(S.cleanData(kt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return S.clone(this,t,e)}))},html:function(t){return tt(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Pt.test(t)&&!Mt[(Tt.exec(t)||["",""])[1].toLowerCase()]){t=S.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(S.cleanData(kt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Xt(this,arguments,(function(e){var n=this.parentNode;S.inArray(this,t)<0&&(S.cleanData(kt(this)),n&&n.replaceChild(e,this))}),t)}}),S.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){S.fn[t]=function(t){for(var n,r=[],i=S(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),S(i[a])[e](n),l.apply(r,n.get());return this.pushStack(r)}}));var Vt=new RegExp("^("+ft+")(?!px)[a-z%]+$","i"),zt=/^--/,Qt=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=r),e.getComputedStyle(t)},Zt=function(t,e,n){var r,i,o={};for(i in e)o[i]=t.style[i],t.style[i]=e[i];for(i in r=n.call(t),e)t.style[i]=o[i];return r},Jt=new RegExp(dt.join("|"),"i");function Kt(t,e,n){var r,i,o,a,s=zt.test(e),u=t.style;return(n=n||Qt(t))&&(a=n.getPropertyValue(e)||n[e],s&&a&&(a=a.replace(O,"$1")||void 0),""!==a||gt(t)||(a=S.style(t,e)),!g.pixelBoxStyles()&&Vt.test(a)&&Jt.test(e)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function te(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",yt.appendChild(l).appendChild(c);var t=r.getComputedStyle(c);n="1%"!==t.top,u=12===e(t.marginLeft),c.style.right="60%",a=36===e(t.right),i=36===e(t.width),c.style.position="absolute",o=12===e(c.offsetWidth/3),yt.removeChild(l),c=null}}function e(t){return Math.round(parseFloat(t))}var n,i,o,a,s,u,l=x.createElement("div"),c=x.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===c.style.backgroundClip,S.extend(g,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),o},reliableTrDimensions:function(){var t,e,n,i;return null==s&&(t=x.createElement("table"),e=x.createElement("tr"),n=x.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="box-sizing:content-box;border:1px solid",e.style.height="1px",n.style.height="9px",n.style.display="block",yt.appendChild(t).appendChild(e).appendChild(n),i=r.getComputedStyle(e),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===e.offsetHeight,yt.removeChild(t)),s}}))}();var ee=["Webkit","Moz","ms"],ne=x.createElement("div").style,re={};function ie(t){return S.cssProps[t]||re[t]||(t in ne?t:re[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=ee.length;n--;)if((t=ee[n]+e)in ne)return t}(t)||t)}var oe=/^(none|table(?!-c[ea]).+)/,ae={position:"absolute",visibility:"hidden",display:"block"},se={letterSpacing:"0",fontWeight:"400"};function ue(t,e,n){var r=pt.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function le(t,e,n,r,i,o){var a="width"===e?1:0,s=0,u=0,l=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(l+=S.css(t,n+dt[a],!0,i)),r?("content"===n&&(u-=S.css(t,"padding"+dt[a],!0,i)),"margin"!==n&&(u-=S.css(t,"border"+dt[a]+"Width",!0,i))):(u+=S.css(t,"padding"+dt[a],!0,i),"padding"!==n?u+=S.css(t,"border"+dt[a]+"Width",!0,i):s+=S.css(t,"border"+dt[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-u-s-.5))||0),u+l}function ce(t,e,n){var r=Qt(t),i=(!g.boxSizingReliable()||n)&&"border-box"===S.css(t,"boxSizing",!1,r),o=i,a=Kt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(Vt.test(a)){if(!n)return a;a="auto"}return(!g.boxSizingReliable()&&i||!g.reliableTrDimensions()&&E(t,"tr")||"auto"===a||!parseFloat(a)&&"inline"===S.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===S.css(t,"boxSizing",!1,r),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+le(t,e,n||(i?"border":"content"),o,r,a)+"px"}function he(t,e,n,r,i){return new he.prototype.init(t,e,n,r,i)}S.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Kt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,aspectRatio:!0,borderImageSlice:!0,columnCount:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,scale:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeMiterlimit:!0,strokeOpacity:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=it(e),u=zt.test(e),l=t.style;if(u||(e=ie(s)),a=S.cssHooks[e]||S.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:l[e];"string"==(o=typeof n)&&(i=pt.exec(n))&&i[1]&&(n=xt(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(S.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(u?l.setProperty(e,n):l[e]=n))}},css:function(t,e,n,r){var i,o,a,s=it(e);return zt.test(e)||(e=ie(s)),(a=S.cssHooks[e]||S.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=Kt(t,e,r)),"normal"===i&&e in se&&(i=se[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),S.each(["height","width"],(function(t,e){S.cssHooks[e]={get:function(t,n,r){if(n)return!oe.test(S.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ce(t,e,r):Zt(t,ae,(function(){return ce(t,e,r)}))},set:function(t,n,r){var i,o=Qt(t),a=!g.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===S.css(t,"boxSizing",!1,o),u=r?le(t,e,r,s,o):0;return s&&a&&(u-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-le(t,e,"border",!1,o)-.5)),u&&(i=pt.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=S.css(t,e)),ue(0,n,u)}}})),S.cssHooks.marginLeft=te(g.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Kt(t,"marginLeft"))||t.getBoundingClientRect().left-Zt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),S.each({margin:"",padding:"",border:"Width"},(function(t,e){S.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+dt[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(S.cssHooks[t+e].set=ue)})),S.fn.extend({css:function(t,e){return tt(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Qt(t),i=e.length;a<i;a++)o[e[a]]=S.css(t,e[a],!1,r);return o}return void 0!==n?S.style(t,e,n):S.css(t,e)}),t,e,arguments.length>1)}}),S.Tween=he,he.prototype={constructor:he,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||S.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(S.cssNumber[n]?"":"px")},cur:function(){var t=he.propHooks[this.prop];return t&&t.get?t.get(this):he.propHooks._default.get(this)},run:function(t){var e,n=he.propHooks[this.prop];return this.options.duration?this.pos=e=S.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):he.propHooks._default.set(this),this}},he.prototype.init.prototype=he.prototype,he.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=S.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){S.fx.step[t.prop]?S.fx.step[t.prop](t):1!==t.elem.nodeType||!S.cssHooks[t.prop]&&null==t.elem.style[ie(t.prop)]?t.elem[t.prop]=t.now:S.style(t.elem,t.prop,t.now+t.unit)}}},he.propHooks.scrollTop=he.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},S.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},S.fx=he.prototype.init,S.fx.step={};var fe,pe,de=/^(?:toggle|show|hide)$/,ye=/queueHooks$/;function ge(){pe&&(!1===x.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(ge):r.setTimeout(ge,S.fx.interval),S.fx.tick())}function ve(){return r.setTimeout((function(){fe=void 0})),fe=Date.now()}function me(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=dt[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function xe(t,e,n){for(var r,i=(we.tweeners[e]||[]).concat(we.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function we(t,e,n){var r,i,o=0,a=we.prefilters.length,s=S.Deferred().always((function(){delete u.elem})),u=function(){if(i)return!1;for(var e=fe||ve(),n=Math.max(0,l.startTime+l.duration-e),r=1-(n/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(t,[l,r,n]),r<1&&a?n:(a||s.notifyWith(t,[l,1,0]),s.resolveWith(t,[l]),!1)},l=s.promise({elem:t,props:S.extend({},e),opts:S.extend(!0,{specialEasing:{},easing:S.easing._default},n),originalProperties:e,originalOptions:n,startTime:fe||ve(),duration:n.duration,tweens:[],createTween:function(e,n){var r=S.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(r),r},stop:function(e){var n=0,r=e?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return e?(s.notifyWith(t,[l,1,0]),s.resolveWith(t,[l,e])):s.rejectWith(t,[l,e]),this}}),c=l.props;for(function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=it(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=S.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(c,l.opts.specialEasing);o<a;o++)if(r=we.prefilters[o].call(l,t,c,l.opts))return v(r.stop)&&(S._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return S.map(c,xe,l),v(l.opts.start)&&l.opts.start.call(t,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),S.fx.timer(S.extend(u,{elem:t,anim:l,queue:l.opts.queue})),l}S.Animation=S.extend(we,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return xt(n.elem,t,pt.exec(e),n),n}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(G);for(var n,r=0,i=t.length;r<i;r++)n=t[r],we.tweeners[n]=we.tweeners[n]||[],we.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,u,l,c,h="width"in e||"height"in e,f=this,p={},d=t.style,y=t.nodeType&&mt(t),g=st.get(t,"fxshow");for(r in n.queue||(null==(a=S._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always((function(){f.always((function(){a.unqueued--,S.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],de.test(i)){if(delete e[r],o=o||"toggle"===i,i===(y?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;y=!0}p[r]=g&&g[r]||S.style(t,r)}if((u=!S.isEmptyObject(e))||!S.isEmptyObject(p))for(r in h&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(l=g&&g.display)&&(l=st.get(t,"display")),"none"===(c=S.css(t,"display"))&&(l?c=l:(bt([t],!0),l=t.style.display||l,c=S.css(t,"display"),bt([t]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===S.css(t,"float")&&(u||(f.done((function(){d.display=l})),null==l&&(c=d.display,l="none"===c?"":c)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),u=!1,p)u||(g?"hidden"in g&&(y=g.hidden):g=st.access(t,"fxshow",{display:l}),o&&(g.hidden=!y),y&&bt([t],!0),f.done((function(){for(r in y||bt([t]),st.remove(t,"fxshow"),p)S.style(t,r,p[r])}))),u=xe(y?g[r]:0,r,f),r in g||(g[r]=u.start,y&&(u.end=u.start,u.start=0))}],prefilter:function(t,e){e?we.prefilters.unshift(t):we.prefilters.push(t)}}),S.speed=function(t,e,n){var r=t&&"object"==typeof t?S.extend({},t):{complete:n||!n&&e||v(t)&&t,duration:t,easing:n&&e||e&&!v(e)&&e};return S.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in S.fx.speeds?r.duration=S.fx.speeds[r.duration]:r.duration=S.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&S.dequeue(this,r.queue)},r},S.fn.extend({fadeTo:function(t,e,n,r){return this.filter(mt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=S.isEmptyObject(t),o=S.speed(e,n,r),a=function(){var e=we(this,S.extend({},t),o);(i||st.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=S.timers,a=st.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&ye.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||S.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=st.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=S.timers,a=r?r.length:0;for(n.finish=!0,S.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),S.each(["toggle","show","hide"],(function(t,e){var n=S.fn[e];S.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(me(e,!0),t,r,i)}})),S.each({slideDown:me("show"),slideUp:me("hide"),slideToggle:me("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){S.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),S.timers=[],S.fx.tick=function(){var t,e=0,n=S.timers;for(fe=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||S.fx.stop(),fe=void 0},S.fx.timer=function(t){S.timers.push(t),S.fx.start()},S.fx.interval=13,S.fx.start=function(){pe||(pe=!0,ge())},S.fx.stop=function(){pe=null},S.fx.speeds={slow:600,fast:200,_default:400},S.fn.delay=function(t,e){return t=S.fx&&S.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,n){var i=r.setTimeout(e,t);n.stop=function(){r.clearTimeout(i)}}))},function(){var t=x.createElement("input"),e=x.createElement("select").appendChild(x.createElement("option"));t.type="checkbox",g.checkOn=""!==t.value,g.optSelected=e.selected,(t=x.createElement("input")).value="t",t.type="radio",g.radioValue="t"===t.value}();var _e,be=S.expr.attrHandle;S.fn.extend({attr:function(t,e){return tt(this,S.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){S.removeAttr(this,t)}))}}),S.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?S.prop(t,e,n):(1===o&&S.isXMLDoc(t)||(i=S.attrHooks[e.toLowerCase()]||(S.expr.match.bool.test(e)?_e:void 0)),void 0!==n?null===n?void S.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=S.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!g.radioValue&&"radio"===e&&E(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(G);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),_e={set:function(t,e,n){return!1===e?S.removeAttr(t,n):t.setAttribute(n,n),n}},S.each(S.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=be[e]||S.find.attr;be[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=be[a],be[a]=i,i=null!=n(t,e,r)?a:null,be[a]=o),i}}));var De=/^(?:input|select|textarea|button)$/i,Ae=/^(?:a|area)$/i;function Se(t){return(t.match(G)||[]).join(" ")}function Te(t){return t.getAttribute&&t.getAttribute("class")||""}function Ee(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(G)||[]}S.fn.extend({prop:function(t,e){return tt(this,S.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[S.propFix[t]||t]}))}}),S.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&S.isXMLDoc(t)||(e=S.propFix[e]||e,i=S.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=S.find.attr(t,"tabindex");return e?parseInt(e,10):De.test(t.nodeName)||Ae.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(S.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),S.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){S.propFix[this.toLowerCase()]=this})),S.fn.extend({addClass:function(t){var e,n,r,i,o,a;return v(t)?this.each((function(e){S(this).addClass(t.call(this,e,Te(this)))})):(e=Ee(t)).length?this.each((function(){if(r=Te(this),n=1===this.nodeType&&" "+Se(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=Se(n),r!==a&&this.setAttribute("class",a)}})):this},removeClass:function(t){var e,n,r,i,o,a;return v(t)?this.each((function(e){S(this).removeClass(t.call(this,e,Te(this)))})):arguments.length?(e=Ee(t)).length?this.each((function(){if(r=Te(this),n=1===this.nodeType&&" "+Se(r)+" "){for(o=0;o<e.length;o++)for(i=e[o];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");a=Se(n),r!==a&&this.setAttribute("class",a)}})):this:this.attr("class","")},toggleClass:function(t,e){var n,r,i,o,a=typeof t,s="string"===a||Array.isArray(t);return v(t)?this.each((function(n){S(this).toggleClass(t.call(this,n,Te(this),e),e)})):"boolean"==typeof e&&s?e?this.addClass(t):this.removeClass(t):(n=Ee(t),this.each((function(){if(s)for(o=S(this),i=0;i<n.length;i++)r=n[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==a||((r=Te(this))&&st.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":st.get(this,"__className__")||""))})))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+Se(Te(n))+" ").indexOf(e)>-1)return!0;return!1}});var Me=/\r/g;S.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=v(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,S(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=S.map(i,(function(t){return null==t?"":t+""}))),(e=S.valHooks[this.type]||S.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=S.valHooks[i.type]||S.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(Me,""):null==n?"":n:void 0}}),S.extend({valHooks:{option:{get:function(t){var e=S.find.attr(t,"value");return null!=e?e:Se(S.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!E(n.parentNode,"optgroup"))){if(e=S(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=S.makeArray(e),a=i.length;a--;)((r=i[a]).selected=S.inArray(S.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),S.each(["radio","checkbox"],(function(){S.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=S.inArray(S(t).val(),e)>-1}},g.checkOn||(S.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})}));var ke=r.location,Ce={guid:Date.now()},Ne=/\?/;S.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{e=(new r.DOMParser).parseFromString(t,"text/xml")}catch(t){}return n=e&&e.getElementsByTagName("parsererror")[0],e&&!n||S.error("Invalid XML: "+(n?S.map(n.childNodes,(function(t){return t.textContent})).join("\n"):t)),e};var Oe=/^(?:focusinfocus|focusoutblur)$/,$e=function(t){t.stopPropagation()};S.extend(S.event,{trigger:function(t,e,n,i){var o,a,s,u,l,c,h,f,d=[n||x],y=p.call(t,"type")?t.type:t,g=p.call(t,"namespace")?t.namespace.split("."):[];if(a=f=s=n=n||x,3!==n.nodeType&&8!==n.nodeType&&!Oe.test(y+S.event.triggered)&&(y.indexOf(".")>-1&&(g=y.split("."),y=g.shift(),g.sort()),l=y.indexOf(":")<0&&"on"+y,(t=t[S.expando]?t:new S.Event(y,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=g.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:S.makeArray(e,[t]),h=S.event.special[y]||{},i||!h.trigger||!1!==h.trigger.apply(n,e))){if(!i&&!h.noBubble&&!m(n)){for(u=h.delegateType||y,Oe.test(u+y)||(a=a.parentNode);a;a=a.parentNode)d.push(a),s=a;s===(n.ownerDocument||x)&&d.push(s.defaultView||s.parentWindow||r)}for(o=0;(a=d[o++])&&!t.isPropagationStopped();)f=a,t.type=o>1?u:h.bindType||y,(c=(st.get(a,"events")||Object.create(null))[t.type]&&st.get(a,"handle"))&&c.apply(a,e),(c=l&&a[l])&&c.apply&&ot(a)&&(t.result=c.apply(a,e),!1===t.result&&t.preventDefault());return t.type=y,i||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(d.pop(),e)||!ot(n)||l&&v(n[y])&&!m(n)&&((s=n[l])&&(n[l]=null),S.event.triggered=y,t.isPropagationStopped()&&f.addEventListener(y,$e),n[y](),t.isPropagationStopped()&&f.removeEventListener(y,$e),S.event.triggered=void 0,s&&(n[l]=s)),t.result}},simulate:function(t,e,n){var r=S.extend(new S.Event,n,{type:t,isSimulated:!0});S.event.trigger(r,null,e)}}),S.fn.extend({trigger:function(t,e){return this.each((function(){S.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return S.event.trigger(t,e,n,!0)}});var He=/\[\]$/,Le=/\r?\n/g,Ie=/^(?:submit|button|image|reset|file)$/i,je=/^(?:input|select|textarea|keygen)/i;function Pe(t,e,n,r){var i;if(Array.isArray(e))S.each(e,(function(e,i){n||He.test(t)?r(t,i):Pe(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==b(e))r(t,e);else for(i in e)Pe(t+"["+i+"]",e[i],n,r)}S.param=function(t,e){var n,r=[],i=function(t,e){var n=v(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!S.isPlainObject(t))S.each(t,(function(){i(this.name,this.value)}));else for(n in t)Pe(n,t[n],e,i);return r.join("&")},S.fn.extend({serialize:function(){return S.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=S.prop(this,"elements");return t?S.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!S(this).is(":disabled")&&je.test(this.nodeName)&&!Ie.test(t)&&(this.checked||!St.test(t))})).map((function(t,e){var n=S(this).val();return null==n?null:Array.isArray(n)?S.map(n,(function(t){return{name:e.name,value:t.replace(Le,"\r\n")}})):{name:e.name,value:n.replace(Le,"\r\n")}})).get()}});var Ue=/%20/g,Re=/#.*$/,Fe=/([?&])_=[^&]*/,qe=/^(.*?):[ \t]*([^\r\n]*)$/gm,Ye=/^(?:GET|HEAD)$/,Be=/^\/\//,We={},Xe={},Ge="*/".concat("*"),Ve=x.createElement("a");function ze(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(G)||[];if(v(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Qe(t,e,n,r){var i={},o=t===Xe;function a(s){var u;return i[s]=!0,S.each(t[s]||[],(function(t,s){var l=s(e,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(e.dataTypes.unshift(l),a(l),!1)})),u}return a(e.dataTypes[0])||!i["*"]&&a("*")}function Ze(t,e){var n,r,i=S.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&S.extend(!0,t,r),t}Ve.href=ke.href,S.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:ke.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(ke.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":Ge,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":S.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?Ze(Ze(t,S.ajaxSettings),e):Ze(S.ajaxSettings,t)},ajaxPrefilter:ze(We),ajaxTransport:ze(Xe),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,i,o,a,s,u,l,c,h,f,p=S.ajaxSetup({},e),d=p.context||p,y=p.context&&(d.nodeType||d.jquery)?S(d):S.event,g=S.Deferred(),v=S.Callbacks("once memory"),m=p.statusCode||{},w={},_={},b="canceled",D={readyState:0,getResponseHeader:function(t){var e;if(l){if(!a)for(a={};e=qe.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(t,e){return null==l&&(t=_[t.toLowerCase()]=_[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==l&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)D.always(t[D.status]);else for(e in t)m[e]=[m[e],t[e]];return this},abort:function(t){var e=t||b;return n&&n.abort(e),A(0,e),this}};if(g.promise(D),p.url=((t||p.url||ke.href)+"").replace(Be,ke.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(G)||[""],null==p.crossDomain){u=x.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=Ve.protocol+"//"+Ve.host!=u.protocol+"//"+u.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=S.param(p.data,p.traditional)),Qe(We,p,e,D),l)return D;for(h in(c=S.event&&p.global)&&0==S.active++&&S.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!Ye.test(p.type),i=p.url.replace(Re,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace(Ue,"+")):(f=p.url.slice(i.length),p.data&&(p.processData||"string"==typeof p.data)&&(i+=(Ne.test(i)?"&":"?")+p.data,delete p.data),!1===p.cache&&(i=i.replace(Fe,"$1"),f=(Ne.test(i)?"&":"?")+"_="+Ce.guid+++f),p.url=i+f),p.ifModified&&(S.lastModified[i]&&D.setRequestHeader("If-Modified-Since",S.lastModified[i]),S.etag[i]&&D.setRequestHeader("If-None-Match",S.etag[i])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&D.setRequestHeader("Content-Type",p.contentType),D.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+Ge+"; q=0.01":""):p.accepts["*"]),p.headers)D.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(!1===p.beforeSend.call(d,D,p)||l))return D.abort();if(b="abort",v.add(p.complete),D.done(p.success),D.fail(p.error),n=Qe(Xe,p,e,D)){if(D.readyState=1,c&&y.trigger("ajaxSend",[D,p]),l)return D;p.async&&p.timeout>0&&(s=r.setTimeout((function(){D.abort("timeout")}),p.timeout));try{l=!1,n.send(w,A)}catch(t){if(l)throw t;A(-1,t)}}else A(-1,"No Transport");function A(t,e,a,u){var h,f,x,w,_,b=e;l||(l=!0,s&&r.clearTimeout(s),n=void 0,o=u||"",D.readyState=t>0?4:0,h=t>=200&&t<300||304===t,a&&(w=function(t,e,n){for(var r,i,o,a,s=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||t.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(p,D,a)),!h&&S.inArray("script",p.dataTypes)>-1&&S.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),w=function(t,e,n,r){var i,o,a,s,u,l={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)l[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}(p,w,D,h),h?(p.ifModified&&((_=D.getResponseHeader("Last-Modified"))&&(S.lastModified[i]=_),(_=D.getResponseHeader("etag"))&&(S.etag[i]=_)),204===t||"HEAD"===p.type?b="nocontent":304===t?b="notmodified":(b=w.state,f=w.data,h=!(x=w.error))):(x=b,!t&&b||(b="error",t<0&&(t=0))),D.status=t,D.statusText=(e||b)+"",h?g.resolveWith(d,[f,b,D]):g.rejectWith(d,[D,b,x]),D.statusCode(m),m=void 0,c&&y.trigger(h?"ajaxSuccess":"ajaxError",[D,p,h?f:x]),v.fireWith(d,[D,b]),c&&(y.trigger("ajaxComplete",[D,p]),--S.active||S.event.trigger("ajaxStop")))}return D},getJSON:function(t,e,n){return S.get(t,e,n,"json")},getScript:function(t,e){return S.get(t,void 0,e,"script")}}),S.each(["get","post"],(function(t,e){S[e]=function(t,n,r,i){return v(n)&&(i=i||r,r=n,n=void 0),S.ajax(S.extend({url:t,type:e,dataType:i,data:n,success:r},S.isPlainObject(t)&&t))}})),S.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),S._evalUrl=function(t,e,n){return S.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){S.globalEval(t,e,n)}})},S.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=S(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){S(this).wrapInner(t.call(this,e))})):this.each((function(){var e=S(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(n){S(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){S(this).replaceWith(this.childNodes)})),this}}),S.expr.pseudos.hidden=function(t){return!S.expr.pseudos.visible(t)},S.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},S.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(t){}};var Je={0:200,1223:204},Ke=S.ajaxSettings.xhr();g.cors=!!Ke&&"withCredentials"in Ke,g.ajax=Ke=!!Ke,S.ajaxTransport((function(t){var e,n;if(g.cors||Ke&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);e=function(t){return function(){e&&(e=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Je[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=e(),n=s.onerror=s.ontimeout=e("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout((function(){e&&n()}))},e=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),S.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),S.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return S.globalEval(t),t}}}),S.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),S.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=S("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),x.head.appendChild(e[0])},abort:function(){n&&n()}}}));var tn,en=[],nn=/(=)\?(?=&|$)|\?\?/;S.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=en.pop()||S.expando+"_"+Ce.guid++;return this[t]=!0,t}}),S.ajaxPrefilter("json jsonp",(function(t,e,n){var i,o,a,s=!1!==t.jsonp&&(nn.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&nn.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(nn,"$1"+i):!1!==t.jsonp&&(t.url+=(Ne.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||S.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=r[i],r[i]=function(){a=arguments},n.always((function(){void 0===o?S(r).removeProp(i):r[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,en.push(i)),a&&v(o)&&o(a[0]),a=o=void 0})),"script"})),g.createHTMLDocument=((tn=x.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===tn.childNodes.length),S.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(g.createHTMLDocument?((r=(e=x.implementation.createHTMLDocument("")).createElement("base")).href=x.location.href,e.head.appendChild(r)):e=x),o=!n&&[],(i=R.exec(t))?[e.createElement(i[1])]:(i=Ot([t],e,o),o&&o.length&&S(o).remove(),S.merge([],i.childNodes)));var r,i,o},S.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=Se(t.slice(s)),t=t.slice(0,s)),v(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&S.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?S("<div>").append(S.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},S.expr.pseudos.animated=function(t){return S.grep(S.timers,(function(e){return t===e.elem})).length},S.offset={setOffset:function(t,e,n){var r,i,o,a,s,u,l=S.css(t,"position"),c=S(t),h={};"static"===l&&(t.style.position="relative"),s=c.offset(),o=S.css(t,"top"),u=S.css(t,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),v(e)&&(e=e.call(t,n,S.extend({},s))),null!=e.top&&(h.top=e.top-s.top+a),null!=e.left&&(h.left=e.left-s.left+i),"using"in e?e.using.call(t,h):c.css(h)}},S.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){S.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===S.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===S.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=S(t).offset()).top+=S.css(t,"borderTopWidth",!0),i.left+=S.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-S.css(r,"marginTop",!0),left:e.left-i.left-S.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===S.css(t,"position");)t=t.offsetParent;return t||yt}))}}),S.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;S.fn[t]=function(r){return tt(this,(function(t,r,i){var o;if(m(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),S.each(["top","left"],(function(t,e){S.cssHooks[e]=te(g.pixelPosition,(function(t,n){if(n)return n=Kt(t,e),Vt.test(n)?S(t).position()[e]+"px":n}))})),S.each({Height:"height",Width:"width"},(function(t,e){S.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){S.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return tt(this,(function(e,n,i){var o;return m(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?S.css(e,n,s):S.style(e,n,i,s)}),e,a?i:void 0,a)}}))})),S.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){S.fn[e]=function(t){return this.on(e,t)}})),S.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.on("mouseenter",t).on("mouseleave",e||t)}}),S.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){S.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var rn=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;S.proxy=function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),v(t))return r=s.call(arguments,2),i=function(){return t.apply(e||this,r.concat(s.call(arguments)))},i.guid=t.guid=t.guid||S.guid++,i},S.holdReady=function(t){t?S.readyWait++:S.ready(!0)},S.isArray=Array.isArray,S.parseJSON=JSON.parse,S.nodeName=E,S.isFunction=v,S.isWindow=m,S.camelCase=it,S.type=b,S.now=Date.now,S.isNumeric=function(t){var e=S.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},S.trim=function(t){return null==t?"":(t+"").replace(rn,"$1")},void 0===(n=function(){return S}.apply(e,[]))||(t.exports=n);var on=r.jQuery,an=r.$;return S.noConflict=function(t){return r.$===S&&(r.$=an),t&&r.jQuery===S&&(r.jQuery=on),S},void 0===i&&(r.jQuery=r.$=S),S}))}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r].call(o.exports,o,o.exports,n),o.exports}(()=>{"use strict";var t=n(692);class e{get firstHistoryItem(){return this.history[0]}get lastHistoryItem(){return this.history[this.history.length-1]}get numberOfTrades(){return this.history.length}get currentValue(){return this.amountOfMoney+this.numberOfShares*this.tradeData[this.tradeData.length-1].close}constructor(t,e,n,r){this.amountOfMoney=t,this.numberOfShares=e,this.startDate=n,this.history=new Array,this.tradeData=r}}class r{constructor(t,e){this.stockHistory=t,this.propertySelector=e}populateOpenVariation(){this.stockHistory.forEach(((t,e,n)=>{null!=this.stockHistory[e].previousDay&&(this.stockHistory[e].openVariation=this.propertySelector(this.stockHistory[e])/this.propertySelector(this.stockHistory[e].previousDay)*100)}))}populateDayVariation(){this.stockHistory.forEach(((t,e,n)=>{if(this.stockHistory[e].oneDayVariation=(this.stockHistory[e].high-this.stockHistory[e].low)/this.stockHistory[e].low*100,null!=this.stockHistory[e].previousDay){const t=Math.max(this.stockHistory[e].high,this.stockHistory[e].previousDay.high),n=Math.min(this.stockHistory[e].low,this.stockHistory[e].previousDay.low);if(this.stockHistory[e].twoDaysVariation=(t-n)/n*100,null!=this.stockHistory[e].previousDay.previousDay){const r=Math.max(t,this.stockHistory[e].previousDay.previousDay.high),i=Math.min(n,this.stockHistory[e].previousDay.previousDay.low);this.stockHistory[e].threeDaysVariation=(r-i)/i*100}}}))}populate52WeeksRange(){let t=Number.MAX_SAFE_INTEGER,e=Number.MIN_SAFE_INTEGER;this.stockHistory.forEach(((n,r,i)=>{if(r>=260){for(let n=r-260;n<=r;n++)this.stockHistory[n].high>=e&&(e=this.stockHistory[r].high),this.stockHistory[n].low<=t&&(t=this.stockHistory[r].low);this.stockHistory[r].high52Weeks=e,this.stockHistory[r].low52Weeks=t}}))}populate10DaysOpenSMA(){this.stockHistory.map(((t,e)=>t.sma10Days=this.getSimpleMovingAverage(10,e)))}populate20DaysOpenSMA(){this.stockHistory.map(((t,e)=>t.sma20Days=this.getSimpleMovingAverage(20,e)))}populate50DaysOpenSMA(){this.stockHistory.map(((t,e)=>t.sma50Days=this.getSimpleMovingAverage(50,e)))}populate100DaysOpenSMA(){this.stockHistory.map(((t,e)=>t.sma100Days=this.getSimpleMovingAverage(100,e)))}populate200DaysOpenSMA(){this.stockHistory.map(((t,e)=>t.sma200Days=this.getSimpleMovingAverage(200,e)))}getSimpleMovingAverage(t,e){if(e>=t){let n=0;for(let r=e-t;r<=e;r++)n+=this.propertySelector(this.stockHistory[r]);return n/t}return null}populate10DaysOpenEMA(){this.stockHistory.map(((t,e)=>t.ema10Days=this.getExponentialMovingAverage(10,e,e<10?0:this.stockHistory[e-1].ema10Days)))}populate20DaysOpenEMA(){this.stockHistory.map(((t,e)=>t.ema20Days=this.getExponentialMovingAverage(20,e,e<20?0:this.stockHistory[e-1].ema20Days)))}populate50DaysOpenEMA(){this.stockHistory.map(((t,e)=>t.ema50Days=this.getExponentialMovingAverage(50,e,e<50?0:this.stockHistory[e-1].ema50Days)))}populate100DaysOpenEMA(){this.stockHistory.map(((t,e)=>t.ema100Days=this.getExponentialMovingAverage(100,e,e<100?0:this.stockHistory[e-1].ema100Days)))}populate200DaysOpenEMA(){this.stockHistory.map(((t,e)=>t.ema200Days=this.getExponentialMovingAverage(200,e,e<200?0:this.stockHistory[e-1].ema200Days)))}getExponentialMovingAverage(t,e,n){const r=2/(t+1);return e===t?this.getSimpleMovingAverage(t,e):e>t?this.propertySelector(this.stockHistory[e])*r+n*(1-r):null}populate14DaysOpenAverages(){let t=0,e=0;for(let n=1;n<14;n++)this.propertySelector(this.stockHistory[n-1])<this.propertySelector(this.stockHistory[n])&&(t+=this.propertySelector(this.stockHistory[n])-this.propertySelector(this.stockHistory[n-1])),this.propertySelector(this.stockHistory[n-1])>this.propertySelector(this.stockHistory[n])&&(e+=this.propertySelector(this.stockHistory[n-1])-this.propertySelector(this.stockHistory[n]));this.stockHistory[14].averageGains14Days=t/14,this.stockHistory[14].averageLosses14Days=e/14;for(let t=15;t<this.stockHistory.length;t++){let e=0,n=0;this.propertySelector(this.stockHistory[t-1])<this.propertySelector(this.stockHistory[t])&&(e+=this.propertySelector(this.stockHistory[t])-this.propertySelector(this.stockHistory[t-1])),this.propertySelector(this.stockHistory[t-1])>this.propertySelector(this.stockHistory[t])&&(n+=this.propertySelector(this.stockHistory[t-1])-this.propertySelector(this.stockHistory[t])),this.stockHistory[t].averageGains14Days=(13*this.stockHistory[t-1].averageGains14Days+e)/14,this.stockHistory[t].averageLosses14Days=(13*this.stockHistory[t-1].averageLosses14Days+n)/14}}populate14DaysOpenRSI(){this.stockHistory.map(((t,e)=>t.rsi14Days=this.getRelativeStrengthIndex(14,e)))}getRelativeStrengthIndex(t,e){return e>=t?100-100/(1+this.stockHistory[e].averageGains14Days/this.stockHistory[e].averageLosses14Days):null}populateDerivativeFirst(){this.stockHistory[0].derivativeFirst=0;for(let t=1;t<this.stockHistory.length;t++)this.stockHistory[t].derivativeFirst=this.propertySelector(this.stockHistory[t].previousDay)-this.propertySelector(this.stockHistory[t])}populateDerivativeSecond(){this.stockHistory[0].derivativeSecond=0,this.stockHistory[1].derivativeSecond=0;for(let t=2;t<this.stockHistory.length;t++)this.stockHistory[t].derivativeSecond=this.stockHistory[t].previousDay.derivativeFirst-this.stockHistory[t].derivativeFirst}populateDerivativeThird(){this.stockHistory[0].derivativeThird=0,this.stockHistory[1].derivativeThird=0,this.stockHistory[2].derivativeThird=0;for(let t=3;t<this.stockHistory.length;t++)this.stockHistory[t].derivativeThird=this.stockHistory[t].previousDay.derivativeSecond-this.stockHistory[t].derivativeSecond}}var i=n(692);class o{deepCopy(){const t=new o;return t.date=this.date,t.open=this.open,t.high=this.high,t.low=this.low,t.close=this.close,t.volume=this.volume,t.high52Weeks=this.high52Weeks,t.low52Weeks=this.low52Weeks,t}static loadFromAlphavantage(t){const e=new Array;i.each(t["Time Series (Daily)"],((n,r)=>{const i=new o;i.date=new Date(n.toString()),i.open=Number(t["Time Series (Daily)"][n]["1. open"]),i.high=Number(t["Time Series (Daily)"][n]["2. high"]),i.low=Number(t["Time Series (Daily)"][n]["3. low"]),i.close=Number(t["Time Series (Daily)"][n]["4. close"]),i.volume=Number(t["Time Series (Daily)"][n]["6. volume"]),e.push(i)}));let n=null;e.sort(((t,e)=>t.date.getTime()-e.date.getTime())),i.each(e,((t,r)=>{e[t].previousDay=n,n=e[t]}));const a=new r(e,(t=>t.open));return a.populateOpenVariation(),a.populateDayVariation(),a.populate52WeeksRange(),a.populate10DaysOpenSMA(),a.populate20DaysOpenSMA(),a.populate50DaysOpenSMA(),a.populate100DaysOpenSMA(),a.populate200DaysOpenSMA(),a.populate10DaysOpenEMA(),a.populate20DaysOpenEMA(),a.populate50DaysOpenEMA(),a.populate100DaysOpenEMA(),a.populate200DaysOpenEMA(),a.populate14DaysOpenAverages(),a.populate14DaysOpenRSI(),a.populateDerivativeFirst(),a.populateDerivativeSecond(),a.populateDerivativeThird(),e}}class a{constructor(){this.strategyBranches=new Array}toString(){var t;let e="";for(const n in this.strategyBranches)e+=`${null===(t=this.strategyBranches[n])||void 0===t?void 0:t.toString()}<br/>`;return e}simplify(){for(const t in this.strategyBranches)this.strategyBranches[t].simplify()}toCode(){let t="";for(const e in this.strategyBranches)t+=`${this.strategyBranches[e].toCode()}; `;return t}run(t,e){e.strategy=this,t.forEach((t=>{this.strategyBranches.forEach((n=>{if(n.compositeCondition&&!n.compositeCondition.evaluate(t,e))return!1;n.action.trade(t,e),e.lastHistoryItem&&(e.lastHistoryItem.executionDescription=n.toString())}))}))}}var s=n(692);class u{static printHistoricData(t,e){const n=s('\n        <table class="table table-striped" style="width: 100%">\n            <thead style="position: sticky; inset-block-start: 0; background: #eee; border-bottom: 2px solid #ccc;">\n                <tr><td style="width: 110px">date</td>\n                    <td style="width: 80px; text-align: right;">open</td>\n                    <td style="width: 80px; text-align: right;">high</td>\n                    <td style="width: 80px; text-align: right;">low</td>\n                    <td style="width: 80px; text-align: right;">close</td>\n                    <td style="width: 80px; text-align: right;">volume</td>\n                    <td style="width: 80px; text-align: right;">52 weeks low</td>\n                    <td style="width: 80px; text-align: right;">52 weeks high</td>\n                    <td style="width: 80px; text-align: right;">10 days SMA</td>\n                    <td style="width: 80px; text-align: right;">20 days SMA</td>\n                    <td style="width: 80px; text-align: right;">50 days SMA</td>\n                    <td style="width: 80px; text-align: right;">100 days SMA</td>\n                    <td style="width: 80px; text-align: right;">200 days SMA</td>\n                    <td style="width: 80px; text-align: right;">10 days EMA</td>\n                    <td style="width: 80px; text-align: right;">20 days EMA</td>\n                    <td style="width: 80px; text-align: right;">50 days EMA</td>\n                    <td style="width: 80px; text-align: right;">100 days EMA</td>\n                    <td style="width: 80px; text-align: right;">200 days EMA</td>\n                    <td style="width: 80px; text-align: right;">14 days average gains/losses</td>\n                    <td style="width: 80px; text-align: right;">14 days RSI</td>\n                    <td style="width: 80px; text-align: right;">open variation</td>\n                    <td style="width: 10px"></td>\n                    <td style="width: 80px; text-align: right;">1 day variation</td>\n                    <td style="width: 80px; text-align: right;">2 days variation</td>\n                    <td style="width: 80px; text-align: right;">3 days variation</td>\n                    <td>trade</td>\n                </tr>\n            </thead>\n            <tbody></tbody>\n        </table>');e.forEach((t=>{let e="";t.openVariation>100&&(e="<i style='color: green;' class='fas fa-arrow-up'></i>"),t.openVariation<100&&(e="<i style='color: red;' class='fas fa-arrow-down'></i>"),n.children("tbody").append(`\n                <tr>\n                    <td>${t.date.toISOString().split("T")[0]}</td>\n                    <td>${t.open.toFixed(4)}</td>\n                    <td>${t.high.toFixed(4)}</td>\n                    <td>${t.low.toFixed(4)}</td>\n                    <td>${t.close.toFixed(4)}</td>\n                    <td>${t.volume}</td>\n                    <td>${null==t.low52Weeks?"":t.low52Weeks}</td>\n                    <td>${null==t.high52Weeks?"":t.high52Weeks}</td>\n                    <td>${null==t.sma10Days?"":t.sma10Days.toFixed(4)}</td>\n                    <td>${null==t.sma20Days?"":t.sma20Days.toFixed(4)}</td>\n                    <td>${null==t.sma50Days?"":t.sma50Days.toFixed(4)}</td>\n                    <td>${null==t.sma100Days?"":t.sma100Days.toFixed(4)}</td>\n                    <td>${null==t.sma200Days?"":t.sma200Days.toFixed(4)}</td>\n                    <td>${null==t.ema10Days?"":t.ema10Days.toFixed(4)}</td>\n                    <td>${null==t.ema20Days?"":t.ema20Days.toFixed(4)}</td>\n                    <td>${null==t.ema50Days?"":t.ema50Days.toFixed(4)}</td>\n                    <td>${null==t.ema100Days?"":t.ema100Days.toFixed(4)}</td>\n                    <td>${null==t.ema200Days?"":t.ema200Days.toFixed(4)}</td>\n                    <td>\n                        ${null==t.averageGains14Days||null==t.averageGains14Days||0==t.averageGains14Days?"":"+"+t.averageGains14Days.toFixed(4)}\n                        ${null==t.averageLosses14Days||null==t.averageLosses14Days||0==t.averageLosses14Days?"":"-"+t.averageLosses14Days.toFixed(4)}\n                    </td>\n                    <td>${null==t.rsi14Days?"":t.rsi14Days.toFixed(4)}</td>\n                    <td>${t.openVariation?t.openVariation.toFixed(4)+"%":""}</td>\n                    <td>${e}</td>\n                    <td>${t.oneDayVariation?t.oneDayVariation.toFixed(4)+"%":""}</td>\n                    <td>${t.twoDaysVariation?t.twoDaysVariation.toFixed(4)+"%":""}</td>\n                    <td>${t.threeDaysVariation?t.threeDaysVariation.toFixed(4)+"%":""}</td>\n                    <td style="text-align: left;">${t.trade?t.trade:""}</td>\n                </tr>`)})),t.append(n)}}function l(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n<i||void 0===n&&i>=i)&&(n=i)}return n}function c(t){return t}var h=1e-6;function f(t){return"translate("+t+",0)"}function p(t){return"translate(0,"+t+")"}function d(t){return e=>+t(e)}function y(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function g(){return!this.__axis}function v(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,u="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,l=1===t||4===t?-1:1,v=4===t||2===t?"x":"y",m=1===t||3===t?f:p;function x(f){var p=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,x=null==i?e.tickFormat?e.tickFormat.apply(e,n):c:i,w=Math.max(o,0)+s,_=e.range(),b=+_[0]+u,D=+_[_.length-1]+u,A=(e.bandwidth?y:d)(e.copy(),u),S=f.selection?f.selection():f,T=S.selectAll(".domain").data([null]),E=S.selectAll(".tick").data(p,e).order(),M=E.exit(),k=E.enter().append("g").attr("class","tick"),C=E.select("line"),N=E.select("text");T=T.merge(T.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),E=E.merge(k),C=C.merge(k.append("line").attr("stroke","currentColor").attr(v+"2",l*o)),N=N.merge(k.append("text").attr("fill","currentColor").attr(v,l*w).attr("dy",1===t?"0em":3===t?"0.71em":"0.32em")),f!==S&&(T=T.transition(f),E=E.transition(f),C=C.transition(f),N=N.transition(f),M=M.transition(f).attr("opacity",h).attr("transform",(function(t){return isFinite(t=A(t))?m(t+u):this.getAttribute("transform")})),k.attr("opacity",h).attr("transform",(function(t){var e=this.parentNode.__axis;return m((e&&isFinite(e=e(t))?e:A(t))+u)}))),M.remove(),T.attr("d",4===t||2===t?a?"M"+l*a+","+b+"H"+u+"V"+D+"H"+l*a:"M"+u+","+b+"V"+D:a?"M"+b+","+l*a+"V"+u+"H"+D+"V"+l*a:"M"+b+","+u+"H"+D),E.attr("opacity",1).attr("transform",(function(t){return m(A(t)+u)})),C.attr(v+"2",l*o),N.attr(v,l*w).text(x),S.filter(g).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",2===t?"start":4===t?"end":"middle"),S.each((function(){this.__axis=A}))}return x.scale=function(t){return arguments.length?(e=t,x):e},x.ticks=function(){return n=Array.from(arguments),x},x.tickArguments=function(t){return arguments.length?(n=null==t?[]:Array.from(t),x):n.slice()},x.tickValues=function(t){return arguments.length?(r=null==t?null:Array.from(t),x):r&&r.slice()},x.tickFormat=function(t){return arguments.length?(i=t,x):i},x.tickSize=function(t){return arguments.length?(o=a=+t,x):o},x.tickSizeInner=function(t){return arguments.length?(o=+t,x):o},x.tickSizeOuter=function(t){return arguments.length?(a=+t,x):a},x.tickPadding=function(t){return arguments.length?(s=+t,x):s},x.offset=function(t){return arguments.length?(u=+t,x):u},x}function m(){}function x(t){return null==t?m:function(){return this.querySelector(t)}}function w(){return[]}function _(t){return null==t?w:function(){return this.querySelectorAll(t)}}function b(t){return function(){return this.matches(t)}}function D(t){return function(e){return e.matches(t)}}var A=Array.prototype.find;function S(){return this.firstElementChild}var T=Array.prototype.filter;function E(){return Array.from(this.children)}function M(t){return new Array(t.length)}function k(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function C(t,e,n,r,i,o){for(var a,s=0,u=e.length,l=o.length;s<l;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new k(t,o[s]);for(;s<u;++s)(a=e[s])&&(i[s]=a)}function N(t,e,n,r,i,o,a){var s,u,l,c=new Map,h=e.length,f=o.length,p=new Array(h);for(s=0;s<h;++s)(u=e[s])&&(p[s]=l=a.call(u,u.__data__,s,e)+"",c.has(l)?i[s]=u:c.set(l,u));for(s=0;s<f;++s)l=a.call(t,o[s],s,o)+"",(u=c.get(l))?(r[s]=u,u.__data__=o[s],c.delete(l)):n[s]=new k(t,o[s]);for(s=0;s<h;++s)(u=e[s])&&c.get(p[s])===u&&(i[s]=u)}function O(t){return t.__data__}function $(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function H(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}k.prototype={constructor:k,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var L="http://www.w3.org/1999/xhtml";const I={svg:"http://www.w3.org/2000/svg",xhtml:L,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function j(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),I.hasOwnProperty(e)?{space:I[e],local:t}:t}function P(t){return function(){this.removeAttribute(t)}}function U(t){return function(){this.removeAttributeNS(t.space,t.local)}}function R(t,e){return function(){this.setAttribute(t,e)}}function F(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function q(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function Y(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function B(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function W(t){return function(){this.style.removeProperty(t)}}function X(t,e,n){return function(){this.style.setProperty(t,e,n)}}function G(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function V(t,e){return t.style.getPropertyValue(e)||B(t).getComputedStyle(t,null).getPropertyValue(e)}function z(t){return function(){delete this[t]}}function Q(t,e){return function(){this[t]=e}}function Z(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function J(t){return t.trim().split(/^|\s+/)}function K(t){return t.classList||new tt(t)}function tt(t){this._node=t,this._names=J(t.getAttribute("class")||"")}function et(t,e){for(var n=K(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function nt(t,e){for(var n=K(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function rt(t){return function(){et(this,t)}}function it(t){return function(){nt(this,t)}}function ot(t,e){return function(){(e.apply(this,arguments)?et:nt)(this,t)}}function at(){this.textContent=""}function st(t){return function(){this.textContent=t}}function ut(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function lt(){this.innerHTML=""}function ct(t){return function(){this.innerHTML=t}}function ht(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function ft(){this.nextSibling&&this.parentNode.appendChild(this)}function pt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function dt(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===L&&e.documentElement.namespaceURI===L?e.createElement(t):e.createElementNS(n,t)}}function yt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function gt(t){var e=j(t);return(e.local?yt:dt)(e)}function vt(){return null}function mt(){var t=this.parentNode;t&&t.removeChild(this)}function xt(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function wt(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function _t(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.options);++i?e.length=i:delete this.__on}}}function bt(t,e,n){return function(){var r,i=this.__on,o=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(i)for(var a=0,s=i.length;a<s;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=n),void(r.value=e);this.addEventListener(t.type,o,n),r={type:t.type,name:t.name,value:e,listener:o,options:n},i?i.push(r):this.__on=[r]}}function Dt(t,e,n){var r=B(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function At(t,e){return function(){return Dt(this,t,e)}}function St(t,e){return function(){return Dt(this,t,e.apply(this,arguments))}}tt.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Tt=[null];function Et(t,e){this._groups=t,this._parents=e}function Mt(){return new Et([[document.documentElement]],Tt)}Et.prototype=Mt.prototype={constructor:Et,select:function(t){"function"!=typeof t&&(t=x(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new Et(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return null==(e=t.apply(this,arguments))?[]:Array.isArray(e)?e:Array.from(e);var e}}(t):_(t);for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new Et(r,i)},selectChild:function(t){return this.select(null==t?S:function(t){return function(){return A.call(this.children,t)}}("function"==typeof t?t:D(t)))},selectChildren:function(t){return this.selectAll(null==t?E:function(t){return function(){return T.call(this.children,t)}}("function"==typeof t?t:D(t)))},filter:function(t){"function"!=typeof t&&(t=b(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new Et(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,O);var n,r=e?N:C,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,s=new Array(a),u=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],f=o[c],p=f.length,d=$(t.call(h,h&&h.__data__,c,i)),y=d.length,g=u[c]=new Array(y),v=s[c]=new Array(y);r(h,f,g,v,l[c]=new Array(p),d,e);for(var m,x,w=0,_=0;w<y;++w)if(m=g[w]){for(w>=_&&(_=w+1);!(x=v[_])&&++_<y;);m._next=x||null}}return(s=new Et(s,i))._enter=u,s._exit=l,s},enter:function(){return new Et(this._enter||this._groups.map(M),this._parents)},exit:function(){return new Et(this._exit||this._groups.map(M),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(i=e(i))&&(i=i.selection()),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,i=n.length,o=r.length,a=Math.min(i,o),s=new Array(i),u=0;u<a;++u)for(var l,c=n[u],h=r[u],f=c.length,p=s[u]=new Array(f),d=0;d<f;++d)(l=c[d]||h[d])&&(p[d]=l);for(;u<i;++u)s[u]=n[u];return new Et(s,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=H);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(e)}return new Et(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=j(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?U:P:"function"==typeof e?n.local?Y:q:n.local?F:R)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?W:"function"==typeof e?G:X)(t,e,null==n?"":n)):V(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?z:"function"==typeof e?Z:Q)(t,e)):this.node()[t]},classed:function(t,e){var n=J(t+"");if(arguments.length<2){for(var r=K(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?ot:e?rt:it)(n,e))},text:function(t){return arguments.length?this.each(null==t?at:("function"==typeof t?ut:st)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?lt:("function"==typeof t?ht:ct)(t)):this.node().innerHTML},raise:function(){return this.each(ft)},lower:function(){return this.each(pt)},append:function(t){var e="function"==typeof t?t:gt(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:gt(t),r=null==e?vt:"function"==typeof e?e:x(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(mt)},clone:function(t){return this.select(t?wt:xt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?bt:_t,r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?St:At)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,i=t[e],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const kt=Mt;var Ct={value:()=>{}};function Nt(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new Ot(r)}function Ot(t){this._=t}function $t(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function Ht(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Ct,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}Ot.prototype=Nt.prototype={constructor:Ot,on:function(t,e){var n,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<s;)if(n=(t=o[a]).type)i[n]=Ht(i[n],t.name,e);else if(null==e)for(n in i)i[n]=Ht(i[n],t.name,null);return this}for(;++a<s;)if((n=(t=o[a]).type)&&(n=$t(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new Ot(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};const Lt=Nt;var It,jt,Pt=0,Ut=0,Rt=0,Ft=0,qt=0,Yt=0,Bt="object"==typeof performance&&performance.now?performance:Date,Wt="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Xt(){return qt||(Wt(Gt),qt=Bt.now()+Yt)}function Gt(){qt=0}function Vt(){this._call=this._time=this._next=null}function zt(t,e,n){var r=new Vt;return r.restart(t,e,n),r}function Qt(){qt=(Ft=Bt.now())+Yt,Pt=Ut=0;try{!function(){Xt(),++Pt;for(var t,e=It;e;)(t=qt-e._time)>=0&&e._call.call(void 0,t),e=e._next;--Pt}()}finally{Pt=0,function(){for(var t,e,n=It,r=1/0;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:It=e);jt=t,Jt(r)}(),qt=0}}function Zt(){var t=Bt.now(),e=t-Ft;e>1e3&&(Yt-=e,Ft=t)}function Jt(t){Pt||(Ut&&(Ut=clearTimeout(Ut)),t-qt>24?(t<1/0&&(Ut=setTimeout(Qt,t-Bt.now()-Yt)),Rt&&(Rt=clearInterval(Rt))):(Rt||(Ft=Bt.now(),Rt=setInterval(Zt,1e3)),Pt=1,Wt(Qt)))}function Kt(t,e,n){var r=new Vt;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}Vt.prototype=zt.prototype={constructor:Vt,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Xt():+n)+(null==e?0:+e),this._next||jt===this||(jt?jt._next=this:It=this,jt=this),this._call=t,this._time=n,Jt()},stop:function(){this._call&&(this._call=null,this._time=1/0,Jt())}};var te=Lt("start","end","cancel","interrupt"),ee=[];function ne(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(u){var l,c,h,f;if(1!==n.state)return s();for(l in i)if((f=i[l]).name===n.name){if(3===f.state)return Kt(o);4===f.state?(f.state=6,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<e&&(f.state=6,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(Kt((function(){3===n.state&&(n.state=4,n.timer.restart(a,n.delay,n.time),a(u))})),n.state=2,n.on.call("start",t,t.__data__,n.index,n.group),2===n.state){for(n.state=3,r=new Array(h=n.tween.length),l=0,c=-1;l<h;++l)(f=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=5,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);5===n.state&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=6,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=zt((function(t){n.state=1,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:te,tween:ee,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:0})}function re(t,e){var n=oe(t,e);if(n.state>0)throw new Error("too late; already scheduled");return n}function ie(t,e){var n=oe(t,e);if(n.state>3)throw new Error("too late; already running");return n}function oe(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function ae(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var se,ue=180/Math.PI,le={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function ce(t,e,n,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),t*r<e*n&&(t=-t,e=-e,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*ue,skewX:Math.atan(u)*ue,scaleX:a,scaleY:s}}function he(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,e,null,n);s.push({i:u-4,x:ae(t,i)},{i:u-2,x:ae(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:ae(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,u),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:ae(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,u),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:ae(t,n)},{i:s-2,x:ae(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var e,n=-1,r=u.length;++n<r;)s[(e=u[n]).i]=e.x(t);return s.join("")}}}var fe=he((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?le:ce(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),pe=he((function(t){return null==t?le:(se||(se=document.createElementNS("http://www.w3.org/2000/svg","g")),se.setAttribute("transform",t),(t=se.transform.baseVal.consolidate())?ce((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):le)}),", ",")",")");function de(t,e){var n,r;return function(){var i=ie(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function ye(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=ie(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},u=0,l=i.length;u<l;++u)if(i[u].name===e){i[u]=s;break}u===l&&i.push(s)}o.tween=i}}function ge(t,e,n){var r=t._id;return t.each((function(){var t=ie(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return oe(t,r).value[e]}}function ve(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function me(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function xe(){}var we=.7,_e=1/we,be="\\s*([+-]?\\d+)\\s*",De="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ae="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",Se=/^#([0-9a-f]{3,8})$/,Te=new RegExp(`^rgb\\(${be},${be},${be}\\)$`),Ee=new RegExp(`^rgb\\(${Ae},${Ae},${Ae}\\)$`),Me=new RegExp(`^rgba\\(${be},${be},${be},${De}\\)$`),ke=new RegExp(`^rgba\\(${Ae},${Ae},${Ae},${De}\\)$`),Ce=new RegExp(`^hsl\\(${De},${Ae},${Ae}\\)$`),Ne=new RegExp(`^hsla\\(${De},${Ae},${Ae},${De}\\)$`),Oe={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function $e(){return this.rgb().formatHex()}function He(){return this.rgb().formatRgb()}function Le(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=Se.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Ie(e):3===n?new Ue(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?je(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?je(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=Te.exec(t))?new Ue(e[1],e[2],e[3],1):(e=Ee.exec(t))?new Ue(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Me.exec(t))?je(e[1],e[2],e[3],e[4]):(e=ke.exec(t))?je(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Ce.exec(t))?We(e[1],e[2]/100,e[3]/100,1):(e=Ne.exec(t))?We(e[1],e[2]/100,e[3]/100,e[4]):Oe.hasOwnProperty(t)?Ie(Oe[t]):"transparent"===t?new Ue(NaN,NaN,NaN,0):null}function Ie(t){return new Ue(t>>16&255,t>>8&255,255&t,1)}function je(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ue(t,e,n,r)}function Pe(t,e,n,r){return 1===arguments.length?((i=t)instanceof xe||(i=Le(i)),i?new Ue((i=i.rgb()).r,i.g,i.b,i.opacity):new Ue):new Ue(t,e,n,null==r?1:r);var i}function Ue(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Re(){return`#${Be(this.r)}${Be(this.g)}${Be(this.b)}`}function Fe(){const t=qe(this.opacity);return`${1===t?"rgb(":"rgba("}${Ye(this.r)}, ${Ye(this.g)}, ${Ye(this.b)}${1===t?")":`, ${t})`}`}function qe(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function Ye(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function Be(t){return((t=Ye(t))<16?"0":"")+t.toString(16)}function We(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new Ge(t,e,n,r)}function Xe(t){if(t instanceof Ge)return new Ge(t.h,t.s,t.l,t.opacity);if(t instanceof xe||(t=Le(t)),!t)return new Ge;if(t instanceof Ge)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new Ge(a,s,u,t.opacity)}function Ge(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function Ve(t){return(t=(t||0)%360)<0?t+360:t}function ze(t){return Math.max(0,Math.min(1,t||0))}function Qe(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function Ze(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}ve(xe,Le,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:$e,formatHex:$e,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return Xe(this).formatHsl()},formatRgb:He,toString:He}),ve(Ue,Pe,me(xe,{brighter(t){return t=null==t?_e:Math.pow(_e,t),new Ue(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?we:Math.pow(we,t),new Ue(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new Ue(Ye(this.r),Ye(this.g),Ye(this.b),qe(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Re,formatHex:Re,formatHex8:function(){return`#${Be(this.r)}${Be(this.g)}${Be(this.b)}${Be(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Fe,toString:Fe})),ve(Ge,(function(t,e,n,r){return 1===arguments.length?Xe(t):new Ge(t,e,n,null==r?1:r)}),me(xe,{brighter(t){return t=null==t?_e:Math.pow(_e,t),new Ge(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?we:Math.pow(we,t),new Ge(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Ue(Qe(t>=240?t-240:t+120,i,r),Qe(t,i,r),Qe(t<120?t+240:t-120,i,r),this.opacity)},clamp(){return new Ge(Ve(this.h),ze(this.s),ze(this.l),qe(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=qe(this.opacity);return`${1===t?"hsl(":"hsla("}${Ve(this.h)}, ${100*ze(this.s)}%, ${100*ze(this.l)}%${1===t?")":`, ${t})`}`}}));const Je=t=>()=>t;function Ke(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):Je(isNaN(t)?e:t)}const tn=function t(e){var n=function(t){return 1==(t=+t)?Ke:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):Je(isNaN(e)?n:e)}}(e);function r(t,e){var r=n((t=Pe(t)).r,(e=Pe(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=Ke(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function en(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=Pe(e[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}en((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return Ze((n-r/e)*e,a,i,o,s)}})),en((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return Ze((n-r/e)*e,i,o,a,s)}}));var nn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,rn=new RegExp(nn.source,"g");function on(t,e){var n,r,i,o=nn.lastIndex=rn.lastIndex=0,a=-1,s=[],u=[];for(t+="",e+="";(n=nn.exec(t))&&(r=rn.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:ae(n,r)})),o=rn.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})}function an(t,e){var n;return("number"==typeof e?ae:e instanceof Le?tn:(n=Le(e))?(e=n,tn):on)(t,e)}function sn(t){return function(){this.removeAttribute(t)}}function un(t){return function(){this.removeAttributeNS(t.space,t.local)}}function ln(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function cn(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function hn(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttribute(t)}}function fn(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttributeNS(t.space,t.local)}}function pn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,i)),n}return i._value=e,i}function dn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,i)),n}return i._value=e,i}function yn(t,e){return function(){re(this,t).delay=+e.apply(this,arguments)}}function gn(t,e){return e=+e,function(){re(this,t).delay=e}}function vn(t,e){return function(){ie(this,t).duration=+e.apply(this,arguments)}}function mn(t,e){return e=+e,function(){ie(this,t).duration=e}}var xn=kt.prototype.constructor;function wn(t){return function(){this.style.removeProperty(t)}}var _n=0;function bn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Dn(){return++_n}var An=kt.prototype;bn.prototype=function(t){return kt().transition(t)}.prototype={constructor:bn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=x(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(s=l[f])&&(u=t.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),h[f]=u,ne(h[f],e,n,f,h,oe(s,n)));return new bn(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=_(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=oe(u,n),y=0,g=p.length;y<g;++y)(f=p[y])&&ne(f,e,n,y,p,d);o.push(p),a.push(u)}return new bn(o,a,e,n)},selectChild:An.selectChild,selectChildren:An.selectChildren,filter:function(t){"function"!=typeof t&&(t=b(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new bn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=e[s],c=n[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=e[s];return new bn(a,this._parents,this._name,this._id)},selection:function(){return new xn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Dn(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=oe(a,e);ne(a,t,n,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new bn(r,this._parents,t,n)},call:An.call,nodes:An.nodes,node:An.node,size:An.size,empty:An.empty,each:An.each,on:function(t,e){var n=this._id;return arguments.length<2?oe(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?re:ie;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}(n,t,e))},attr:function(t,e){var n=j(t),r="transform"===n?pe:an;return this.attrTween(t,"function"==typeof e?(n.local?fn:hn)(n,r,ge(this,"attr."+t,e)):null==e?(n.local?un:sn)(n):(n.local?cn:ln)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=j(t);return this.tween(n,(r.local?pn:dn)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?fe:an;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=V(this,t),a=(this.style.removeProperty(t),V(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,wn(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=V(this,t),s=n(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=V(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=e(r=a,s))}}(t,r,ge(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var u=ie(this,t),l=u.on,c=null==u.value[a]?o||(o=wn(e)):void 0;l===n&&i===c||(r=(n=l).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=V(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,o,n)),r}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(ge(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=oe(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?de:ye)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?yn:gn)(e,t)):oe(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?vn:mn)(e,t)):oe(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){ie(this,t).ease=e}}(e,t)):oe(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;ie(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};n.each((function(){var n=ie(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(u)),n.on=e})),0===i&&o()}))},[Symbol.iterator]:An[Symbol.iterator]};var Sn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Tn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}kt.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>2&&n.state<5,n.state=6,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},kt.prototype.transition=function(t){var e,n;t instanceof bn?(e=t._id,t=t._name):(e=Dn(),(n=Sn).time=Xt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&ne(a,t,e,l,s,n||Tn(a,e));return new bn(r,this._parents,t,e)};const{abs:En,max:Mn,min:kn}=Math;function Cn(t){return{type:t}}["w","e"].map(Cn),["n","s"].map(Cn),["n","w","e","s","nw","ne","sw","se"].map(Cn);const Nn=Math.sqrt(50),On=Math.sqrt(10),$n=Math.sqrt(2);function Hn(t,e,n){const r=(e-t)/Math.max(0,n),i=Math.floor(Math.log10(r)),o=r/Math.pow(10,i),a=o>=Nn?10:o>=On?5:o>=$n?2:1;let s,u,l;return i<0?(l=Math.pow(10,-i)/a,s=Math.round(t*l),u=Math.round(e*l),s/l<t&&++s,u/l>e&&--u,l=-l):(l=Math.pow(10,i)*a,s=Math.round(t/l),u=Math.round(e/l),s*l<t&&++s,u*l>e&&--u),u<s&&.5<=n&&n<2?Hn(t,e,2*n):[s,u,l]}function Ln(t,e,n){return Hn(t=+t,e=+e,n=+n)[2]}function In(t,e,n){n=+n;const r=(e=+e)<(t=+t),i=r?Ln(e,t,n):Ln(t,e,n);return(r?-1:1)*(i<0?1/-i:i)}function jn(t,e){return null==t||null==e?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function Pn(t,e){return null==t||null==e?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function Un(t){let e,n,r;function i(t,r,i=0,o=t.length){if(i<o){if(0!==e(r,r))return o;do{const e=i+o>>>1;n(t[e],r)<0?i=e+1:o=e}while(i<o)}return i}return 2!==t.length?(e=jn,n=(e,n)=>jn(t(e),n),r=(e,n)=>t(e)-n):(e=t===jn||t===Pn?t:Rn,n=t,r=t),{left:i,center:function(t,e,n=0,o=t.length){const a=i(t,e,n,o-1);return a>n&&r(t[a-1],e)>-r(t[a],e)?a-1:a},right:function(t,r,i=0,o=t.length){if(i<o){if(0!==e(r,r))return o;do{const e=i+o>>>1;n(t[e],r)<=0?i=e+1:o=e}while(i<o)}return i}}}function Rn(){return 0}const Fn=Un(jn),qn=Fn.right,Yn=(Fn.left,Un((function(t){return null===t?NaN:+t})).center,qn);function Bn(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=Vn(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}function Wn(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function Xn(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=Vn(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}function Gn(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}}function Vn(t,e){var n,r,i=typeof e;return null==e||"boolean"===i?Je(e):("number"===i?ae:"string"===i?(n=Le(e))?(e=n,tn):on:e instanceof Le?tn:e instanceof Date?Wn:(r=e,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(e)?Bn:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?Xn:ae:Gn))(t,e)}function zn(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function Qn(t){return+t}var Zn=[0,1];function Jn(t){return t}function Kn(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function tr(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=Kn(i,r),o=n(a,o)):(r=Kn(r,i),o=n(o,a)),function(t){return o(r(t))}}function er(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=Kn(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=Yn(t,e,1,r)-1;return o[n](i[n](e))}}function nr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function rr(){return function(){var t,e,n,r,i,o,a=Zn,s=Zn,u=Vn,l=Jn;function c(){var t,e,n,u=Math.min(a.length,s.length);return l!==Jn&&(t=a[0],e=a[u-1],t>e&&(n=t,t=e,e=n),l=function(n){return Math.max(t,Math.min(e,n))}),r=u>2?er:tr,i=o=null,h}function h(e){return null==e||isNaN(e=+e)?n:(i||(i=r(a.map(t),s,u)))(t(l(e)))}return h.invert=function(n){return l(e((o||(o=r(s,a.map(t),ae)))(n)))},h.domain=function(t){return arguments.length?(a=Array.from(t,Qn),c()):a.slice()},h.range=function(t){return arguments.length?(s=Array.from(t),c()):s.slice()},h.rangeRound=function(t){return s=Array.from(t),u=zn,c()},h.clamp=function(t){return arguments.length?(l=!!t||Jn,c()):l!==Jn},h.interpolate=function(t){return arguments.length?(u=t,c()):u},h.unknown=function(t){return arguments.length?(n=t,h):n},function(n,r){return t=n,e=r,c()}}()(Jn,Jn)}function ir(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var or,ar=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function sr(t){if(!(e=ar.exec(t)))throw new Error("invalid format: "+t);var e;return new ur({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function ur(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function lr(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function cr(t){return(t=lr(Math.abs(t)))?t[1]:NaN}function hr(t,e){var n=lr(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}sr.prototype=ur.prototype,ur.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const fr={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>hr(100*t,e),r:hr,s:function(t,e){var n=lr(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(or=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+lr(t,Math.max(0,e+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function pr(t){return t}var dr,yr,gr,vr=Array.prototype.map,mr=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];function xr(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){if(!((n=+n)>0))return[];if((t=+t)==(e=+e))return[t];const r=e<t,[i,o,a]=r?Hn(e,t,n):Hn(t,e,n);if(!(o>=i))return[];const s=o-i+1,u=new Array(s);if(r)if(a<0)for(let t=0;t<s;++t)u[t]=(o-t)/-a;else for(let t=0;t<s;++t)u[t]=(o-t)*a;else if(a<0)for(let t=0;t<s;++t)u[t]=(i+t)/-a;else for(let t=0;t<s;++t)u[t]=(i+t)*a;return u}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return function(t,e,n,r){var i,o=In(t,e,n);switch((r=sr(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(cr(e)/3)))-cr(Math.abs(t)))}(o,a))||(r.precision=i),gr(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,cr(e)-cr(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-cr(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return yr(r)}(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i,o=e(),a=0,s=o.length-1,u=o[a],l=o[s],c=10;for(l<u&&(i=u,u=l,l=i,i=a,a=s,s=i);c-- >0;){if((i=Ln(u,l,n))===r)return o[a]=u,o[s]=l,e(o);if(i>0)u=Math.floor(u/i)*i,l=Math.ceil(l/i)*i;else{if(!(i<0))break;u=Math.ceil(u*i)/i,l=Math.floor(l*i)/i}r=i}return t},t}function wr(){var t=rr();return t.copy=function(){return nr(t,wr())},ir.apply(t,arguments),xr(t)}dr=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?pr:(e=vr.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?pr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(vr.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"â":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var e=(t=sr(t)).fill,n=t.align,h=t.sign,f=t.symbol,p=t.zero,d=t.width,y=t.comma,g=t.precision,v=t.trim,m=t.type;"n"===m?(y=!0,m="g"):fr[m]||(void 0===g&&(g=12),v=!0,m="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var x="$"===f?i:"#"===f&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===f?o:/[%p]/.test(m)?u:"",_=fr[m],b=/[defgprs%]/.test(m);function D(t){var i,o,u,f=x,D=w;if("c"===m)D=_(t)+D,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:_(Math.abs(t),g),v&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),A&&0==+t&&"+"!==h&&(A=!1),f=(A?"("===h?h:l:"-"===h||"("===h?"":h)+f,D=("s"===m?mr[8+or/3]:"")+D+(A&&"("===h?")":""),b)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){D=(46===u?a+t.slice(i+1):t.slice(i))+D,t=t.slice(0,i);break}}y&&!p&&(t=r(t,1/0));var S=f.length+t.length+D.length,T=S<d?new Array(d-S+1).join(e):"";switch(y&&p&&(t=r(T+t,T.length?d-D.length:1/0),T=""),n){case"<":t=f+t+D+T;break;case"=":t=f+T+t+D;break;case"^":t=T.slice(0,S=T.length>>1)+f+t+D+T.slice(S);break;default:t=T+f+t+D}return s(t)}return g=void 0===g?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),D.toString=function(){return t+""},D}return{format:h,formatPrefix:function(t,e){var n=h(((t=sr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(cr(e)/3))),i=Math.pow(10,-r),o=mr[8+r/3];return function(t){return n(i*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),yr=dr.format,gr=dr.formatPrefix;const _r=1e3,br=6e4,Dr=36e5,Ar=864e5,Sr=6048e5,Tr=31536e6,Er=new Date,Mr=new Date;function kr(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=e=>(t(e=new Date(+e)),e),i.ceil=n=>(t(n=new Date(n-1)),e(n,1),t(n),n),i.round=t=>{const e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=(t,n)=>(e(t=new Date(+t),null==n?1:Math.floor(n)),t),i.range=(n,r,o)=>{const a=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return a;let s;do{a.push(s=new Date(+n)),e(n,o),t(n)}while(s<n&&n<r);return a},i.filter=n=>kr((e=>{if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),((t,r)=>{if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})),n&&(i.count=(e,r)=>(Er.setTime(+e),Mr.setTime(+r),t(Er),t(Mr),Math.floor(n(Er,Mr))),i.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?e=>r(e)%t==0:e=>i.count(0,e)%t==0):i:null)),i}const Cr=kr((()=>{}),((t,e)=>{t.setTime(+t+e)}),((t,e)=>e-t));Cr.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?kr((e=>{e.setTime(Math.floor(e/t)*t)}),((e,n)=>{e.setTime(+e+n*t)}),((e,n)=>(n-e)/t)):Cr:null),Cr.range;const Nr=kr((t=>{t.setTime(t-t.getMilliseconds())}),((t,e)=>{t.setTime(+t+e*_r)}),((t,e)=>(e-t)/_r),(t=>t.getUTCSeconds())),Or=(Nr.range,kr((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*_r)}),((t,e)=>{t.setTime(+t+e*br)}),((t,e)=>(e-t)/br),(t=>t.getMinutes()))),$r=(Or.range,kr((t=>{t.setUTCSeconds(0,0)}),((t,e)=>{t.setTime(+t+e*br)}),((t,e)=>(e-t)/br),(t=>t.getUTCMinutes()))),Hr=($r.range,kr((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*_r-t.getMinutes()*br)}),((t,e)=>{t.setTime(+t+e*Dr)}),((t,e)=>(e-t)/Dr),(t=>t.getHours()))),Lr=(Hr.range,kr((t=>{t.setUTCMinutes(0,0,0)}),((t,e)=>{t.setTime(+t+e*Dr)}),((t,e)=>(e-t)/Dr),(t=>t.getUTCHours()))),Ir=(Lr.range,kr((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*br)/Ar),(t=>t.getDate()-1))),jr=(Ir.range,kr((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/Ar),(t=>t.getUTCDate()-1))),Pr=(jr.range,kr((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/Ar),(t=>Math.floor(t/Ar))));function Ur(t){return kr((e=>{e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),((t,e)=>{t.setDate(t.getDate()+7*e)}),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*br)/Sr))}Pr.range;const Rr=Ur(0),Fr=Ur(1),qr=Ur(2),Yr=Ur(3),Br=Ur(4),Wr=Ur(5),Xr=Ur(6);function Gr(t){return kr((e=>{e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+7*e)}),((t,e)=>(e-t)/Sr))}Rr.range,Fr.range,qr.range,Yr.range,Br.range,Wr.range,Xr.range;const Vr=Gr(0),zr=Gr(1),Qr=Gr(2),Zr=Gr(3),Jr=Gr(4),Kr=Gr(5),ti=Gr(6),ei=(Vr.range,zr.range,Qr.range,Zr.range,Jr.range,Kr.range,ti.range,kr((t=>{t.setDate(1),t.setHours(0,0,0,0)}),((t,e)=>{t.setMonth(t.getMonth()+e)}),((t,e)=>e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())),(t=>t.getMonth()))),ni=(ei.range,kr((t=>{t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCMonth(t.getUTCMonth()+e)}),((t,e)=>e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())),(t=>t.getUTCMonth()))),ri=(ni.range,kr((t=>{t.setMonth(0,1),t.setHours(0,0,0,0)}),((t,e)=>{t.setFullYear(t.getFullYear()+e)}),((t,e)=>e.getFullYear()-t.getFullYear()),(t=>t.getFullYear())));ri.every=t=>isFinite(t=Math.floor(t))&&t>0?kr((e=>{e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),((e,n)=>{e.setFullYear(e.getFullYear()+n*t)})):null,ri.range;const ii=kr((t=>{t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCFullYear(t.getUTCFullYear()+e)}),((t,e)=>e.getUTCFullYear()-t.getUTCFullYear()),(t=>t.getUTCFullYear()));function oi(t,e,n,r,i,o){const a=[[Nr,1,_r],[Nr,5,5e3],[Nr,15,15e3],[Nr,30,3e4],[o,1,br],[o,5,3e5],[o,15,9e5],[o,30,18e5],[i,1,Dr],[i,3,108e5],[i,6,216e5],[i,12,432e5],[r,1,Ar],[r,2,1728e5],[n,1,Sr],[e,1,2592e6],[e,3,7776e6],[t,1,Tr]];function s(e,n,r){const i=Math.abs(n-e)/r,o=Un((([,,t])=>t)).right(a,i);if(o===a.length)return t.every(In(e/Tr,n/Tr,r));if(0===o)return Cr.every(Math.max(In(e,n,r),1));const[s,u]=a[i/a[o-1][2]<a[o][2]/i?o-1:o];return s.every(u)}return[function(t,e,n){const r=e<t;r&&([t,e]=[e,t]);const i=n&&"function"==typeof n.range?n:s(t,e,n),o=i?i.range(t,+e+1):[];return r?o.reverse():o},s]}ii.every=t=>isFinite(t=Math.floor(t))&&t>0?kr((e=>{e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),((e,n)=>{e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null,ii.range;const[ai,si]=oi(ii,ni,Vr,Pr,Lr,$r),[ui,li]=oi(ri,ei,Rr,Ir,Hr,Or);function ci(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function hi(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function fi(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var pi,di,yi={"-":"",_:" ",0:"0"},gi=/^\s*\d+/,vi=/^%/,mi=/[\\^$*+?|[\]().{}]/g;function xi(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function wi(t){return t.replace(mi,"\\$&")}function _i(t){return new RegExp("^(?:"+t.map(wi).join("|")+")","i")}function bi(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function Di(t,e,n){var r=gi.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function Ai(t,e,n){var r=gi.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Si(t,e,n){var r=gi.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Ti(t,e,n){var r=gi.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Ei(t,e,n){var r=gi.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function Mi(t,e,n){var r=gi.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function ki(t,e,n){var r=gi.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Ci(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Ni(t,e,n){var r=gi.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function Oi(t,e,n){var r=gi.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function $i(t,e,n){var r=gi.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Hi(t,e,n){var r=gi.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Li(t,e,n){var r=gi.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function Ii(t,e,n){var r=gi.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function ji(t,e,n){var r=gi.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Pi(t,e,n){var r=gi.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Ui(t,e,n){var r=gi.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Ri(t,e,n){var r=vi.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function Fi(t,e,n){var r=gi.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function qi(t,e,n){var r=gi.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function Yi(t,e){return xi(t.getDate(),e,2)}function Bi(t,e){return xi(t.getHours(),e,2)}function Wi(t,e){return xi(t.getHours()%12||12,e,2)}function Xi(t,e){return xi(1+Ir.count(ri(t),t),e,3)}function Gi(t,e){return xi(t.getMilliseconds(),e,3)}function Vi(t,e){return Gi(t,e)+"000"}function zi(t,e){return xi(t.getMonth()+1,e,2)}function Qi(t,e){return xi(t.getMinutes(),e,2)}function Zi(t,e){return xi(t.getSeconds(),e,2)}function Ji(t){var e=t.getDay();return 0===e?7:e}function Ki(t,e){return xi(Rr.count(ri(t)-1,t),e,2)}function to(t){var e=t.getDay();return e>=4||0===e?Br(t):Br.ceil(t)}function eo(t,e){return t=to(t),xi(Br.count(ri(t),t)+(4===ri(t).getDay()),e,2)}function no(t){return t.getDay()}function ro(t,e){return xi(Fr.count(ri(t)-1,t),e,2)}function io(t,e){return xi(t.getFullYear()%100,e,2)}function oo(t,e){return xi((t=to(t)).getFullYear()%100,e,2)}function ao(t,e){return xi(t.getFullYear()%1e4,e,4)}function so(t,e){var n=t.getDay();return xi((t=n>=4||0===n?Br(t):Br.ceil(t)).getFullYear()%1e4,e,4)}function uo(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+xi(e/60|0,"0",2)+xi(e%60,"0",2)}function lo(t,e){return xi(t.getUTCDate(),e,2)}function co(t,e){return xi(t.getUTCHours(),e,2)}function ho(t,e){return xi(t.getUTCHours()%12||12,e,2)}function fo(t,e){return xi(1+jr.count(ii(t),t),e,3)}function po(t,e){return xi(t.getUTCMilliseconds(),e,3)}function yo(t,e){return po(t,e)+"000"}function go(t,e){return xi(t.getUTCMonth()+1,e,2)}function vo(t,e){return xi(t.getUTCMinutes(),e,2)}function mo(t,e){return xi(t.getUTCSeconds(),e,2)}function xo(t){var e=t.getUTCDay();return 0===e?7:e}function wo(t,e){return xi(Vr.count(ii(t)-1,t),e,2)}function _o(t){var e=t.getUTCDay();return e>=4||0===e?Jr(t):Jr.ceil(t)}function bo(t,e){return t=_o(t),xi(Jr.count(ii(t),t)+(4===ii(t).getUTCDay()),e,2)}function Do(t){return t.getUTCDay()}function Ao(t,e){return xi(zr.count(ii(t)-1,t),e,2)}function So(t,e){return xi(t.getUTCFullYear()%100,e,2)}function To(t,e){return xi((t=_o(t)).getUTCFullYear()%100,e,2)}function Eo(t,e){return xi(t.getUTCFullYear()%1e4,e,4)}function Mo(t,e){var n=t.getUTCDay();return xi((t=n>=4||0===n?Jr(t):Jr.ceil(t)).getUTCFullYear()%1e4,e,4)}function ko(){return"+0000"}function Co(){return"%"}function No(t){return+t}function Oo(t){return Math.floor(+t/1e3)}function $o(t){return new Date(t)}function Ho(t){return t instanceof Date?+t:+new Date(+t)}function Lo(t,e,n,r,i,o,a,s,u,l){var c=rr(),h=c.invert,f=c.domain,p=l(".%L"),d=l(":%S"),y=l("%I:%M"),g=l("%I %p"),v=l("%a %d"),m=l("%b %d"),x=l("%B"),w=l("%Y");function _(t){return(u(t)<t?p:s(t)<t?d:a(t)<t?y:o(t)<t?g:r(t)<t?i(t)<t?v:m:n(t)<t?x:w)(t)}return c.invert=function(t){return new Date(h(t))},c.domain=function(t){return arguments.length?f(Array.from(t,Ho)):f().map($o)},c.ticks=function(e){var n=f();return t(n[0],n[n.length-1],null==e?10:e)},c.tickFormat=function(t,e){return null==e?_:l(e)},c.nice=function(t){var n=f();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?f(function(t,e){var n,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t}(n,t)):c},c.copy=function(){return nr(c,Lo(t,e,n,r,i,o,a,s,u,l))},c}function Io(){return ir.apply(Lo(ui,li,ri,ei,Rr,Ir,Hr,Or,Nr,di).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}function jo(t){return"string"==typeof t?new Et([[document.querySelector(t)]],[document.documentElement]):new Et([[t]],Tt)}function Po(t){return function(){return t}}function Uo(t){this._context=t}function Ro(t){return new Uo(t)}pi=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=_i(i),c=bi(i),h=_i(o),f=bi(o),p=_i(a),d=bi(a),y=_i(s),g=bi(s),v=_i(u),m=bi(u),x={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:Yi,e:Yi,f:Vi,g:oo,G:so,H:Bi,I:Wi,j:Xi,L:Gi,m:zi,M:Qi,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:No,s:Oo,S:Zi,u:Ji,U:Ki,V:eo,w:no,W:ro,x:null,X:null,y:io,Y:ao,Z:uo,"%":Co},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:lo,e:lo,f:yo,g:To,G:Mo,H:co,I:ho,j:fo,L:po,m:go,M:vo,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:No,s:Oo,S:mo,u:xo,U:wo,V:bo,w:Do,W:Ao,x:null,X:null,y:So,Y:Eo,Z:ko,"%":Co},_={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=f.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=m.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=g.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return A(t,e,n,r)},d:$i,e:$i,f:Ui,g:ki,G:Mi,H:Li,I:Li,j:Hi,L:Pi,m:Oi,M:Ii,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c.get(r[0].toLowerCase()),n+r[0].length):-1},q:Ni,Q:Fi,s:qi,S:ji,u:Ai,U:Si,V:Ti,w:Di,W:Ei,x:function(t,e,r){return A(t,n,e,r)},X:function(t,e,n){return A(t,r,e,n)},y:ki,Y:Mi,Z:Ci,"%":Ri};function b(t,e){return function(n){var r,i,o,a=[],s=-1,u=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=yi[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function D(t,e){return function(n){var r,i,o=fi(1900,void 0,1);if(A(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(e&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=hi(fi(o.y,0,1))).getUTCDay(),r=i>4||0===i?zr.ceil(r):zr(r),r=jr.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=ci(fi(o.y,0,1))).getDay(),r=i>4||0===i?Fr.ceil(r):Fr(r),r=Ir.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?hi(fi(o.y,0,1)).getUTCDay():ci(fi(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,hi(o)):ci(o)}}function A(t,e,n,r){for(var i,o,a=0,s=e.length,u=n.length;a<s;){if(r>=u)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=_[i in yi?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return x.x=b(n,x),x.X=b(r,x),x.c=b(e,x),w.x=b(n,w),w.X=b(r,w),w.c=b(e,w),{format:function(t){var e=b(t+="",x);return e.toString=function(){return t},e},parse:function(t){var e=D(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=b(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=D(t+="",!0);return e.toString=function(){return t},e}}}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),di=pi.format,pi.parse,pi.utcFormat,pi.utcParse,Array.prototype.slice,Uo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};const Fo=Math.PI,qo=2*Fo,Yo=1e-6,Bo=qo-Yo;function Wo(t){this._+=t[0];for(let e=1,n=t.length;e<n;++e)this._+=arguments[e]+t[e]}class Xo{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==t?Wo:function(t){let e=Math.floor(t);if(!(e>=0))throw new Error(`invalid digits: ${t}`);if(e>15)return Wo;const n=10**e;return function(t){this._+=t[0];for(let e=1,r=t.length;e<r;++e)this._+=Math.round(arguments[e]*n)/n+t[e]}}(t)}moveTo(t,e){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,e){this._append`L${this._x1=+t},${this._y1=+e}`}quadraticCurveTo(t,e,n,r){this._append`Q${+t},${+e},${this._x1=+n},${this._y1=+r}`}bezierCurveTo(t,e,n,r,i,o){this._append`C${+t},${+e},${+n},${+r},${this._x1=+i},${this._y1=+o}`}arcTo(t,e,n,r,i){if(t=+t,e=+e,n=+n,r=+r,(i=+i)<0)throw new Error(`negative radius: ${i}`);let o=this._x1,a=this._y1,s=n-t,u=r-e,l=o-t,c=a-e,h=l*l+c*c;if(null===this._x1)this._append`M${this._x1=t},${this._y1=e}`;else if(h>Yo)if(Math.abs(c*s-u*l)>Yo&&i){let f=n-o,p=r-a,d=s*s+u*u,y=f*f+p*p,g=Math.sqrt(d),v=Math.sqrt(h),m=i*Math.tan((Fo-Math.acos((d+h-y)/(2*g*v)))/2),x=m/v,w=m/g;Math.abs(x-1)>Yo&&this._append`L${t+x*l},${e+x*c}`,this._append`A${i},${i},0,0,${+(c*f>l*p)},${this._x1=t+w*s},${this._y1=e+w*u}`}else this._append`L${this._x1=t},${this._y1=e}`}arc(t,e,n,r,i,o){if(t=+t,e=+e,o=!!o,(n=+n)<0)throw new Error(`negative radius: ${n}`);let a=n*Math.cos(r),s=n*Math.sin(r),u=t+a,l=e+s,c=1^o,h=o?r-i:i-r;null===this._x1?this._append`M${u},${l}`:(Math.abs(this._x1-u)>Yo||Math.abs(this._y1-l)>Yo)&&this._append`L${u},${l}`,n&&(h<0&&(h=h%qo+qo),h>Bo?this._append`A${n},${n},0,1,${c},${t-a},${e-s}A${n},${n},0,1,${c},${this._x1=u},${this._y1=l}`:h>Yo&&this._append`A${n},${n},0,${+(h>=Fo)},${c},${this._x1=t+n*Math.cos(i)},${this._y1=e+n*Math.sin(i)}`)}rect(t,e,n,r){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${n=+n}v${+r}h${-n}Z`}toString(){return this._}}function Go(t){return t[0]}function Vo(t){return t[1]}function zo(t,e){var n=Po(!0),r=null,i=Ro,o=null,a=function(t){let e=3;return t.digits=function(n){if(!arguments.length)return e;if(null==n)e=null;else{const t=Math.floor(n);if(!(t>=0))throw new RangeError(`invalid digits: ${n}`);e=t}return t},()=>new Xo(e)}(s);function s(s){var u,l,c,h=(s=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(s)).length,f=!1;for(null==r&&(o=i(c=a())),u=0;u<=h;++u)!(u<h&&n(l=s[u],u,s))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(l,u,s),+e(l,u,s));if(c)return o=null,c+""||null}return t="function"==typeof t?t:void 0===t?Go:Po(t),e="function"==typeof e?e:void 0===e?Vo:Po(e),s.x=function(e){return arguments.length?(t="function"==typeof e?e:Po(+e),s):t},s.y=function(t){return arguments.length?(e="function"==typeof t?t:Po(+t),s):e},s.defined=function(t){return arguments.length?(n="function"==typeof t?t:Po(!!t),s):n},s.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),s):i},s.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),s):r},s}function Qo(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function Zo(t){this._context=t}function Jo(t){return new Zo(t)}function Ko(t,e,n){this.k=t,this.x=e,this.y=n}var ta,ea,na,ra,ia;Zo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Qo(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Qo(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},Ko.prototype={constructor:Ko,scale:function(t){return 1===t?this:new Ko(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new Ko(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new Ko(1,0,0),Ko.prototype;class oa{constructor(t,e,n){this.openDayColor="steelblue",this.sma50DaysColor="chocolate",this.sma100DaysColor="brown",this.sma200DaysColor="maroon",this.ema10DaysColor="darkolivegreen",this.ema20DaysColor="olivedrab",this.ema50DaysColor="darkgreen",this.ema100DaysColor="forestgreen",this.ema200DaysColor="lightgreen",this.rsi14DaysColor="mediumpurple",this.derivativeFirst="mediumslateblue",this.derivativeSecond="mediumturquoise",this.derivativeThird="midnightblue",this.svgContainer=t,this.tradeData=e,this.margin=n,this.width=window.innerWidth-n.left-n.right,this.height=window.innerHeight-n.top-n.bottom,this.xScale=Io().domain(function(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let i=-1;for(let o of t)null!=(o=e(o,++i))&&(void 0===n?o>=o&&(n=r=o):(n>o&&(n=o),r<o&&(r=o)))}return[n,r]}(e,(t=>t.date))).range([0,this.width]),this.yScale=wr().domain([0,l(e,(t=>t.open))]).range([this.height,0]),this.svg=this.svgContainer.append("g").attr("transform",`translate(${n.left}, ${n.top})`)}drawDayOpenGraph(){this.svg.append("g").attr("id","xAxis").attr("transform",`translate(0, ${this.height})`).call(v(3,this.xScale)),this.svg.append("g").attr("id","yAxis").attr("transform",`translate(${this.width}, 0)`).call(v(2,this.yScale));const t=zo().x((t=>this.xScale(t.date))).y((t=>this.yScale(t.open))).curve(Jo);this.svg.append("path").attr("id","dayOpen").data([this.tradeData]).style("fill","none").attr("stroke",this.openDayColor).attr("stroke-width","1.5").attr("d",t)}draw50DaysSMAGraph(){const t=zo().defined((t=>null!==t.sma50Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.sma50Days))).curve(Jo);this.svg.append("path").attr("id","sma50Days").data([this.tradeData]).style("fill","none").attr("stroke",this.sma50DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","sma50Days")}draw100DaysSMAGraph(){const t=zo().defined((t=>null!==t.sma100Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.sma100Days))).curve(Jo);this.svg.append("path").attr("id","sma100Days").data([this.tradeData]).style("fill","none").attr("stroke",this.sma100DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","sma100Days")}draw200DaysSMAGraph(){const t=zo().defined((t=>null!==t.sma200Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.sma200Days))).curve(Jo);this.svg.append("path").attr("id","sma200Days").data([this.tradeData]).style("fill","none").attr("stroke",this.sma200DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","sma200Days")}draw10DaysEMAGraph(){const t=zo().defined((t=>null!==t.ema10Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.ema10Days))).curve(Jo);this.svg.append("path").attr("id","ema10Days").data([this.tradeData]).style("fill","none").attr("stroke",this.ema10DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","ema10Days")}draw20DaysEMAGraph(){const t=zo().defined((t=>null!==t.ema20Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.ema20Days))).curve(Jo);this.svg.append("path").attr("id","ema20Days").data([this.tradeData]).style("fill","none").attr("stroke",this.ema20DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","ema20Days")}draw50DaysEMAGraph(){const t=zo().defined((t=>null!==t.ema50Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.ema50Days))).curve(Jo);this.svg.append("path").attr("id","ema50Days").data([this.tradeData]).style("fill","none").attr("stroke",this.ema50DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","ema50Days")}draw100DaysEMAGraph(){const t=zo().defined((t=>null!==t.ema100Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.ema100Days))).curve(Jo);this.svg.append("path").attr("id","ema100Days").data([this.tradeData]).style("fill","none").attr("stroke",this.ema100DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","ema100Days")}draw200DaysEMAGraph(){const t=zo().defined((t=>null!==t.ema200Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.ema200Days))).curve(Jo);this.svg.append("path").attr("id","ema200Days").data([this.tradeData]).style("fill","none").attr("stroke",this.ema200DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","ema200Days")}draw14DaysRSIGraph(){const t=zo().defined((t=>null!==t.rsi14Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.rsi14Days))).curve(Jo);this.svg.append("path").attr("id","rsi14Days").data([this.tradeData]).style("fill","none").attr("stroke",this.rsi14DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","rsi14Days")}drawLegend(){const t=this.svgContainer.append("g"),e=[["Day open",this.openDayColor,"dayOpen"],["50 simple moving average",this.sma50DaysColor,"sma50Days"],["100 simple moving average",this.sma100DaysColor,"sma100Days"],["200 simple moving average",this.sma200DaysColor,"sma200Days"],["10 exponential moving average",this.ema10DaysColor,"ema10Days"],["20 exponential moving average",this.ema20DaysColor,"ema20Days"],["50 exponential moving average",this.ema50DaysColor,"ema50Days"],["100 exponential moving average",this.ema100DaysColor,"ema100Days"],["200 exponential moving average",this.ema200DaysColor,"ema200Days"],["14 relative strength index",this.rsi14DaysColor,"rsi14Days"]],n="lightsteelblue";t.append("rect").attr("x",50).attr("y",50).attr("width",270).attr("height",30*e.length+20).style("fill",n).style("stroke",n).style("stroke-width",2);for(let r=0;r<e.length;r++){const i=`#${e[r][2]}`,o=e[r][1];t.append("rect").attr("x",60).attr("y",50+30*r+10).attr("width",20).attr("height",20).style("fill",o).style("stroke",o).style("stroke-width",2).attr("id",`icon${e[r][2]}`).on("click",(t=>{const e=jo(`#${t.currentTarget.id}`);0===Number(jo(i).style("opacity"))?(jo(i).style("opacity",1),e.style("fill",o)):(jo(i).style("opacity",0),e.style("fill",n))})),t.append("text").attr("x",90).attr("y",50+30*r+10+10).style("fill","black").text(e[r][0]).attr("text-anchor","left").style("alignment-baseline","middle")}}drawDerivativeFirstGraph(){const t=zo().defined((t=>null!==t.derivativeFirst)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.derivativeFirst))).curve(Jo);this.svg.append("path").attr("id","derivativeFirst").data([this.tradeData]).style("fill","none").attr("stroke",this.derivativeFirst).attr("stroke-width","1.5").attr("d",t).attr("id","derivativeFirst")}drawDerivativeSecondGraph(){const t=zo().defined((t=>null!==t.derivativeSecond)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.derivativeSecond))).curve(Jo);this.svg.append("path").attr("id","derivativeSecond").data([this.tradeData]).style("fill","none").attr("stroke",this.derivativeSecond).attr("stroke-width","1.5").attr("d",t).attr("id","derivativeSecond")}drawDerivativeThirdGraph(){const t=zo().defined((t=>null!==t.derivativeThird)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.derivativeThird))).curve(Jo);this.svg.append("path").attr("id","derivativeThird").data([this.tradeData]).style("fill","none").attr("stroke",this.derivativeThird).attr("stroke-width","1.5").attr("d",t).attr("id","derivativeThird")}}class aa{constructor(t,e){this.code=t,this.classDescription=e}}class sa{static item(t){return this.AllComparisonOperatorTypes.filter((e=>e.code.toUpperCase()===t.toUpperCase()))[0]}}ta=sa,sa.EQUAL=new aa("EQUAL","="),sa.NOT_EQUAL=new aa("NOT_EQUAL","!="),sa.GREATER_THAN_OR_EQUAL_TO=new aa("GREATER_THAN_OR_EQUAL_TO",">="),sa.LESS_THAN_OR_EQUAL_TO=new aa("LESS_THAN_OR_EQUAL_TO","<="),sa.GREATER_THAN=new aa("GREATER_THAN",">"),sa.LESS_THAN=new aa("LESS_THAN","<"),sa.AllComparisonOperatorTypes=[ta.EQUAL,ta.NOT_EQUAL,ta.GREATER_THAN_OR_EQUAL_TO,ta.LESS_THAN_OR_EQUAL_TO,ta.GREATER_THAN,ta.LESS_THAN];class ua{constructor(t){this.comparisonOperatorType=sa.item(t)}toString(){return this.comparisonOperatorType.classDescription}toCode(){return this.comparisonOperatorType.classDescription}}class la{constructor(t,e,n){this.term1=t,this.comparisonOperator=e,this.term2=n}evaluate(t,e){const n=this.term1.evaluate(t,e),r=this.term2.evaluate(t,e);if(null==n||null==r)return!1;switch(this.comparisonOperator.comparisonOperatorType){case sa.EQUAL:return n===r;case sa.NOT_EQUAL:return n!==r;case sa.GREATER_THAN_OR_EQUAL_TO:return n>=r;case sa.LESS_THAN_OR_EQUAL_TO:return n<=r;case sa.GREATER_THAN:return n>r;case sa.LESS_THAN:return n<r}}simplify(){this.term1.simplify(),this.term2.simplify()}toString(){var t,e,n;return`${null===(t=this.term1)||void 0===t?void 0:t.toString()} ${null===(e=this.comparisonOperator)||void 0===e?void 0:e.toString()} ${null===(n=this.term2)||void 0===n?void 0:n.toString()}`}toCode(){var t,e,n;return`${null===(t=this.term1)||void 0===t?void 0:t.toCode()} ${null===(e=this.comparisonOperator)||void 0===e?void 0:e.toCode()} ${null===(n=this.term2)||void 0===n?void 0:n.toCode()}`}}class ca{constructor(t){this.controlId=t}}class ha extends ca{render(){const t=sa.AllComparisonOperatorTypes.map((t=>`<option value='${t.code}'>${t.classDescription}</option>`)).reduce(((t,e)=>t+e));return`<select id='${this.controlId}'><option></option>${t}</select>`}renderHTML(){const t=document.createElement("select");t.setAttribute("data-glyph-type","ComparisonOperator");const e=document.createElement("option");e.value="",e.text="",t.appendChild(e);for(const e of sa.AllComparisonOperatorTypes){const n=document.createElement("option");n.value=e.code,n.text=e.classDescription,t.appendChild(n)}return t}read(){var t;const e=null===(t=document.getElementById(this.controlId))||void 0===t?void 0:t.value.toString();return e?new ua(e):null}}class fa{constructor(t,e){this.code=t,this.classDescription=e}}class pa{static item(t){return this.AllArithmeticOperatorTypes.filter((e=>e.code.toUpperCase()===t.toUpperCase()))[0]}}ea=pa,pa.ADDITION=new fa("ADDITION","+"),pa.SUBSTRACTION=new fa("SUBSTRACTION","-"),pa.MULTIPLICATION=new fa("MULTIPLICATION","*"),pa.DIVISION=new fa("MULTIPLICATION","/"),pa.AllArithmeticOperatorTypes=[ea.ADDITION,ea.SUBSTRACTION,ea.MULTIPLICATION,ea.DIVISION];class da{constructor(t){this.arithmeticOperatorType=pa.item(t)}toString(){return this.arithmeticOperatorType.classDescription}toCode(){return this.arithmeticOperatorType.classDescription}}class ya{constructor(t,e,n,r){this.coeficient=n,this.arithmeticOperator=r,this.scope=t,this.indicator=e}evaluate(t,e){const n=this.scope.evaluate(t,e);if(null==n)return null;const r=this.indicator.evaluate(n,e);if(!this.coeficient||!this.arithmeticOperator)return r;switch(this.arithmeticOperator.arithmeticOperatorType){case pa.ADDITION:return r+this.coeficient;case pa.SUBSTRACTION:return r-this.coeficient;case pa.MULTIPLICATION:return r*this.coeficient;case pa.DIVISION:return r/this.coeficient}}simplify(){this.arithmeticOperator&&this.coeficient&&(this.arithmeticOperator.arithmeticOperatorType.code===pa.MULTIPLICATION.code&&1===this.coeficient||this.arithmeticOperator.arithmeticOperatorType.code===pa.ADDITION.code&&0===this.coeficient)&&(this.coeficient=null,this.arithmeticOperator=null)}toString(){var t,e,n,r,i;return this.coeficient&&this.arithmeticOperator?`${this.coeficient.toString()} ${null===(n=this.arithmeticOperator)||void 0===n?void 0:n.toString()} ${null===(r=this.scope)||void 0===r?void 0:r.toString()} ${null===(i=this.indicator)||void 0===i?void 0:i.toString()}`:`${null===(t=this.scope)||void 0===t?void 0:t.toString()} ${null===(e=this.indicator)||void 0===e?void 0:e.toString()}`}toCode(){var t,e,n,r,i;return this.coeficient&&this.arithmeticOperator?`${this.coeficient.toString()} ${null===(n=this.arithmeticOperator)||void 0===n?void 0:n.toCode()} ${null===(r=this.scope)||void 0===r?void 0:r.toCode()}::${null===(i=this.indicator)||void 0===i?void 0:i.toCode()}`:`${null===(t=this.scope)||void 0===t?void 0:t.toCode()}::${null===(e=this.indicator)||void 0===e?void 0:e.toCode()}`}}class ga extends ca{render(){const t=pa.AllArithmeticOperatorTypes.map((t=>`<option value='${t.code}'>${t.classDescription}</option>`)).reduce(((t,e)=>t+e));return`<select id='${this.controlId}'><option></option>${t}</select>`}renderHTML(){const t=document.createElement("select");t.setAttribute("data-glyph-type","ArithmeticOperator");const e=document.createElement("option");e.value="",e.text="",t.appendChild(e);for(const e of pa.AllArithmeticOperatorTypes){const n=document.createElement("option");n.value=e.code,n.text=e.classDescription,t.appendChild(n)}return t}read(){var t;const e=null===(t=document.getElementById(this.controlId))||void 0===t?void 0:t.value.toString();return e?new da(e):null}}class va extends ca{render(){return`<input type='number' id='${this.controlId}' value='' step='0.01' size='4' />`}read(){var t;const e=null===(t=document.getElementById(this.controlId))||void 0===t?void 0:t.value.toString();return e?Number(e):null}}class ma{constructor(t,e){this.code=t,this.classDescription=e}}class xa{static item(t){return this.AllIndicatorTypes.filter((e=>e.code.toUpperCase()===t.toUpperCase()))[0]}}na=xa,xa.OPEN=new ma("OPEN","Open"),xa.PREV_BUY=new ma("PREV_BUY","Previous Buy Price"),xa.MIN_52_WEEK=new ma("MIN_52_WEEK","52 Weeks Minimum"),xa.MAX_52_WEEK=new ma("MAX_52_WEEK","52 Weeks Maximum"),xa.SMA_10_DAYS=new ma("SMA_10_DAYS","Simple Moving Average 10 Days"),xa.SMA_20_DAYS=new ma("SMA_20_DAYS","Simple Moving Average 20 Days"),xa.SMA_50_DAYS=new ma("SMA_50_DAYS","Simple Moving Average 50 Days"),xa.SMA_100_DAYS=new ma("SMA_100_DAYS","Simple Moving Average 100 Days"),xa.SMA_200_DAYS=new ma("SMA_200_DAYS","Simple Moving Average 200 Days"),xa.EMA_10_DAYS=new ma("EMA_10_DAYS","Exponential Moving Average 10 Days"),xa.EMA_20_DAYS=new ma("EMA_20_DAYS","Exponential Moving Average 20 Days"),xa.EMA_50_DAYS=new ma("EMA_50_DAYS","Exponential Moving Average 50 Days"),xa.EMA_100_DAYS=new ma("EMA_100_DAYS","Exponential Moving Average 100 Days"),xa.EMA_200_DAYS=new ma("EMA_200_DAYS","Exponential Moving Average 200 Days"),xa.AllIndicatorTypes=[na.OPEN,na.PREV_BUY,na.MIN_52_WEEK,na.MAX_52_WEEK,na.SMA_10_DAYS,na.SMA_20_DAYS,na.SMA_50_DAYS,na.SMA_100_DAYS,na.SMA_200_DAYS,na.EMA_10_DAYS,na.EMA_20_DAYS,na.EMA_50_DAYS,na.EMA_100_DAYS,na.EMA_200_DAYS];class wa{constructor(t){this.indicatorType=xa.item(t)}evaluate(t,e){switch(this.indicatorType){case xa.OPEN:return t.open;case xa.PREV_BUY:return null==e?void 0:e.lastHistoryItem.sharePrice;case xa.MIN_52_WEEK:return t.low52Weeks;case xa.MAX_52_WEEK:return t.high52Weeks;case xa.SMA_10_DAYS:return t.sma10Days;case xa.SMA_20_DAYS:return t.sma20Days;case xa.SMA_50_DAYS:return t.sma50Days;case xa.SMA_100_DAYS:return t.sma100Days;case xa.SMA_200_DAYS:return t.sma200Days;case xa.EMA_10_DAYS:return t.ema10Days;case xa.EMA_20_DAYS:return t.ema20Days;case xa.EMA_50_DAYS:return t.ema50Days;case xa.EMA_100_DAYS:return t.ema100Days;case xa.EMA_200_DAYS:return t.ema200Days}}toString(){return this.indicatorType.classDescription}toCode(){return this.indicatorType.code}}class _a extends ca{render(){const t=xa.AllIndicatorTypes.map((t=>`<option value='${t.code}'>${t.classDescription}</option>`)).reduce(((t,e)=>t+e));return`<select id='${this.controlId}'><option></option>${t}</select>`}renderHTML(){const t=document.createElement("select");t.setAttribute("data-glyph-type","Indicator");const e=document.createElement("option");e.value="",e.text="",t.appendChild(e);for(const e of xa.AllIndicatorTypes){const n=document.createElement("option");n.value=e.code,n.text=e.classDescription,t.appendChild(n)}return t}read(){var t;const e=null===(t=document.getElementById(this.controlId))||void 0===t?void 0:t.value.toString();return e?new wa(e):null}}class ba{constructor(t,e){this.code=t,this.classDescription=e}}class Da{static item(t){return this.AllScopeTypes.filter((e=>e.code.toUpperCase()===t.toUpperCase()))[0]}}ra=Da,Da.TODAY=new ba("TODAY","Today"),Da.YESTERDAY=new ba("YESTERDAY","Yesterday"),Da.AllScopeTypes=[ra.TODAY,ra.YESTERDAY];class Aa{constructor(t){this.scopeType=Da.item(t)}evaluate(t,e){switch(this.scopeType){case Da.TODAY:return t;case Da.YESTERDAY:return t.previousDay}}toString(){return this.scopeType.classDescription}toCode(){return this.scopeType.code}}class Sa extends ca{render(){const t=Da.AllScopeTypes.map((t=>`<option value='${t.code}'>${t.classDescription}</option>`)).reduce(((t,e)=>t+e));return`<select id='${this.controlId}'><option></option>${t}</select>`}renderHTML(){const t=document.createElement("select");t.setAttribute("data-glyph-type","Scope");const e=document.createElement("option");e.value="",e.text="",t.appendChild(e);for(const e of Da.AllScopeTypes){const n=document.createElement("option");n.value=e.code,n.text=e.classDescription,t.appendChild(n)}return t}read(){var t;const e=null===(t=document.getElementById(this.controlId))||void 0===t?void 0:t.value.toString();return e?new Aa(e):null}}class Ta extends ca{constructor(){super(...arguments),this.coeficientPresenter=new va(`${this.controlId}_coeficient`),this.arithmeticOperatorPresenter=new ga(`${this.controlId}_arithmeticOperator`),this.scopePresenter=new Sa(`${this.controlId}_scope`),this.indicatorPresenter=new _a(`${this.controlId}_indicator`)}render(){return`${this.coeficientPresenter.render()} ${this.arithmeticOperatorPresenter.render()} ${this.scopePresenter.render()} ${this.indicatorPresenter.render()}`}read(){const t=this.scopePresenter.read(),e=this.indicatorPresenter.read(),n=this.coeficientPresenter.read(),r=this.arithmeticOperatorPresenter.read();return e?new ya(t,e,n,r):null}}class Ea{constructor(t,e,n,r,i,o){this.action=t,this.date=e,this.numberOfShares=n,this.sharePrice=r,this.availableCash=i,this.totalNumberOfShares=o,this.totalEquity=this.availableCash+this.totalNumberOfShares*this.sharePrice}}class Ma{constructor(t,e){this.actionType=t,this.param=e}trade(t,e){switch(this.actionType){case Ca.BUY_EXACT:const n=t.open*this.param;if(e.amountOfMoney<n)return;e.numberOfShares+=this.param,e.amountOfMoney-=n,e.history.push(new Ea("BUY",t.date,this.param,t.open,e.amountOfMoney,e.numberOfShares));break;case Ca.SELL_EXACT:if(e.numberOfShares<this.param)return;const r=t.open*this.param;e.numberOfShares-=this.param,e.amountOfMoney+=r,e.history.push(new Ea("SELL",t.date,this.param,t.open,e.amountOfMoney,e.numberOfShares));break;case Ca.BUY_PERCENTAGE:const i=e.amountOfMoney*this.param/100;if(i<t.open)return;const o=Math.floor(i/t.open);e.numberOfShares+=o,e.amountOfMoney-=t.open*o,e.history.push(new Ea("BUY_PERCENTAGE",t.date,this.param,t.open,e.amountOfMoney,e.numberOfShares));break;case Ca.SELL_PERCENTAGE:const a=Math.floor(e.numberOfShares*this.param/100);if(e.numberOfShares<a)return;e.numberOfShares-=a,e.amountOfMoney+=t.open*a,e.history.push(new Ea("SELL_PERCENTAGE",t.date,a,t.open,e.amountOfMoney,e.numberOfShares))}}simplify(){}toString(){return this.actionType.instanceDescription(this.param)}toCode(){return`${this.actionType.code} ${this.param}`}}class ka{constructor(t,e,n){this.code=t,this.classDescription=e,this.instanceDescription=n}}class Ca{static item(t){return this.AllActionTypes.filter((e=>e.code.toUpperCase()===t.toUpperCase()))[0]}}ia=Ca,Ca.BUY_EXACT=new ka("BUY_EXACT","Buy exact number of shares",(t=>`Buy ${t} number of shares`)),Ca.SELL_EXACT=new ka("SELL_EXACT","Sell exact number of owned shares",(t=>`Sell ${t} number of owned shares`)),Ca.BUY_PERCENTAGE=new ka("BUY_PERCENTAGE","Buy using percentage of cash",(t=>`Buy using ${t}% of cash`)),Ca.SELL_PERCENTAGE=new ka("SELL_PERCENTAGE","Sell percentage of owned shares",(t=>`Sell ${t}% of owned shares`)),Ca.BUY_AT_MOST=new ka("BUY_AT_MOST","Buy at most number of shares",(t=>`Buy at most ${t} shares`)),Ca.SELL_AT_LEAST=new ka("SELL_AT_LEAST","Sell at least number of shares",(t=>`Sell at least ${t} shares`)),Ca.AllActionTypes=[ia.BUY_EXACT,ia.SELL_EXACT,ia.BUY_PERCENTAGE,ia.SELL_PERCENTAGE,ia.BUY_AT_MOST,ia.SELL_AT_LEAST];const Na=new class extends ca{constructor(){super(...arguments),this.term1Presenter=new Ta(`${this.controlId}_term1`),this.comparisonOperatorPresenter=new ha(`${this.controlId}_comparisonOperator`),this.term2Presenter=new Ta(`${this.controlId}_term2`)}render(){return`${this.term1Presenter.render()} ${this.comparisonOperatorPresenter.render()} ${this.term2Presenter.render()}`}read(){const t=this.term1Presenter.read(),e=this.comparisonOperatorPresenter.read(),n=this.term2Presenter.read();return t&&e&&n?new la(t,e,n):null}}("binaryCondition"),Oa=new class extends ca{render(){const t=Ca.AllActionTypes.map((t=>`<option value='${t.code}'>${t.classDescription}</option>`)).reduce(((t,e)=>t+e));return`<select id='${this.controlId}_ActionType'><option></option>${t}</select><span id='${this.controlId}_Span'></span><input type='number' id='${this.controlId}_Param' step='1' size='4' />`}addJavascript(){document.getElementById(`${this.controlId}_ActionType`).addEventListener("change",(()=>this.javascript()))}javascript(){var t;const e=null===(t=document.getElementById(`${this.controlId}_ActionType`))||void 0===t?void 0:t.value.toString(),n=document.getElementById(`${this.controlId}_Param`),r=document.getElementById(`${this.controlId}_Span`);switch(e){case Ca.BUY_EXACT.code:case Ca.BUY_AT_MOST.code:r.textContent="Number of shares",n.removeAttribute("min"),n.removeAttribute("max");break;case Ca.BUY_PERCENTAGE.code:r.textContent="Percentage of cash",n.min="0",n.max="100";break;case Ca.SELL_EXACT.code:case Ca.SELL_AT_LEAST.code:r.textContent="Number of shares",n.removeAttribute("min"),n.removeAttribute("max");break;case Ca.SELL_PERCENTAGE.code:r.textContent="Percentage of owned shares",n.min="0",n.max="100"}}read(){var t,e;const n=null===(t=document.getElementById(`${this.controlId}_ActionType`))||void 0===t?void 0:t.value.toString(),r=Ca.item(n),i=Number(null===(e=document.getElementById(`${this.controlId}_Param`))||void 0===e?void 0:e.value.toString());return new Ma(r,i)}}("action"),$a={top:50,right:50,bottom:50,left:50};window.innerWidth,window.innerHeight,t((()=>{let n;t(document).ajaxStart((function(){t("#overlay").fadeIn()})).ajaxStop((function(){t("#overlay").fadeOut()}));const r=new a;t("#ticker").on("change",(()=>{const e=t("#ticker").val().toString();t("#startDate").prop("disabled",!0),t("#startingAmount").prop("disabled",!0),t.getJSON(`.\\alphavantage\\${e}.json`,(e=>{n=o.loadFromAlphavantage(e).map((t=>t)),t("#startDate").val(n[0].date.toISOString().split("T")[0]),u.printHistoricData(t("#menu2"),n);const r=jo("#chart").select("svg"),i=new oa(r,n,$a);i.drawDayOpenGraph(),i.draw50DaysSMAGraph(),i.draw100DaysSMAGraph(),i.draw200DaysSMAGraph(),i.draw50DaysEMAGraph(),i.draw100DaysEMAGraph(),i.draw200DaysEMAGraph(),i.drawLegend(),t("#startDate").prop("disabled",!1),t("#startingAmount").prop("disabled",!1)})).fail((()=>{console.log("Error while reading json")})).always((()=>{}))})),t("#addStrategyBranch").on("click",(function(){})),t("#run").on("click",(function(){const i=Number(t("#startingAmount").val()),o=new Date(t("#startDate").val().toString()),a=new e(i,0,o,n);r.run(n.filter((t=>((t,e)=>t.date>=e)(t,o))),a);let s=1;a.history.forEach((e=>{const n="BUY"===e.action?"blue":"red";t("#results > tbody").append(`\n                <tr style='color:${n}'>\n                    <td>${s}</td>\n                    <td>${e.date.toISOString()}</td>\n                    <td>${e.action}</td>\n                    <td>${e.numberOfShares}</td>\n                    <td>${e.sharePrice}</td>\n                    <td>${e.availableCash.toFixed(2)}</td>\n                    <td>${e.totalNumberOfShares}</td>\n                    <td>${(e.availableCash+e.totalNumberOfShares*e.sharePrice).toFixed(2)}</td>\n                </tr>`),s++}));const u=n[n.length-1];t("#summary > tbody").append(`\n            <tr>\n                <td>${a.history.length}</td>\n                <td>${u.date.toISOString()}</td>\n                <td>${a.numberOfShares}</td>\n                <td>${u.close}</td>\n                <td>${a.amountOfMoney.toFixed(2)}</td>\n                <td>${(a.amountOfMoney+a.numberOfShares*u.close).toFixed(2)}</td>\n            </tr>`)})),t("#actionRender").html(Oa.render()),t("#conditionRender").html(Na.render())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,