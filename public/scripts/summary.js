/*! For license information please see summary.js.LICENSE.txt */
(()=>{var t={755:function(t,e){var n;!function(e,n){"use strict";"object"==typeof t.exports?t.exports=e.document?n(e,!0):function(t){if(!t.document)throw new Error("jQuery requires a window with a document");return n(t)}:n(e)}("undefined"!=typeof window?window:this,(function(r,i){"use strict";var o=[],a=Object.getPrototypeOf,s=o.slice,u=o.flat?function(t){return o.flat.call(t)}:function(t){return o.concat.apply([],t)},l=o.push,c=o.indexOf,h={},f=h.toString,p=h.hasOwnProperty,d=p.toString,y=d.call(Object),g={},v=function(t){return"function"==typeof t&&"number"!=typeof t.nodeType&&"function"!=typeof t.item},m=function(t){return null!=t&&t===t.window},x=r.document,w={type:!0,src:!0,nonce:!0,noModule:!0};function b(t,e,n){var r,i,o=(n=n||x).createElement("script");if(o.text=t,e)for(r in w)(i=e[r]||e.getAttribute&&e.getAttribute(r))&&o.setAttribute(r,i);n.head.appendChild(o).parentNode.removeChild(o)}function _(t){return null==t?t+"":"object"==typeof t||"function"==typeof t?h[f.call(t)]||"object":typeof t}var T="3.6.4",A=function(t,e){return new A.fn.init(t,e)};function D(t){var e=!!t&&"length"in t&&t.length,n=_(t);return!v(t)&&!m(t)&&("array"===n||0===e||"number"==typeof e&&e>0&&e-1 in t)}A.fn=A.prototype={jquery:T,constructor:A,length:0,toArray:function(){return s.call(this)},get:function(t){return null==t?s.call(this):t<0?this[t+this.length]:this[t]},pushStack:function(t){var e=A.merge(this.constructor(),t);return e.prevObject=this,e},each:function(t){return A.each(this,t)},map:function(t){return this.pushStack(A.map(this,(function(e,n){return t.call(e,n,e)})))},slice:function(){return this.pushStack(s.apply(this,arguments))},first:function(){return this.eq(0)},last:function(){return this.eq(-1)},even:function(){return this.pushStack(A.grep(this,(function(t,e){return(e+1)%2})))},odd:function(){return this.pushStack(A.grep(this,(function(t,e){return e%2})))},eq:function(t){var e=this.length,n=+t+(t<0?e:0);return this.pushStack(n>=0&&n<e?[this[n]]:[])},end:function(){return this.prevObject||this.constructor()},push:l,sort:o.sort,splice:o.splice},A.extend=A.fn.extend=function(){var t,e,n,r,i,o,a=arguments[0]||{},s=1,u=arguments.length,l=!1;for("boolean"==typeof a&&(l=a,a=arguments[s]||{},s++),"object"==typeof a||v(a)||(a={}),s===u&&(a=this,s--);s<u;s++)if(null!=(t=arguments[s]))for(e in t)r=t[e],"__proto__"!==e&&a!==r&&(l&&r&&(A.isPlainObject(r)||(i=Array.isArray(r)))?(n=a[e],o=i&&!Array.isArray(n)?[]:i||A.isPlainObject(n)?n:{},i=!1,a[e]=A.extend(l,o,r)):void 0!==r&&(a[e]=r));return a},A.extend({expando:"jQuery"+(T+Math.random()).replace(/\D/g,""),isReady:!0,error:function(t){throw new Error(t)},noop:function(){},isPlainObject:function(t){var e,n;return!(!t||"[object Object]"!==f.call(t)||(e=a(t))&&("function"!=typeof(n=p.call(e,"constructor")&&e.constructor)||d.call(n)!==y))},isEmptyObject:function(t){var e;for(e in t)return!1;return!0},globalEval:function(t,e,n){b(t,{nonce:e&&e.nonce},n)},each:function(t,e){var n,r=0;if(D(t))for(n=t.length;r<n&&!1!==e.call(t[r],r,t[r]);r++);else for(r in t)if(!1===e.call(t[r],r,t[r]))break;return t},makeArray:function(t,e){var n=e||[];return null!=t&&(D(Object(t))?A.merge(n,"string"==typeof t?[t]:t):l.call(n,t)),n},inArray:function(t,e,n){return null==e?-1:c.call(e,t,n)},merge:function(t,e){for(var n=+e.length,r=0,i=t.length;r<n;r++)t[i++]=e[r];return t.length=i,t},grep:function(t,e,n){for(var r=[],i=0,o=t.length,a=!n;i<o;i++)!e(t[i],i)!==a&&r.push(t[i]);return r},map:function(t,e,n){var r,i,o=0,a=[];if(D(t))for(r=t.length;o<r;o++)null!=(i=e(t[o],o,n))&&a.push(i);else for(o in t)null!=(i=e(t[o],o,n))&&a.push(i);return u(a)},guid:1,support:g}),"function"==typeof Symbol&&(A.fn[Symbol.iterator]=o[Symbol.iterator]),A.each("Boolean Number String Function Array Date RegExp Object Error Symbol".split(" "),(function(t,e){h["[object "+e+"]"]=e.toLowerCase()}));var S=function(t){var e,n,r,i,o,a,s,u,l,c,h,f,p,d,y,g,v,m,x,w="sizzle"+1*new Date,b=t.document,_=0,T=0,A=ut(),D=ut(),S=ut(),E=ut(),C=function(t,e){return t===e&&(h=!0),0},k={}.hasOwnProperty,M=[],N=M.pop,O=M.push,$=M.push,H=M.slice,L=function(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1},I="checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",j="[\\x20\\t\\r\\n\\f]",P="(?:\\\\[\\da-fA-F]{1,6}"+j+"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",R="\\["+j+"*("+P+")(?:"+j+"*([*^$|!~]?=)"+j+"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|("+P+"))|)"+j+"*\\]",U=":("+P+")(?:\\((('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|((?:\\\\.|[^\\\\()[\\]]|"+R+")*)|.*)\\)|)",q=new RegExp(j+"+","g"),F=new RegExp("^"+j+"+|((?:^|[^\\\\])(?:\\\\.)*)"+j+"+$","g"),Y=new RegExp("^"+j+"*,"+j+"*"),B=new RegExp("^"+j+"*([>+~]|"+j+")"+j+"*"),W=new RegExp(j+"|>"),V=new RegExp(U),X=new RegExp("^"+P+"$"),G={ID:new RegExp("^#("+P+")"),CLASS:new RegExp("^\\.("+P+")"),TAG:new RegExp("^("+P+"|[*])"),ATTR:new RegExp("^"+R),PSEUDO:new RegExp("^"+U),CHILD:new RegExp("^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\("+j+"*(even|odd|(([+-]|)(\\d*)n|)"+j+"*(?:([+-]|)"+j+"*(\\d+)|))"+j+"*\\)|)","i"),bool:new RegExp("^(?:"+I+")$","i"),needsContext:new RegExp("^"+j+"*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\("+j+"*((?:-\\d)?\\d*)"+j+"*\\)|)(?=[^-]|$)","i")},z=/HTML$/i,Q=/^(?:input|select|textarea|button)$/i,Z=/^h\d$/i,J=/^[^{]+\{\s*\[native \w/,K=/^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,tt=/[+~]/,et=new RegExp("\\\\[\\da-fA-F]{1,6}"+j+"?|\\\\([^\\r\\n\\f])","g"),nt=function(t,e){var n="0x"+t.slice(1)-65536;return e||(n<0?String.fromCharCode(n+65536):String.fromCharCode(n>>10|55296,1023&n|56320))},rt=/([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,it=function(t,e){return e?"\0"===t?"ï¿½":t.slice(0,-1)+"\\"+t.charCodeAt(t.length-1).toString(16)+" ":"\\"+t},ot=function(){f()},at=wt((function(t){return!0===t.disabled&&"fieldset"===t.nodeName.toLowerCase()}),{dir:"parentNode",next:"legend"});try{$.apply(M=H.call(b.childNodes),b.childNodes),M[b.childNodes.length].nodeType}catch(t){$={apply:M.length?function(t,e){O.apply(t,H.call(e))}:function(t,e){for(var n=t.length,r=0;t[n++]=e[r++];);t.length=n-1}}}function st(t,e,r,i){var o,s,l,c,h,d,v,m=e&&e.ownerDocument,b=e?e.nodeType:9;if(r=r||[],"string"!=typeof t||!t||1!==b&&9!==b&&11!==b)return r;if(!i&&(f(e),e=e||p,y)){if(11!==b&&(h=K.exec(t)))if(o=h[1]){if(9===b){if(!(l=e.getElementById(o)))return r;if(l.id===o)return r.push(l),r}else if(m&&(l=m.getElementById(o))&&x(e,l)&&l.id===o)return r.push(l),r}else{if(h[2])return $.apply(r,e.getElementsByTagName(t)),r;if((o=h[3])&&n.getElementsByClassName&&e.getElementsByClassName)return $.apply(r,e.getElementsByClassName(o)),r}if(n.qsa&&!E[t+" "]&&(!g||!g.test(t))&&(1!==b||"object"!==e.nodeName.toLowerCase())){if(v=t,m=e,1===b&&(W.test(t)||B.test(t))){for((m=tt.test(t)&&vt(e.parentNode)||e)===e&&n.scope||((c=e.getAttribute("id"))?c=c.replace(rt,it):e.setAttribute("id",c=w)),s=(d=a(t)).length;s--;)d[s]=(c?"#"+c:":scope")+" "+xt(d[s]);v=d.join(",")}try{return $.apply(r,m.querySelectorAll(v)),r}catch(e){E(t,!0)}finally{c===w&&e.removeAttribute("id")}}}return u(t.replace(F,"$1"),e,r,i)}function ut(){var t=[];return function e(n,i){return t.push(n+" ")>r.cacheLength&&delete e[t.shift()],e[n+" "]=i}}function lt(t){return t[w]=!0,t}function ct(t){var e=p.createElement("fieldset");try{return!!t(e)}catch(t){return!1}finally{e.parentNode&&e.parentNode.removeChild(e),e=null}}function ht(t,e){for(var n=t.split("|"),i=n.length;i--;)r.attrHandle[n[i]]=e}function ft(t,e){var n=e&&t,r=n&&1===t.nodeType&&1===e.nodeType&&t.sourceIndex-e.sourceIndex;if(r)return r;if(n)for(;n=n.nextSibling;)if(n===e)return-1;return t?1:-1}function pt(t){return function(e){return"input"===e.nodeName.toLowerCase()&&e.type===t}}function dt(t){return function(e){var n=e.nodeName.toLowerCase();return("input"===n||"button"===n)&&e.type===t}}function yt(t){return function(e){return"form"in e?e.parentNode&&!1===e.disabled?"label"in e?"label"in e.parentNode?e.parentNode.disabled===t:e.disabled===t:e.isDisabled===t||e.isDisabled!==!t&&at(e)===t:e.disabled===t:"label"in e&&e.disabled===t}}function gt(t){return lt((function(e){return e=+e,lt((function(n,r){for(var i,o=t([],n.length,e),a=o.length;a--;)n[i=o[a]]&&(n[i]=!(r[i]=n[i]))}))}))}function vt(t){return t&&void 0!==t.getElementsByTagName&&t}for(e in n=st.support={},o=st.isXML=function(t){var e=t&&t.namespaceURI,n=t&&(t.ownerDocument||t).documentElement;return!z.test(e||n&&n.nodeName||"HTML")},f=st.setDocument=function(t){var e,i,a=t?t.ownerDocument||t:b;return a!=p&&9===a.nodeType&&a.documentElement?(d=(p=a).documentElement,y=!o(p),b!=p&&(i=p.defaultView)&&i.top!==i&&(i.addEventListener?i.addEventListener("unload",ot,!1):i.attachEvent&&i.attachEvent("onunload",ot)),n.scope=ct((function(t){return d.appendChild(t).appendChild(p.createElement("div")),void 0!==t.querySelectorAll&&!t.querySelectorAll(":scope fieldset div").length})),n.cssHas=ct((function(){try{return p.querySelector(":has(*,:jqfake)"),!1}catch(t){return!0}})),n.attributes=ct((function(t){return t.className="i",!t.getAttribute("className")})),n.getElementsByTagName=ct((function(t){return t.appendChild(p.createComment("")),!t.getElementsByTagName("*").length})),n.getElementsByClassName=J.test(p.getElementsByClassName),n.getById=ct((function(t){return d.appendChild(t).id=w,!p.getElementsByName||!p.getElementsByName(w).length})),n.getById?(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){return t.getAttribute("id")===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&y){var n=e.getElementById(t);return n?[n]:[]}}):(r.filter.ID=function(t){var e=t.replace(et,nt);return function(t){var n=void 0!==t.getAttributeNode&&t.getAttributeNode("id");return n&&n.value===e}},r.find.ID=function(t,e){if(void 0!==e.getElementById&&y){var n,r,i,o=e.getElementById(t);if(o){if((n=o.getAttributeNode("id"))&&n.value===t)return[o];for(i=e.getElementsByName(t),r=0;o=i[r++];)if((n=o.getAttributeNode("id"))&&n.value===t)return[o]}return[]}}),r.find.TAG=n.getElementsByTagName?function(t,e){return void 0!==e.getElementsByTagName?e.getElementsByTagName(t):n.qsa?e.querySelectorAll(t):void 0}:function(t,e){var n,r=[],i=0,o=e.getElementsByTagName(t);if("*"===t){for(;n=o[i++];)1===n.nodeType&&r.push(n);return r}return o},r.find.CLASS=n.getElementsByClassName&&function(t,e){if(void 0!==e.getElementsByClassName&&y)return e.getElementsByClassName(t)},v=[],g=[],(n.qsa=J.test(p.querySelectorAll))&&(ct((function(t){var e;d.appendChild(t).innerHTML="<a id='"+w+"'></a><select id='"+w+"-\r\\' msallowcapture=''><option selected=''></option></select>",t.querySelectorAll("[msallowcapture^='']").length&&g.push("[*^$]="+j+"*(?:''|\"\")"),t.querySelectorAll("[selected]").length||g.push("\\["+j+"*(?:value|"+I+")"),t.querySelectorAll("[id~="+w+"-]").length||g.push("~="),(e=p.createElement("input")).setAttribute("name",""),t.appendChild(e),t.querySelectorAll("[name='']").length||g.push("\\["+j+"*name"+j+"*="+j+"*(?:''|\"\")"),t.querySelectorAll(":checked").length||g.push(":checked"),t.querySelectorAll("a#"+w+"+*").length||g.push(".#.+[+~]"),t.querySelectorAll("\\\f"),g.push("[\\r\\n\\f]")})),ct((function(t){t.innerHTML="<a href='' disabled='disabled'></a><select disabled='disabled'><option/></select>";var e=p.createElement("input");e.setAttribute("type","hidden"),t.appendChild(e).setAttribute("name","D"),t.querySelectorAll("[name=d]").length&&g.push("name"+j+"*[*^$|!~]?="),2!==t.querySelectorAll(":enabled").length&&g.push(":enabled",":disabled"),d.appendChild(t).disabled=!0,2!==t.querySelectorAll(":disabled").length&&g.push(":enabled",":disabled"),t.querySelectorAll("*,:x"),g.push(",.*:")}))),(n.matchesSelector=J.test(m=d.matches||d.webkitMatchesSelector||d.mozMatchesSelector||d.oMatchesSelector||d.msMatchesSelector))&&ct((function(t){n.disconnectedMatch=m.call(t,"*"),m.call(t,"[s!='']:x"),v.push("!=",U)})),n.cssHas||g.push(":has"),g=g.length&&new RegExp(g.join("|")),v=v.length&&new RegExp(v.join("|")),e=J.test(d.compareDocumentPosition),x=e||J.test(d.contains)?function(t,e){var n=9===t.nodeType&&t.documentElement||t,r=e&&e.parentNode;return t===r||!(!r||1!==r.nodeType||!(n.contains?n.contains(r):t.compareDocumentPosition&&16&t.compareDocumentPosition(r)))}:function(t,e){if(e)for(;e=e.parentNode;)if(e===t)return!0;return!1},C=e?function(t,e){if(t===e)return h=!0,0;var r=!t.compareDocumentPosition-!e.compareDocumentPosition;return r||(1&(r=(t.ownerDocument||t)==(e.ownerDocument||e)?t.compareDocumentPosition(e):1)||!n.sortDetached&&e.compareDocumentPosition(t)===r?t==p||t.ownerDocument==b&&x(b,t)?-1:e==p||e.ownerDocument==b&&x(b,e)?1:c?L(c,t)-L(c,e):0:4&r?-1:1)}:function(t,e){if(t===e)return h=!0,0;var n,r=0,i=t.parentNode,o=e.parentNode,a=[t],s=[e];if(!i||!o)return t==p?-1:e==p?1:i?-1:o?1:c?L(c,t)-L(c,e):0;if(i===o)return ft(t,e);for(n=t;n=n.parentNode;)a.unshift(n);for(n=e;n=n.parentNode;)s.unshift(n);for(;a[r]===s[r];)r++;return r?ft(a[r],s[r]):a[r]==b?-1:s[r]==b?1:0},p):p},st.matches=function(t,e){return st(t,null,null,e)},st.matchesSelector=function(t,e){if(f(t),n.matchesSelector&&y&&!E[e+" "]&&(!v||!v.test(e))&&(!g||!g.test(e)))try{var r=m.call(t,e);if(r||n.disconnectedMatch||t.document&&11!==t.document.nodeType)return r}catch(t){E(e,!0)}return st(e,p,null,[t]).length>0},st.contains=function(t,e){return(t.ownerDocument||t)!=p&&f(t),x(t,e)},st.attr=function(t,e){(t.ownerDocument||t)!=p&&f(t);var i=r.attrHandle[e.toLowerCase()],o=i&&k.call(r.attrHandle,e.toLowerCase())?i(t,e,!y):void 0;return void 0!==o?o:n.attributes||!y?t.getAttribute(e):(o=t.getAttributeNode(e))&&o.specified?o.value:null},st.escape=function(t){return(t+"").replace(rt,it)},st.error=function(t){throw new Error("Syntax error, unrecognized expression: "+t)},st.uniqueSort=function(t){var e,r=[],i=0,o=0;if(h=!n.detectDuplicates,c=!n.sortStable&&t.slice(0),t.sort(C),h){for(;e=t[o++];)e===t[o]&&(i=r.push(o));for(;i--;)t.splice(r[i],1)}return c=null,t},i=st.getText=function(t){var e,n="",r=0,o=t.nodeType;if(o){if(1===o||9===o||11===o){if("string"==typeof t.textContent)return t.textContent;for(t=t.firstChild;t;t=t.nextSibling)n+=i(t)}else if(3===o||4===o)return t.nodeValue}else for(;e=t[r++];)n+=i(e);return n},r=st.selectors={cacheLength:50,createPseudo:lt,match:G,attrHandle:{},find:{},relative:{">":{dir:"parentNode",first:!0}," ":{dir:"parentNode"},"+":{dir:"previousSibling",first:!0},"~":{dir:"previousSibling"}},preFilter:{ATTR:function(t){return t[1]=t[1].replace(et,nt),t[3]=(t[3]||t[4]||t[5]||"").replace(et,nt),"~="===t[2]&&(t[3]=" "+t[3]+" "),t.slice(0,4)},CHILD:function(t){return t[1]=t[1].toLowerCase(),"nth"===t[1].slice(0,3)?(t[3]||st.error(t[0]),t[4]=+(t[4]?t[5]+(t[6]||1):2*("even"===t[3]||"odd"===t[3])),t[5]=+(t[7]+t[8]||"odd"===t[3])):t[3]&&st.error(t[0]),t},PSEUDO:function(t){var e,n=!t[6]&&t[2];return G.CHILD.test(t[0])?null:(t[3]?t[2]=t[4]||t[5]||"":n&&V.test(n)&&(e=a(n,!0))&&(e=n.indexOf(")",n.length-e)-n.length)&&(t[0]=t[0].slice(0,e),t[2]=n.slice(0,e)),t.slice(0,3))}},filter:{TAG:function(t){var e=t.replace(et,nt).toLowerCase();return"*"===t?function(){return!0}:function(t){return t.nodeName&&t.nodeName.toLowerCase()===e}},CLASS:function(t){var e=A[t+" "];return e||(e=new RegExp("(^|"+j+")"+t+"("+j+"|$)"))&&A(t,(function(t){return e.test("string"==typeof t.className&&t.className||void 0!==t.getAttribute&&t.getAttribute("class")||"")}))},ATTR:function(t,e,n){return function(r){var i=st.attr(r,t);return null==i?"!="===e:!e||(i+="","="===e?i===n:"!="===e?i!==n:"^="===e?n&&0===i.indexOf(n):"*="===e?n&&i.indexOf(n)>-1:"$="===e?n&&i.slice(-n.length)===n:"~="===e?(" "+i.replace(q," ")+" ").indexOf(n)>-1:"|="===e&&(i===n||i.slice(0,n.length+1)===n+"-"))}},CHILD:function(t,e,n,r,i){var o="nth"!==t.slice(0,3),a="last"!==t.slice(-4),s="of-type"===e;return 1===r&&0===i?function(t){return!!t.parentNode}:function(e,n,u){var l,c,h,f,p,d,y=o!==a?"nextSibling":"previousSibling",g=e.parentNode,v=s&&e.nodeName.toLowerCase(),m=!u&&!s,x=!1;if(g){if(o){for(;y;){for(f=e;f=f[y];)if(s?f.nodeName.toLowerCase()===v:1===f.nodeType)return!1;d=y="only"===t&&!d&&"nextSibling"}return!0}if(d=[a?g.firstChild:g.lastChild],a&&m){for(x=(p=(l=(c=(h=(f=g)[w]||(f[w]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]||[])[0]===_&&l[1])&&l[2],f=p&&g.childNodes[p];f=++p&&f&&f[y]||(x=p=0)||d.pop();)if(1===f.nodeType&&++x&&f===e){c[t]=[_,p,x];break}}else if(m&&(x=p=(l=(c=(h=(f=e)[w]||(f[w]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]||[])[0]===_&&l[1]),!1===x)for(;(f=++p&&f&&f[y]||(x=p=0)||d.pop())&&((s?f.nodeName.toLowerCase()!==v:1!==f.nodeType)||!++x||(m&&((c=(h=f[w]||(f[w]={}))[f.uniqueID]||(h[f.uniqueID]={}))[t]=[_,x]),f!==e)););return(x-=i)===r||x%r==0&&x/r>=0}}},PSEUDO:function(t,e){var n,i=r.pseudos[t]||r.setFilters[t.toLowerCase()]||st.error("unsupported pseudo: "+t);return i[w]?i(e):i.length>1?(n=[t,t,"",e],r.setFilters.hasOwnProperty(t.toLowerCase())?lt((function(t,n){for(var r,o=i(t,e),a=o.length;a--;)t[r=L(t,o[a])]=!(n[r]=o[a])})):function(t){return i(t,0,n)}):i}},pseudos:{not:lt((function(t){var e=[],n=[],r=s(t.replace(F,"$1"));return r[w]?lt((function(t,e,n,i){for(var o,a=r(t,null,i,[]),s=t.length;s--;)(o=a[s])&&(t[s]=!(e[s]=o))})):function(t,i,o){return e[0]=t,r(e,null,o,n),e[0]=null,!n.pop()}})),has:lt((function(t){return function(e){return st(t,e).length>0}})),contains:lt((function(t){return t=t.replace(et,nt),function(e){return(e.textContent||i(e)).indexOf(t)>-1}})),lang:lt((function(t){return X.test(t||"")||st.error("unsupported lang: "+t),t=t.replace(et,nt).toLowerCase(),function(e){var n;do{if(n=y?e.lang:e.getAttribute("xml:lang")||e.getAttribute("lang"))return(n=n.toLowerCase())===t||0===n.indexOf(t+"-")}while((e=e.parentNode)&&1===e.nodeType);return!1}})),target:function(e){var n=t.location&&t.location.hash;return n&&n.slice(1)===e.id},root:function(t){return t===d},focus:function(t){return t===p.activeElement&&(!p.hasFocus||p.hasFocus())&&!!(t.type||t.href||~t.tabIndex)},enabled:yt(!1),disabled:yt(!0),checked:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&!!t.checked||"option"===e&&!!t.selected},selected:function(t){return t.parentNode&&t.parentNode.selectedIndex,!0===t.selected},empty:function(t){for(t=t.firstChild;t;t=t.nextSibling)if(t.nodeType<6)return!1;return!0},parent:function(t){return!r.pseudos.empty(t)},header:function(t){return Z.test(t.nodeName)},input:function(t){return Q.test(t.nodeName)},button:function(t){var e=t.nodeName.toLowerCase();return"input"===e&&"button"===t.type||"button"===e},text:function(t){var e;return"input"===t.nodeName.toLowerCase()&&"text"===t.type&&(null==(e=t.getAttribute("type"))||"text"===e.toLowerCase())},first:gt((function(){return[0]})),last:gt((function(t,e){return[e-1]})),eq:gt((function(t,e,n){return[n<0?n+e:n]})),even:gt((function(t,e){for(var n=0;n<e;n+=2)t.push(n);return t})),odd:gt((function(t,e){for(var n=1;n<e;n+=2)t.push(n);return t})),lt:gt((function(t,e,n){for(var r=n<0?n+e:n>e?e:n;--r>=0;)t.push(r);return t})),gt:gt((function(t,e,n){for(var r=n<0?n+e:n;++r<e;)t.push(r);return t}))}},r.pseudos.nth=r.pseudos.eq,{radio:!0,checkbox:!0,file:!0,password:!0,image:!0})r.pseudos[e]=pt(e);for(e in{submit:!0,reset:!0})r.pseudos[e]=dt(e);function mt(){}function xt(t){for(var e=0,n=t.length,r="";e<n;e++)r+=t[e].value;return r}function wt(t,e,n){var r=e.dir,i=e.next,o=i||r,a=n&&"parentNode"===o,s=T++;return e.first?function(e,n,i){for(;e=e[r];)if(1===e.nodeType||a)return t(e,n,i);return!1}:function(e,n,u){var l,c,h,f=[_,s];if(u){for(;e=e[r];)if((1===e.nodeType||a)&&t(e,n,u))return!0}else for(;e=e[r];)if(1===e.nodeType||a)if(c=(h=e[w]||(e[w]={}))[e.uniqueID]||(h[e.uniqueID]={}),i&&i===e.nodeName.toLowerCase())e=e[r]||e;else{if((l=c[o])&&l[0]===_&&l[1]===s)return f[2]=l[2];if(c[o]=f,f[2]=t(e,n,u))return!0}return!1}}function bt(t){return t.length>1?function(e,n,r){for(var i=t.length;i--;)if(!t[i](e,n,r))return!1;return!0}:t[0]}function _t(t,e,n,r,i){for(var o,a=[],s=0,u=t.length,l=null!=e;s<u;s++)(o=t[s])&&(n&&!n(o,r,i)||(a.push(o),l&&e.push(s)));return a}function Tt(t,e,n,r,i,o){return r&&!r[w]&&(r=Tt(r)),i&&!i[w]&&(i=Tt(i,o)),lt((function(o,a,s,u){var l,c,h,f=[],p=[],d=a.length,y=o||function(t,e,n){for(var r=0,i=e.length;r<i;r++)st(t,e[r],n);return n}(e||"*",s.nodeType?[s]:s,[]),g=!t||!o&&e?y:_t(y,f,t,s,u),v=n?i||(o?t:d||r)?[]:a:g;if(n&&n(g,v,s,u),r)for(l=_t(v,p),r(l,[],s,u),c=l.length;c--;)(h=l[c])&&(v[p[c]]=!(g[p[c]]=h));if(o){if(i||t){if(i){for(l=[],c=v.length;c--;)(h=v[c])&&l.push(g[c]=h);i(null,v=[],l,u)}for(c=v.length;c--;)(h=v[c])&&(l=i?L(o,h):f[c])>-1&&(o[l]=!(a[l]=h))}}else v=_t(v===a?v.splice(d,v.length):v),i?i(null,a,v,u):$.apply(a,v)}))}function At(t){for(var e,n,i,o=t.length,a=r.relative[t[0].type],s=a||r.relative[" "],u=a?1:0,c=wt((function(t){return t===e}),s,!0),h=wt((function(t){return L(e,t)>-1}),s,!0),f=[function(t,n,r){var i=!a&&(r||n!==l)||((e=n).nodeType?c(t,n,r):h(t,n,r));return e=null,i}];u<o;u++)if(n=r.relative[t[u].type])f=[wt(bt(f),n)];else{if((n=r.filter[t[u].type].apply(null,t[u].matches))[w]){for(i=++u;i<o&&!r.relative[t[i].type];i++);return Tt(u>1&&bt(f),u>1&&xt(t.slice(0,u-1).concat({value:" "===t[u-2].type?"*":""})).replace(F,"$1"),n,u<i&&At(t.slice(u,i)),i<o&&At(t=t.slice(i)),i<o&&xt(t))}f.push(n)}return bt(f)}return mt.prototype=r.filters=r.pseudos,r.setFilters=new mt,a=st.tokenize=function(t,e){var n,i,o,a,s,u,l,c=D[t+" "];if(c)return e?0:c.slice(0);for(s=t,u=[],l=r.preFilter;s;){for(a in n&&!(i=Y.exec(s))||(i&&(s=s.slice(i[0].length)||s),u.push(o=[])),n=!1,(i=B.exec(s))&&(n=i.shift(),o.push({value:n,type:i[0].replace(F," ")}),s=s.slice(n.length)),r.filter)!(i=G[a].exec(s))||l[a]&&!(i=l[a](i))||(n=i.shift(),o.push({value:n,type:a,matches:i}),s=s.slice(n.length));if(!n)break}return e?s.length:s?st.error(t):D(t,u).slice(0)},s=st.compile=function(t,e){var n,i=[],o=[],s=S[t+" "];if(!s){for(e||(e=a(t)),n=e.length;n--;)(s=At(e[n]))[w]?i.push(s):o.push(s);s=S(t,function(t,e){var n=e.length>0,i=t.length>0,o=function(o,a,s,u,c){var h,d,g,v=0,m="0",x=o&&[],w=[],b=l,T=o||i&&r.find.TAG("*",c),A=_+=null==b?1:Math.random()||.1,D=T.length;for(c&&(l=a==p||a||c);m!==D&&null!=(h=T[m]);m++){if(i&&h){for(d=0,a||h.ownerDocument==p||(f(h),s=!y);g=t[d++];)if(g(h,a||p,s)){u.push(h);break}c&&(_=A)}n&&((h=!g&&h)&&v--,o&&x.push(h))}if(v+=m,n&&m!==v){for(d=0;g=e[d++];)g(x,w,a,s);if(o){if(v>0)for(;m--;)x[m]||w[m]||(w[m]=N.call(u));w=_t(w)}$.apply(u,w),c&&!o&&w.length>0&&v+e.length>1&&st.uniqueSort(u)}return c&&(_=A,l=b),x};return n?lt(o):o}(o,i)),s.selector=t}return s},u=st.select=function(t,e,n,i){var o,u,l,c,h,f="function"==typeof t&&t,p=!i&&a(t=f.selector||t);if(n=n||[],1===p.length){if((u=p[0]=p[0].slice(0)).length>2&&"ID"===(l=u[0]).type&&9===e.nodeType&&y&&r.relative[u[1].type]){if(!(e=(r.find.ID(l.matches[0].replace(et,nt),e)||[])[0]))return n;f&&(e=e.parentNode),t=t.slice(u.shift().value.length)}for(o=G.needsContext.test(t)?0:u.length;o--&&(l=u[o],!r.relative[c=l.type]);)if((h=r.find[c])&&(i=h(l.matches[0].replace(et,nt),tt.test(u[0].type)&&vt(e.parentNode)||e))){if(u.splice(o,1),!(t=i.length&&xt(u)))return $.apply(n,i),n;break}}return(f||s(t,p))(i,e,!y,n,!e||tt.test(t)&&vt(e.parentNode)||e),n},n.sortStable=w.split("").sort(C).join("")===w,n.detectDuplicates=!!h,f(),n.sortDetached=ct((function(t){return 1&t.compareDocumentPosition(p.createElement("fieldset"))})),ct((function(t){return t.innerHTML="<a href='#'></a>","#"===t.firstChild.getAttribute("href")}))||ht("type|href|height|width",(function(t,e,n){if(!n)return t.getAttribute(e,"type"===e.toLowerCase()?1:2)})),n.attributes&&ct((function(t){return t.innerHTML="<input/>",t.firstChild.setAttribute("value",""),""===t.firstChild.getAttribute("value")}))||ht("value",(function(t,e,n){if(!n&&"input"===t.nodeName.toLowerCase())return t.defaultValue})),ct((function(t){return null==t.getAttribute("disabled")}))||ht(I,(function(t,e,n){var r;if(!n)return!0===t[e]?e.toLowerCase():(r=t.getAttributeNode(e))&&r.specified?r.value:null})),st}(r);A.find=S,A.expr=S.selectors,A.expr[":"]=A.expr.pseudos,A.uniqueSort=A.unique=S.uniqueSort,A.text=S.getText,A.isXMLDoc=S.isXML,A.contains=S.contains,A.escapeSelector=S.escape;var E=function(t,e,n){for(var r=[],i=void 0!==n;(t=t[e])&&9!==t.nodeType;)if(1===t.nodeType){if(i&&A(t).is(n))break;r.push(t)}return r},C=function(t,e){for(var n=[];t;t=t.nextSibling)1===t.nodeType&&t!==e&&n.push(t);return n},k=A.expr.match.needsContext;function M(t,e){return t.nodeName&&t.nodeName.toLowerCase()===e.toLowerCase()}var N=/^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i;function O(t,e,n){return v(e)?A.grep(t,(function(t,r){return!!e.call(t,r,t)!==n})):e.nodeType?A.grep(t,(function(t){return t===e!==n})):"string"!=typeof e?A.grep(t,(function(t){return c.call(e,t)>-1!==n})):A.filter(e,t,n)}A.filter=function(t,e,n){var r=e[0];return n&&(t=":not("+t+")"),1===e.length&&1===r.nodeType?A.find.matchesSelector(r,t)?[r]:[]:A.find.matches(t,A.grep(e,(function(t){return 1===t.nodeType})))},A.fn.extend({find:function(t){var e,n,r=this.length,i=this;if("string"!=typeof t)return this.pushStack(A(t).filter((function(){for(e=0;e<r;e++)if(A.contains(i[e],this))return!0})));for(n=this.pushStack([]),e=0;e<r;e++)A.find(t,i[e],n);return r>1?A.uniqueSort(n):n},filter:function(t){return this.pushStack(O(this,t||[],!1))},not:function(t){return this.pushStack(O(this,t||[],!0))},is:function(t){return!!O(this,"string"==typeof t&&k.test(t)?A(t):t||[],!1).length}});var $,H=/^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/;(A.fn.init=function(t,e,n){var r,i;if(!t)return this;if(n=n||$,"string"==typeof t){if(!(r="<"===t[0]&&">"===t[t.length-1]&&t.length>=3?[null,t,null]:H.exec(t))||!r[1]&&e)return!e||e.jquery?(e||n).find(t):this.constructor(e).find(t);if(r[1]){if(e=e instanceof A?e[0]:e,A.merge(this,A.parseHTML(r[1],e&&e.nodeType?e.ownerDocument||e:x,!0)),N.test(r[1])&&A.isPlainObject(e))for(r in e)v(this[r])?this[r](e[r]):this.attr(r,e[r]);return this}return(i=x.getElementById(r[2]))&&(this[0]=i,this.length=1),this}return t.nodeType?(this[0]=t,this.length=1,this):v(t)?void 0!==n.ready?n.ready(t):t(A):A.makeArray(t,this)}).prototype=A.fn,$=A(x);var L=/^(?:parents|prev(?:Until|All))/,I={children:!0,contents:!0,next:!0,prev:!0};function j(t,e){for(;(t=t[e])&&1!==t.nodeType;);return t}A.fn.extend({has:function(t){var e=A(t,this),n=e.length;return this.filter((function(){for(var t=0;t<n;t++)if(A.contains(this,e[t]))return!0}))},closest:function(t,e){var n,r=0,i=this.length,o=[],a="string"!=typeof t&&A(t);if(!k.test(t))for(;r<i;r++)for(n=this[r];n&&n!==e;n=n.parentNode)if(n.nodeType<11&&(a?a.index(n)>-1:1===n.nodeType&&A.find.matchesSelector(n,t))){o.push(n);break}return this.pushStack(o.length>1?A.uniqueSort(o):o)},index:function(t){return t?"string"==typeof t?c.call(A(t),this[0]):c.call(this,t.jquery?t[0]:t):this[0]&&this[0].parentNode?this.first().prevAll().length:-1},add:function(t,e){return this.pushStack(A.uniqueSort(A.merge(this.get(),A(t,e))))},addBack:function(t){return this.add(null==t?this.prevObject:this.prevObject.filter(t))}}),A.each({parent:function(t){var e=t.parentNode;return e&&11!==e.nodeType?e:null},parents:function(t){return E(t,"parentNode")},parentsUntil:function(t,e,n){return E(t,"parentNode",n)},next:function(t){return j(t,"nextSibling")},prev:function(t){return j(t,"previousSibling")},nextAll:function(t){return E(t,"nextSibling")},prevAll:function(t){return E(t,"previousSibling")},nextUntil:function(t,e,n){return E(t,"nextSibling",n)},prevUntil:function(t,e,n){return E(t,"previousSibling",n)},siblings:function(t){return C((t.parentNode||{}).firstChild,t)},children:function(t){return C(t.firstChild)},contents:function(t){return null!=t.contentDocument&&a(t.contentDocument)?t.contentDocument:(M(t,"template")&&(t=t.content||t),A.merge([],t.childNodes))}},(function(t,e){A.fn[t]=function(n,r){var i=A.map(this,e,n);return"Until"!==t.slice(-5)&&(r=n),r&&"string"==typeof r&&(i=A.filter(r,i)),this.length>1&&(I[t]||A.uniqueSort(i),L.test(t)&&i.reverse()),this.pushStack(i)}}));var P=/[^\x20\t\r\n\f]+/g;function R(t){return t}function U(t){throw t}function q(t,e,n,r){var i;try{t&&v(i=t.promise)?i.call(t).done(e).fail(n):t&&v(i=t.then)?i.call(t,e,n):e.apply(void 0,[t].slice(r))}catch(t){n.apply(void 0,[t])}}A.Callbacks=function(t){t="string"==typeof t?function(t){var e={};return A.each(t.match(P)||[],(function(t,n){e[n]=!0})),e}(t):A.extend({},t);var e,n,r,i,o=[],a=[],s=-1,u=function(){for(i=i||t.once,r=e=!0;a.length;s=-1)for(n=a.shift();++s<o.length;)!1===o[s].apply(n[0],n[1])&&t.stopOnFalse&&(s=o.length,n=!1);t.memory||(n=!1),e=!1,i&&(o=n?[]:"")},l={add:function(){return o&&(n&&!e&&(s=o.length-1,a.push(n)),function e(n){A.each(n,(function(n,r){v(r)?t.unique&&l.has(r)||o.push(r):r&&r.length&&"string"!==_(r)&&e(r)}))}(arguments),n&&!e&&u()),this},remove:function(){return A.each(arguments,(function(t,e){for(var n;(n=A.inArray(e,o,n))>-1;)o.splice(n,1),n<=s&&s--})),this},has:function(t){return t?A.inArray(t,o)>-1:o.length>0},empty:function(){return o&&(o=[]),this},disable:function(){return i=a=[],o=n="",this},disabled:function(){return!o},lock:function(){return i=a=[],n||e||(o=n=""),this},locked:function(){return!!i},fireWith:function(t,n){return i||(n=[t,(n=n||[]).slice?n.slice():n],a.push(n),e||u()),this},fire:function(){return l.fireWith(this,arguments),this},fired:function(){return!!r}};return l},A.extend({Deferred:function(t){var e=[["notify","progress",A.Callbacks("memory"),A.Callbacks("memory"),2],["resolve","done",A.Callbacks("once memory"),A.Callbacks("once memory"),0,"resolved"],["reject","fail",A.Callbacks("once memory"),A.Callbacks("once memory"),1,"rejected"]],n="pending",i={state:function(){return n},always:function(){return o.done(arguments).fail(arguments),this},catch:function(t){return i.then(null,t)},pipe:function(){var t=arguments;return A.Deferred((function(n){A.each(e,(function(e,r){var i=v(t[r[4]])&&t[r[4]];o[r[1]]((function(){var t=i&&i.apply(this,arguments);t&&v(t.promise)?t.promise().progress(n.notify).done(n.resolve).fail(n.reject):n[r[0]+"With"](this,i?[t]:arguments)}))})),t=null})).promise()},then:function(t,n,i){var o=0;function a(t,e,n,i){return function(){var s=this,u=arguments,l=function(){var r,l;if(!(t<o)){if((r=n.apply(s,u))===e.promise())throw new TypeError("Thenable self-resolution");l=r&&("object"==typeof r||"function"==typeof r)&&r.then,v(l)?i?l.call(r,a(o,e,R,i),a(o,e,U,i)):(o++,l.call(r,a(o,e,R,i),a(o,e,U,i),a(o,e,R,e.notifyWith))):(n!==R&&(s=void 0,u=[r]),(i||e.resolveWith)(s,u))}},c=i?l:function(){try{l()}catch(r){A.Deferred.exceptionHook&&A.Deferred.exceptionHook(r,c.stackTrace),t+1>=o&&(n!==U&&(s=void 0,u=[r]),e.rejectWith(s,u))}};t?c():(A.Deferred.getStackHook&&(c.stackTrace=A.Deferred.getStackHook()),r.setTimeout(c))}}return A.Deferred((function(r){e[0][3].add(a(0,r,v(i)?i:R,r.notifyWith)),e[1][3].add(a(0,r,v(t)?t:R)),e[2][3].add(a(0,r,v(n)?n:U))})).promise()},promise:function(t){return null!=t?A.extend(t,i):i}},o={};return A.each(e,(function(t,r){var a=r[2],s=r[5];i[r[1]]=a.add,s&&a.add((function(){n=s}),e[3-t][2].disable,e[3-t][3].disable,e[0][2].lock,e[0][3].lock),a.add(r[3].fire),o[r[0]]=function(){return o[r[0]+"With"](this===o?void 0:this,arguments),this},o[r[0]+"With"]=a.fireWith})),i.promise(o),t&&t.call(o,o),o},when:function(t){var e=arguments.length,n=e,r=Array(n),i=s.call(arguments),o=A.Deferred(),a=function(t){return function(n){r[t]=this,i[t]=arguments.length>1?s.call(arguments):n,--e||o.resolveWith(r,i)}};if(e<=1&&(q(t,o.done(a(n)).resolve,o.reject,!e),"pending"===o.state()||v(i[n]&&i[n].then)))return o.then();for(;n--;)q(i[n],a(n),o.reject);return o.promise()}});var F=/^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;A.Deferred.exceptionHook=function(t,e){r.console&&r.console.warn&&t&&F.test(t.name)&&r.console.warn("jQuery.Deferred exception: "+t.message,t.stack,e)},A.readyException=function(t){r.setTimeout((function(){throw t}))};var Y=A.Deferred();function B(){x.removeEventListener("DOMContentLoaded",B),r.removeEventListener("load",B),A.ready()}A.fn.ready=function(t){return Y.then(t).catch((function(t){A.readyException(t)})),this},A.extend({isReady:!1,readyWait:1,ready:function(t){(!0===t?--A.readyWait:A.isReady)||(A.isReady=!0,!0!==t&&--A.readyWait>0||Y.resolveWith(x,[A]))}}),A.ready.then=Y.then,"complete"===x.readyState||"loading"!==x.readyState&&!x.documentElement.doScroll?r.setTimeout(A.ready):(x.addEventListener("DOMContentLoaded",B),r.addEventListener("load",B));var W=function(t,e,n,r,i,o,a){var s=0,u=t.length,l=null==n;if("object"===_(n))for(s in i=!0,n)W(t,e,s,n[s],!0,o,a);else if(void 0!==r&&(i=!0,v(r)||(a=!0),l&&(a?(e.call(t,r),e=null):(l=e,e=function(t,e,n){return l.call(A(t),n)})),e))for(;s<u;s++)e(t[s],n,a?r:r.call(t[s],s,e(t[s],n)));return i?t:l?e.call(t):u?e(t[0],n):o},V=/^-ms-/,X=/-([a-z])/g;function G(t,e){return e.toUpperCase()}function z(t){return t.replace(V,"ms-").replace(X,G)}var Q=function(t){return 1===t.nodeType||9===t.nodeType||!+t.nodeType};function Z(){this.expando=A.expando+Z.uid++}Z.uid=1,Z.prototype={cache:function(t){var e=t[this.expando];return e||(e={},Q(t)&&(t.nodeType?t[this.expando]=e:Object.defineProperty(t,this.expando,{value:e,configurable:!0}))),e},set:function(t,e,n){var r,i=this.cache(t);if("string"==typeof e)i[z(e)]=n;else for(r in e)i[z(r)]=e[r];return i},get:function(t,e){return void 0===e?this.cache(t):t[this.expando]&&t[this.expando][z(e)]},access:function(t,e,n){return void 0===e||e&&"string"==typeof e&&void 0===n?this.get(t,e):(this.set(t,e,n),void 0!==n?n:e)},remove:function(t,e){var n,r=t[this.expando];if(void 0!==r){if(void 0!==e){n=(e=Array.isArray(e)?e.map(z):(e=z(e))in r?[e]:e.match(P)||[]).length;for(;n--;)delete r[e[n]]}(void 0===e||A.isEmptyObject(r))&&(t.nodeType?t[this.expando]=void 0:delete t[this.expando])}},hasData:function(t){var e=t[this.expando];return void 0!==e&&!A.isEmptyObject(e)}};var J=new Z,K=new Z,tt=/^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,et=/[A-Z]/g;function nt(t,e,n){var r;if(void 0===n&&1===t.nodeType)if(r="data-"+e.replace(et,"-$&").toLowerCase(),"string"==typeof(n=t.getAttribute(r))){try{n=function(t){return"true"===t||"false"!==t&&("null"===t?null:t===+t+""?+t:tt.test(t)?JSON.parse(t):t)}(n)}catch(t){}K.set(t,e,n)}else n=void 0;return n}A.extend({hasData:function(t){return K.hasData(t)||J.hasData(t)},data:function(t,e,n){return K.access(t,e,n)},removeData:function(t,e){K.remove(t,e)},_data:function(t,e,n){return J.access(t,e,n)},_removeData:function(t,e){J.remove(t,e)}}),A.fn.extend({data:function(t,e){var n,r,i,o=this[0],a=o&&o.attributes;if(void 0===t){if(this.length&&(i=K.get(o),1===o.nodeType&&!J.get(o,"hasDataAttrs"))){for(n=a.length;n--;)a[n]&&0===(r=a[n].name).indexOf("data-")&&(r=z(r.slice(5)),nt(o,r,i[r]));J.set(o,"hasDataAttrs",!0)}return i}return"object"==typeof t?this.each((function(){K.set(this,t)})):W(this,(function(e){var n;if(o&&void 0===e)return void 0!==(n=K.get(o,t))||void 0!==(n=nt(o,t))?n:void 0;this.each((function(){K.set(this,t,e)}))}),null,e,arguments.length>1,null,!0)},removeData:function(t){return this.each((function(){K.remove(this,t)}))}}),A.extend({queue:function(t,e,n){var r;if(t)return e=(e||"fx")+"queue",r=J.get(t,e),n&&(!r||Array.isArray(n)?r=J.access(t,e,A.makeArray(n)):r.push(n)),r||[]},dequeue:function(t,e){e=e||"fx";var n=A.queue(t,e),r=n.length,i=n.shift(),o=A._queueHooks(t,e);"inprogress"===i&&(i=n.shift(),r--),i&&("fx"===e&&n.unshift("inprogress"),delete o.stop,i.call(t,(function(){A.dequeue(t,e)}),o)),!r&&o&&o.empty.fire()},_queueHooks:function(t,e){var n=e+"queueHooks";return J.get(t,n)||J.access(t,n,{empty:A.Callbacks("once memory").add((function(){J.remove(t,[e+"queue",n])}))})}}),A.fn.extend({queue:function(t,e){var n=2;return"string"!=typeof t&&(e=t,t="fx",n--),arguments.length<n?A.queue(this[0],t):void 0===e?this:this.each((function(){var n=A.queue(this,t,e);A._queueHooks(this,t),"fx"===t&&"inprogress"!==n[0]&&A.dequeue(this,t)}))},dequeue:function(t){return this.each((function(){A.dequeue(this,t)}))},clearQueue:function(t){return this.queue(t||"fx",[])},promise:function(t,e){var n,r=1,i=A.Deferred(),o=this,a=this.length,s=function(){--r||i.resolveWith(o,[o])};for("string"!=typeof t&&(e=t,t=void 0),t=t||"fx";a--;)(n=J.get(o[a],t+"queueHooks"))&&n.empty&&(r++,n.empty.add(s));return s(),i.promise(e)}});var rt=/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/.source,it=new RegExp("^(?:([+-])=|)("+rt+")([a-z%]*)$","i"),ot=["Top","Right","Bottom","Left"],at=x.documentElement,st=function(t){return A.contains(t.ownerDocument,t)},ut={composed:!0};at.getRootNode&&(st=function(t){return A.contains(t.ownerDocument,t)||t.getRootNode(ut)===t.ownerDocument});var lt=function(t,e){return"none"===(t=e||t).style.display||""===t.style.display&&st(t)&&"none"===A.css(t,"display")};function ct(t,e,n,r){var i,o,a=20,s=r?function(){return r.cur()}:function(){return A.css(t,e,"")},u=s(),l=n&&n[3]||(A.cssNumber[e]?"":"px"),c=t.nodeType&&(A.cssNumber[e]||"px"!==l&&+u)&&it.exec(A.css(t,e));if(c&&c[3]!==l){for(u/=2,l=l||c[3],c=+u||1;a--;)A.style(t,e,c+l),(1-o)*(1-(o=s()/u||.5))<=0&&(a=0),c/=o;c*=2,A.style(t,e,c+l),n=n||[]}return n&&(c=+c||+u||0,i=n[1]?c+(n[1]+1)*n[2]:+n[2],r&&(r.unit=l,r.start=c,r.end=i)),i}var ht={};function ft(t){var e,n=t.ownerDocument,r=t.nodeName,i=ht[r];return i||(e=n.body.appendChild(n.createElement(r)),i=A.css(e,"display"),e.parentNode.removeChild(e),"none"===i&&(i="block"),ht[r]=i,i)}function pt(t,e){for(var n,r,i=[],o=0,a=t.length;o<a;o++)(r=t[o]).style&&(n=r.style.display,e?("none"===n&&(i[o]=J.get(r,"display")||null,i[o]||(r.style.display="")),""===r.style.display&&lt(r)&&(i[o]=ft(r))):"none"!==n&&(i[o]="none",J.set(r,"display",n)));for(o=0;o<a;o++)null!=i[o]&&(t[o].style.display=i[o]);return t}A.fn.extend({show:function(){return pt(this,!0)},hide:function(){return pt(this)},toggle:function(t){return"boolean"==typeof t?t?this.show():this.hide():this.each((function(){lt(this)?A(this).show():A(this).hide()}))}});var dt,yt,gt=/^(?:checkbox|radio)$/i,vt=/<([a-z][^\/\0>\x20\t\r\n\f]*)/i,mt=/^$|^module$|\/(?:java|ecma)script/i;dt=x.createDocumentFragment().appendChild(x.createElement("div")),(yt=x.createElement("input")).setAttribute("type","radio"),yt.setAttribute("checked","checked"),yt.setAttribute("name","t"),dt.appendChild(yt),g.checkClone=dt.cloneNode(!0).cloneNode(!0).lastChild.checked,dt.innerHTML="<textarea>x</textarea>",g.noCloneChecked=!!dt.cloneNode(!0).lastChild.defaultValue,dt.innerHTML="<option></option>",g.option=!!dt.lastChild;var xt={thead:[1,"<table>","</table>"],col:[2,"<table><colgroup>","</colgroup></table>"],tr:[2,"<table><tbody>","</tbody></table>"],td:[3,"<table><tbody><tr>","</tr></tbody></table>"],_default:[0,"",""]};function wt(t,e){var n;return n=void 0!==t.getElementsByTagName?t.getElementsByTagName(e||"*"):void 0!==t.querySelectorAll?t.querySelectorAll(e||"*"):[],void 0===e||e&&M(t,e)?A.merge([t],n):n}function bt(t,e){for(var n=0,r=t.length;n<r;n++)J.set(t[n],"globalEval",!e||J.get(e[n],"globalEval"))}xt.tbody=xt.tfoot=xt.colgroup=xt.caption=xt.thead,xt.th=xt.td,g.option||(xt.optgroup=xt.option=[1,"<select multiple='multiple'>","</select>"]);var _t=/<|&#?\w+;/;function Tt(t,e,n,r,i){for(var o,a,s,u,l,c,h=e.createDocumentFragment(),f=[],p=0,d=t.length;p<d;p++)if((o=t[p])||0===o)if("object"===_(o))A.merge(f,o.nodeType?[o]:o);else if(_t.test(o)){for(a=a||h.appendChild(e.createElement("div")),s=(vt.exec(o)||["",""])[1].toLowerCase(),u=xt[s]||xt._default,a.innerHTML=u[1]+A.htmlPrefilter(o)+u[2],c=u[0];c--;)a=a.lastChild;A.merge(f,a.childNodes),(a=h.firstChild).textContent=""}else f.push(e.createTextNode(o));for(h.textContent="",p=0;o=f[p++];)if(r&&A.inArray(o,r)>-1)i&&i.push(o);else if(l=st(o),a=wt(h.appendChild(o),"script"),l&&bt(a),n)for(c=0;o=a[c++];)mt.test(o.type||"")&&n.push(o);return h}var At=/^([^.]*)(?:\.(.+)|)/;function Dt(){return!0}function St(){return!1}function Et(t,e){return t===function(){try{return x.activeElement}catch(t){}}()==("focus"===e)}function Ct(t,e,n,r,i,o){var a,s;if("object"==typeof e){for(s in"string"!=typeof n&&(r=r||n,n=void 0),e)Ct(t,s,n,r,e[s],o);return t}if(null==r&&null==i?(i=n,r=n=void 0):null==i&&("string"==typeof n?(i=r,r=void 0):(i=r,r=n,n=void 0)),!1===i)i=St;else if(!i)return t;return 1===o&&(a=i,i=function(t){return A().off(t),a.apply(this,arguments)},i.guid=a.guid||(a.guid=A.guid++)),t.each((function(){A.event.add(this,e,i,r,n)}))}function kt(t,e,n){n?(J.set(t,e,!1),A.event.add(t,e,{namespace:!1,handler:function(t){var r,i,o=J.get(this,e);if(1&t.isTrigger&&this[e]){if(o.length)(A.event.special[e]||{}).delegateType&&t.stopPropagation();else if(o=s.call(arguments),J.set(this,e,o),r=n(this,e),this[e](),o!==(i=J.get(this,e))||r?J.set(this,e,!1):i={},o!==i)return t.stopImmediatePropagation(),t.preventDefault(),i&&i.value}else o.length&&(J.set(this,e,{value:A.event.trigger(A.extend(o[0],A.Event.prototype),o.slice(1),this)}),t.stopImmediatePropagation())}})):void 0===J.get(t,e)&&A.event.add(t,e,Dt)}A.event={global:{},add:function(t,e,n,r,i){var o,a,s,u,l,c,h,f,p,d,y,g=J.get(t);if(Q(t))for(n.handler&&(n=(o=n).handler,i=o.selector),i&&A.find.matchesSelector(at,i),n.guid||(n.guid=A.guid++),(u=g.events)||(u=g.events=Object.create(null)),(a=g.handle)||(a=g.handle=function(e){return void 0!==A&&A.event.triggered!==e.type?A.event.dispatch.apply(t,arguments):void 0}),l=(e=(e||"").match(P)||[""]).length;l--;)p=y=(s=At.exec(e[l])||[])[1],d=(s[2]||"").split(".").sort(),p&&(h=A.event.special[p]||{},p=(i?h.delegateType:h.bindType)||p,h=A.event.special[p]||{},c=A.extend({type:p,origType:y,data:r,handler:n,guid:n.guid,selector:i,needsContext:i&&A.expr.match.needsContext.test(i),namespace:d.join(".")},o),(f=u[p])||((f=u[p]=[]).delegateCount=0,h.setup&&!1!==h.setup.call(t,r,d,a)||t.addEventListener&&t.addEventListener(p,a)),h.add&&(h.add.call(t,c),c.handler.guid||(c.handler.guid=n.guid)),i?f.splice(f.delegateCount++,0,c):f.push(c),A.event.global[p]=!0)},remove:function(t,e,n,r,i){var o,a,s,u,l,c,h,f,p,d,y,g=J.hasData(t)&&J.get(t);if(g&&(u=g.events)){for(l=(e=(e||"").match(P)||[""]).length;l--;)if(p=y=(s=At.exec(e[l])||[])[1],d=(s[2]||"").split(".").sort(),p){for(h=A.event.special[p]||{},f=u[p=(r?h.delegateType:h.bindType)||p]||[],s=s[2]&&new RegExp("(^|\\.)"+d.join("\\.(?:.*\\.|)")+"(\\.|$)"),a=o=f.length;o--;)c=f[o],!i&&y!==c.origType||n&&n.guid!==c.guid||s&&!s.test(c.namespace)||r&&r!==c.selector&&("**"!==r||!c.selector)||(f.splice(o,1),c.selector&&f.delegateCount--,h.remove&&h.remove.call(t,c));a&&!f.length&&(h.teardown&&!1!==h.teardown.call(t,d,g.handle)||A.removeEvent(t,p,g.handle),delete u[p])}else for(p in u)A.event.remove(t,p+e[l],n,r,!0);A.isEmptyObject(u)&&J.remove(t,"handle events")}},dispatch:function(t){var e,n,r,i,o,a,s=new Array(arguments.length),u=A.event.fix(t),l=(J.get(this,"events")||Object.create(null))[u.type]||[],c=A.event.special[u.type]||{};for(s[0]=u,e=1;e<arguments.length;e++)s[e]=arguments[e];if(u.delegateTarget=this,!c.preDispatch||!1!==c.preDispatch.call(this,u)){for(a=A.event.handlers.call(this,u,l),e=0;(i=a[e++])&&!u.isPropagationStopped();)for(u.currentTarget=i.elem,n=0;(o=i.handlers[n++])&&!u.isImmediatePropagationStopped();)u.rnamespace&&!1!==o.namespace&&!u.rnamespace.test(o.namespace)||(u.handleObj=o,u.data=o.data,void 0!==(r=((A.event.special[o.origType]||{}).handle||o.handler).apply(i.elem,s))&&!1===(u.result=r)&&(u.preventDefault(),u.stopPropagation()));return c.postDispatch&&c.postDispatch.call(this,u),u.result}},handlers:function(t,e){var n,r,i,o,a,s=[],u=e.delegateCount,l=t.target;if(u&&l.nodeType&&!("click"===t.type&&t.button>=1))for(;l!==this;l=l.parentNode||this)if(1===l.nodeType&&("click"!==t.type||!0!==l.disabled)){for(o=[],a={},n=0;n<u;n++)void 0===a[i=(r=e[n]).selector+" "]&&(a[i]=r.needsContext?A(i,this).index(l)>-1:A.find(i,this,null,[l]).length),a[i]&&o.push(r);o.length&&s.push({elem:l,handlers:o})}return l=this,u<e.length&&s.push({elem:l,handlers:e.slice(u)}),s},addProp:function(t,e){Object.defineProperty(A.Event.prototype,t,{enumerable:!0,configurable:!0,get:v(e)?function(){if(this.originalEvent)return e(this.originalEvent)}:function(){if(this.originalEvent)return this.originalEvent[t]},set:function(e){Object.defineProperty(this,t,{enumerable:!0,configurable:!0,writable:!0,value:e})}})},fix:function(t){return t[A.expando]?t:new A.Event(t)},special:{load:{noBubble:!0},click:{setup:function(t){var e=this||t;return gt.test(e.type)&&e.click&&M(e,"input")&&kt(e,"click",Dt),!1},trigger:function(t){var e=this||t;return gt.test(e.type)&&e.click&&M(e,"input")&&kt(e,"click"),!0},_default:function(t){var e=t.target;return gt.test(e.type)&&e.click&&M(e,"input")&&J.get(e,"click")||M(e,"a")}},beforeunload:{postDispatch:function(t){void 0!==t.result&&t.originalEvent&&(t.originalEvent.returnValue=t.result)}}}},A.removeEvent=function(t,e,n){t.removeEventListener&&t.removeEventListener(e,n)},A.Event=function(t,e){if(!(this instanceof A.Event))return new A.Event(t,e);t&&t.type?(this.originalEvent=t,this.type=t.type,this.isDefaultPrevented=t.defaultPrevented||void 0===t.defaultPrevented&&!1===t.returnValue?Dt:St,this.target=t.target&&3===t.target.nodeType?t.target.parentNode:t.target,this.currentTarget=t.currentTarget,this.relatedTarget=t.relatedTarget):this.type=t,e&&A.extend(this,e),this.timeStamp=t&&t.timeStamp||Date.now(),this[A.expando]=!0},A.Event.prototype={constructor:A.Event,isDefaultPrevented:St,isPropagationStopped:St,isImmediatePropagationStopped:St,isSimulated:!1,preventDefault:function(){var t=this.originalEvent;this.isDefaultPrevented=Dt,t&&!this.isSimulated&&t.preventDefault()},stopPropagation:function(){var t=this.originalEvent;this.isPropagationStopped=Dt,t&&!this.isSimulated&&t.stopPropagation()},stopImmediatePropagation:function(){var t=this.originalEvent;this.isImmediatePropagationStopped=Dt,t&&!this.isSimulated&&t.stopImmediatePropagation(),this.stopPropagation()}},A.each({altKey:!0,bubbles:!0,cancelable:!0,changedTouches:!0,ctrlKey:!0,detail:!0,eventPhase:!0,metaKey:!0,pageX:!0,pageY:!0,shiftKey:!0,view:!0,char:!0,code:!0,charCode:!0,key:!0,keyCode:!0,button:!0,buttons:!0,clientX:!0,clientY:!0,offsetX:!0,offsetY:!0,pointerId:!0,pointerType:!0,screenX:!0,screenY:!0,targetTouches:!0,toElement:!0,touches:!0,which:!0},A.event.addProp),A.each({focus:"focusin",blur:"focusout"},(function(t,e){A.event.special[t]={setup:function(){return kt(this,t,Et),!1},trigger:function(){return kt(this,t),!0},_default:function(e){return J.get(e.target,t)},delegateType:e}})),A.each({mouseenter:"mouseover",mouseleave:"mouseout",pointerenter:"pointerover",pointerleave:"pointerout"},(function(t,e){A.event.special[t]={delegateType:e,bindType:e,handle:function(t){var n,r=t.relatedTarget,i=t.handleObj;return r&&(r===this||A.contains(this,r))||(t.type=i.origType,n=i.handler.apply(this,arguments),t.type=e),n}}})),A.fn.extend({on:function(t,e,n,r){return Ct(this,t,e,n,r)},one:function(t,e,n,r){return Ct(this,t,e,n,r,1)},off:function(t,e,n){var r,i;if(t&&t.preventDefault&&t.handleObj)return r=t.handleObj,A(t.delegateTarget).off(r.namespace?r.origType+"."+r.namespace:r.origType,r.selector,r.handler),this;if("object"==typeof t){for(i in t)this.off(i,e,t[i]);return this}return!1!==e&&"function"!=typeof e||(n=e,e=void 0),!1===n&&(n=St),this.each((function(){A.event.remove(this,t,n,e)}))}});var Mt=/<script|<style|<link/i,Nt=/checked\s*(?:[^=]|=\s*.checked.)/i,Ot=/^\s*<!\[CDATA\[|\]\]>\s*$/g;function $t(t,e){return M(t,"table")&&M(11!==e.nodeType?e:e.firstChild,"tr")&&A(t).children("tbody")[0]||t}function Ht(t){return t.type=(null!==t.getAttribute("type"))+"/"+t.type,t}function Lt(t){return"true/"===(t.type||"").slice(0,5)?t.type=t.type.slice(5):t.removeAttribute("type"),t}function It(t,e){var n,r,i,o,a,s;if(1===e.nodeType){if(J.hasData(t)&&(s=J.get(t).events))for(i in J.remove(e,"handle events"),s)for(n=0,r=s[i].length;n<r;n++)A.event.add(e,i,s[i][n]);K.hasData(t)&&(o=K.access(t),a=A.extend({},o),K.set(e,a))}}function jt(t,e){var n=e.nodeName.toLowerCase();"input"===n&&gt.test(t.type)?e.checked=t.checked:"input"!==n&&"textarea"!==n||(e.defaultValue=t.defaultValue)}function Pt(t,e,n,r){e=u(e);var i,o,a,s,l,c,h=0,f=t.length,p=f-1,d=e[0],y=v(d);if(y||f>1&&"string"==typeof d&&!g.checkClone&&Nt.test(d))return t.each((function(i){var o=t.eq(i);y&&(e[0]=d.call(this,i,o.html())),Pt(o,e,n,r)}));if(f&&(o=(i=Tt(e,t[0].ownerDocument,!1,t,r)).firstChild,1===i.childNodes.length&&(i=o),o||r)){for(s=(a=A.map(wt(i,"script"),Ht)).length;h<f;h++)l=i,h!==p&&(l=A.clone(l,!0,!0),s&&A.merge(a,wt(l,"script"))),n.call(t[h],l,h);if(s)for(c=a[a.length-1].ownerDocument,A.map(a,Lt),h=0;h<s;h++)l=a[h],mt.test(l.type||"")&&!J.access(l,"globalEval")&&A.contains(c,l)&&(l.src&&"module"!==(l.type||"").toLowerCase()?A._evalUrl&&!l.noModule&&A._evalUrl(l.src,{nonce:l.nonce||l.getAttribute("nonce")},c):b(l.textContent.replace(Ot,""),l,c))}return t}function Rt(t,e,n){for(var r,i=e?A.filter(e,t):t,o=0;null!=(r=i[o]);o++)n||1!==r.nodeType||A.cleanData(wt(r)),r.parentNode&&(n&&st(r)&&bt(wt(r,"script")),r.parentNode.removeChild(r));return t}A.extend({htmlPrefilter:function(t){return t},clone:function(t,e,n){var r,i,o,a,s=t.cloneNode(!0),u=st(t);if(!(g.noCloneChecked||1!==t.nodeType&&11!==t.nodeType||A.isXMLDoc(t)))for(a=wt(s),r=0,i=(o=wt(t)).length;r<i;r++)jt(o[r],a[r]);if(e)if(n)for(o=o||wt(t),a=a||wt(s),r=0,i=o.length;r<i;r++)It(o[r],a[r]);else It(t,s);return(a=wt(s,"script")).length>0&&bt(a,!u&&wt(t,"script")),s},cleanData:function(t){for(var e,n,r,i=A.event.special,o=0;void 0!==(n=t[o]);o++)if(Q(n)){if(e=n[J.expando]){if(e.events)for(r in e.events)i[r]?A.event.remove(n,r):A.removeEvent(n,r,e.handle);n[J.expando]=void 0}n[K.expando]&&(n[K.expando]=void 0)}}}),A.fn.extend({detach:function(t){return Rt(this,t,!0)},remove:function(t){return Rt(this,t)},text:function(t){return W(this,(function(t){return void 0===t?A.text(this):this.empty().each((function(){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||(this.textContent=t)}))}),null,t,arguments.length)},append:function(){return Pt(this,arguments,(function(t){1!==this.nodeType&&11!==this.nodeType&&9!==this.nodeType||$t(this,t).appendChild(t)}))},prepend:function(){return Pt(this,arguments,(function(t){if(1===this.nodeType||11===this.nodeType||9===this.nodeType){var e=$t(this,t);e.insertBefore(t,e.firstChild)}}))},before:function(){return Pt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this)}))},after:function(){return Pt(this,arguments,(function(t){this.parentNode&&this.parentNode.insertBefore(t,this.nextSibling)}))},empty:function(){for(var t,e=0;null!=(t=this[e]);e++)1===t.nodeType&&(A.cleanData(wt(t,!1)),t.textContent="");return this},clone:function(t,e){return t=null!=t&&t,e=null==e?t:e,this.map((function(){return A.clone(this,t,e)}))},html:function(t){return W(this,(function(t){var e=this[0]||{},n=0,r=this.length;if(void 0===t&&1===e.nodeType)return e.innerHTML;if("string"==typeof t&&!Mt.test(t)&&!xt[(vt.exec(t)||["",""])[1].toLowerCase()]){t=A.htmlPrefilter(t);try{for(;n<r;n++)1===(e=this[n]||{}).nodeType&&(A.cleanData(wt(e,!1)),e.innerHTML=t);e=0}catch(t){}}e&&this.empty().append(t)}),null,t,arguments.length)},replaceWith:function(){var t=[];return Pt(this,arguments,(function(e){var n=this.parentNode;A.inArray(this,t)<0&&(A.cleanData(wt(this)),n&&n.replaceChild(e,this))}),t)}}),A.each({appendTo:"append",prependTo:"prepend",insertBefore:"before",insertAfter:"after",replaceAll:"replaceWith"},(function(t,e){A.fn[t]=function(t){for(var n,r=[],i=A(t),o=i.length-1,a=0;a<=o;a++)n=a===o?this:this.clone(!0),A(i[a])[e](n),l.apply(r,n.get());return this.pushStack(r)}}));var Ut=new RegExp("^("+rt+")(?!px)[a-z%]+$","i"),qt=/^--/,Ft=function(t){var e=t.ownerDocument.defaultView;return e&&e.opener||(e=r),e.getComputedStyle(t)},Yt=function(t,e,n){var r,i,o={};for(i in e)o[i]=t.style[i],t.style[i]=e[i];for(i in r=n.call(t),e)t.style[i]=o[i];return r},Bt=new RegExp(ot.join("|"),"i"),Wt="[\\x20\\t\\r\\n\\f]",Vt=new RegExp("^"+Wt+"+|((?:^|[^\\\\])(?:\\\\.)*)"+Wt+"+$","g");function Xt(t,e,n){var r,i,o,a,s=qt.test(e),u=t.style;return(n=n||Ft(t))&&(a=n.getPropertyValue(e)||n[e],s&&a&&(a=a.replace(Vt,"$1")||void 0),""!==a||st(t)||(a=A.style(t,e)),!g.pixelBoxStyles()&&Ut.test(a)&&Bt.test(e)&&(r=u.width,i=u.minWidth,o=u.maxWidth,u.minWidth=u.maxWidth=u.width=a,a=n.width,u.width=r,u.minWidth=i,u.maxWidth=o)),void 0!==a?a+"":a}function Gt(t,e){return{get:function(){if(!t())return(this.get=e).apply(this,arguments);delete this.get}}}!function(){function t(){if(c){l.style.cssText="position:absolute;left:-11111px;width:60px;margin-top:1px;padding:0;border:0",c.style.cssText="position:relative;display:block;box-sizing:border-box;overflow:scroll;margin:auto;border:1px;padding:1px;width:60%;top:1%",at.appendChild(l).appendChild(c);var t=r.getComputedStyle(c);n="1%"!==t.top,u=12===e(t.marginLeft),c.style.right="60%",a=36===e(t.right),i=36===e(t.width),c.style.position="absolute",o=12===e(c.offsetWidth/3),at.removeChild(l),c=null}}function e(t){return Math.round(parseFloat(t))}var n,i,o,a,s,u,l=x.createElement("div"),c=x.createElement("div");c.style&&(c.style.backgroundClip="content-box",c.cloneNode(!0).style.backgroundClip="",g.clearCloneStyle="content-box"===c.style.backgroundClip,A.extend(g,{boxSizingReliable:function(){return t(),i},pixelBoxStyles:function(){return t(),a},pixelPosition:function(){return t(),n},reliableMarginLeft:function(){return t(),u},scrollboxSize:function(){return t(),o},reliableTrDimensions:function(){var t,e,n,i;return null==s&&(t=x.createElement("table"),e=x.createElement("tr"),n=x.createElement("div"),t.style.cssText="position:absolute;left:-11111px;border-collapse:separate",e.style.cssText="border:1px solid",e.style.height="1px",n.style.height="9px",n.style.display="block",at.appendChild(t).appendChild(e).appendChild(n),i=r.getComputedStyle(e),s=parseInt(i.height,10)+parseInt(i.borderTopWidth,10)+parseInt(i.borderBottomWidth,10)===e.offsetHeight,at.removeChild(t)),s}}))}();var zt=["Webkit","Moz","ms"],Qt=x.createElement("div").style,Zt={};function Jt(t){return A.cssProps[t]||Zt[t]||(t in Qt?t:Zt[t]=function(t){for(var e=t[0].toUpperCase()+t.slice(1),n=zt.length;n--;)if((t=zt[n]+e)in Qt)return t}(t)||t)}var Kt=/^(none|table(?!-c[ea]).+)/,te={position:"absolute",visibility:"hidden",display:"block"},ee={letterSpacing:"0",fontWeight:"400"};function ne(t,e,n){var r=it.exec(e);return r?Math.max(0,r[2]-(n||0))+(r[3]||"px"):e}function re(t,e,n,r,i,o){var a="width"===e?1:0,s=0,u=0;if(n===(r?"border":"content"))return 0;for(;a<4;a+=2)"margin"===n&&(u+=A.css(t,n+ot[a],!0,i)),r?("content"===n&&(u-=A.css(t,"padding"+ot[a],!0,i)),"margin"!==n&&(u-=A.css(t,"border"+ot[a]+"Width",!0,i))):(u+=A.css(t,"padding"+ot[a],!0,i),"padding"!==n?u+=A.css(t,"border"+ot[a]+"Width",!0,i):s+=A.css(t,"border"+ot[a]+"Width",!0,i));return!r&&o>=0&&(u+=Math.max(0,Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-o-u-s-.5))||0),u}function ie(t,e,n){var r=Ft(t),i=(!g.boxSizingReliable()||n)&&"border-box"===A.css(t,"boxSizing",!1,r),o=i,a=Xt(t,e,r),s="offset"+e[0].toUpperCase()+e.slice(1);if(Ut.test(a)){if(!n)return a;a="auto"}return(!g.boxSizingReliable()&&i||!g.reliableTrDimensions()&&M(t,"tr")||"auto"===a||!parseFloat(a)&&"inline"===A.css(t,"display",!1,r))&&t.getClientRects().length&&(i="border-box"===A.css(t,"boxSizing",!1,r),(o=s in t)&&(a=t[s])),(a=parseFloat(a)||0)+re(t,e,n||(i?"border":"content"),o,r,a)+"px"}function oe(t,e,n,r,i){return new oe.prototype.init(t,e,n,r,i)}A.extend({cssHooks:{opacity:{get:function(t,e){if(e){var n=Xt(t,"opacity");return""===n?"1":n}}}},cssNumber:{animationIterationCount:!0,columnCount:!0,fillOpacity:!0,flexGrow:!0,flexShrink:!0,fontWeight:!0,gridArea:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnStart:!0,gridRow:!0,gridRowEnd:!0,gridRowStart:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,widows:!0,zIndex:!0,zoom:!0},cssProps:{},style:function(t,e,n,r){if(t&&3!==t.nodeType&&8!==t.nodeType&&t.style){var i,o,a,s=z(e),u=qt.test(e),l=t.style;if(u||(e=Jt(s)),a=A.cssHooks[e]||A.cssHooks[s],void 0===n)return a&&"get"in a&&void 0!==(i=a.get(t,!1,r))?i:l[e];"string"==(o=typeof n)&&(i=it.exec(n))&&i[1]&&(n=ct(t,e,i),o="number"),null!=n&&n==n&&("number"!==o||u||(n+=i&&i[3]||(A.cssNumber[s]?"":"px")),g.clearCloneStyle||""!==n||0!==e.indexOf("background")||(l[e]="inherit"),a&&"set"in a&&void 0===(n=a.set(t,n,r))||(u?l.setProperty(e,n):l[e]=n))}},css:function(t,e,n,r){var i,o,a,s=z(e);return qt.test(e)||(e=Jt(s)),(a=A.cssHooks[e]||A.cssHooks[s])&&"get"in a&&(i=a.get(t,!0,n)),void 0===i&&(i=Xt(t,e,r)),"normal"===i&&e in ee&&(i=ee[e]),""===n||n?(o=parseFloat(i),!0===n||isFinite(o)?o||0:i):i}}),A.each(["height","width"],(function(t,e){A.cssHooks[e]={get:function(t,n,r){if(n)return!Kt.test(A.css(t,"display"))||t.getClientRects().length&&t.getBoundingClientRect().width?ie(t,e,r):Yt(t,te,(function(){return ie(t,e,r)}))},set:function(t,n,r){var i,o=Ft(t),a=!g.scrollboxSize()&&"absolute"===o.position,s=(a||r)&&"border-box"===A.css(t,"boxSizing",!1,o),u=r?re(t,e,r,s,o):0;return s&&a&&(u-=Math.ceil(t["offset"+e[0].toUpperCase()+e.slice(1)]-parseFloat(o[e])-re(t,e,"border",!1,o)-.5)),u&&(i=it.exec(n))&&"px"!==(i[3]||"px")&&(t.style[e]=n,n=A.css(t,e)),ne(0,n,u)}}})),A.cssHooks.marginLeft=Gt(g.reliableMarginLeft,(function(t,e){if(e)return(parseFloat(Xt(t,"marginLeft"))||t.getBoundingClientRect().left-Yt(t,{marginLeft:0},(function(){return t.getBoundingClientRect().left})))+"px"})),A.each({margin:"",padding:"",border:"Width"},(function(t,e){A.cssHooks[t+e]={expand:function(n){for(var r=0,i={},o="string"==typeof n?n.split(" "):[n];r<4;r++)i[t+ot[r]+e]=o[r]||o[r-2]||o[0];return i}},"margin"!==t&&(A.cssHooks[t+e].set=ne)})),A.fn.extend({css:function(t,e){return W(this,(function(t,e,n){var r,i,o={},a=0;if(Array.isArray(e)){for(r=Ft(t),i=e.length;a<i;a++)o[e[a]]=A.css(t,e[a],!1,r);return o}return void 0!==n?A.style(t,e,n):A.css(t,e)}),t,e,arguments.length>1)}}),A.Tween=oe,oe.prototype={constructor:oe,init:function(t,e,n,r,i,o){this.elem=t,this.prop=n,this.easing=i||A.easing._default,this.options=e,this.start=this.now=this.cur(),this.end=r,this.unit=o||(A.cssNumber[n]?"":"px")},cur:function(){var t=oe.propHooks[this.prop];return t&&t.get?t.get(this):oe.propHooks._default.get(this)},run:function(t){var e,n=oe.propHooks[this.prop];return this.options.duration?this.pos=e=A.easing[this.easing](t,this.options.duration*t,0,1,this.options.duration):this.pos=e=t,this.now=(this.end-this.start)*e+this.start,this.options.step&&this.options.step.call(this.elem,this.now,this),n&&n.set?n.set(this):oe.propHooks._default.set(this),this}},oe.prototype.init.prototype=oe.prototype,oe.propHooks={_default:{get:function(t){var e;return 1!==t.elem.nodeType||null!=t.elem[t.prop]&&null==t.elem.style[t.prop]?t.elem[t.prop]:(e=A.css(t.elem,t.prop,""))&&"auto"!==e?e:0},set:function(t){A.fx.step[t.prop]?A.fx.step[t.prop](t):1!==t.elem.nodeType||!A.cssHooks[t.prop]&&null==t.elem.style[Jt(t.prop)]?t.elem[t.prop]=t.now:A.style(t.elem,t.prop,t.now+t.unit)}}},oe.propHooks.scrollTop=oe.propHooks.scrollLeft={set:function(t){t.elem.nodeType&&t.elem.parentNode&&(t.elem[t.prop]=t.now)}},A.easing={linear:function(t){return t},swing:function(t){return.5-Math.cos(t*Math.PI)/2},_default:"swing"},A.fx=oe.prototype.init,A.fx.step={};var ae,se,ue=/^(?:toggle|show|hide)$/,le=/queueHooks$/;function ce(){se&&(!1===x.hidden&&r.requestAnimationFrame?r.requestAnimationFrame(ce):r.setTimeout(ce,A.fx.interval),A.fx.tick())}function he(){return r.setTimeout((function(){ae=void 0})),ae=Date.now()}function fe(t,e){var n,r=0,i={height:t};for(e=e?1:0;r<4;r+=2-e)i["margin"+(n=ot[r])]=i["padding"+n]=t;return e&&(i.opacity=i.width=t),i}function pe(t,e,n){for(var r,i=(de.tweeners[e]||[]).concat(de.tweeners["*"]),o=0,a=i.length;o<a;o++)if(r=i[o].call(n,e,t))return r}function de(t,e,n){var r,i,o=0,a=de.prefilters.length,s=A.Deferred().always((function(){delete u.elem})),u=function(){if(i)return!1;for(var e=ae||he(),n=Math.max(0,l.startTime+l.duration-e),r=1-(n/l.duration||0),o=0,a=l.tweens.length;o<a;o++)l.tweens[o].run(r);return s.notifyWith(t,[l,r,n]),r<1&&a?n:(a||s.notifyWith(t,[l,1,0]),s.resolveWith(t,[l]),!1)},l=s.promise({elem:t,props:A.extend({},e),opts:A.extend(!0,{specialEasing:{},easing:A.easing._default},n),originalProperties:e,originalOptions:n,startTime:ae||he(),duration:n.duration,tweens:[],createTween:function(e,n){var r=A.Tween(t,l.opts,e,n,l.opts.specialEasing[e]||l.opts.easing);return l.tweens.push(r),r},stop:function(e){var n=0,r=e?l.tweens.length:0;if(i)return this;for(i=!0;n<r;n++)l.tweens[n].run(1);return e?(s.notifyWith(t,[l,1,0]),s.resolveWith(t,[l,e])):s.rejectWith(t,[l,e]),this}}),c=l.props;for(function(t,e){var n,r,i,o,a;for(n in t)if(i=e[r=z(n)],o=t[n],Array.isArray(o)&&(i=o[1],o=t[n]=o[0]),n!==r&&(t[r]=o,delete t[n]),(a=A.cssHooks[r])&&"expand"in a)for(n in o=a.expand(o),delete t[r],o)n in t||(t[n]=o[n],e[n]=i);else e[r]=i}(c,l.opts.specialEasing);o<a;o++)if(r=de.prefilters[o].call(l,t,c,l.opts))return v(r.stop)&&(A._queueHooks(l.elem,l.opts.queue).stop=r.stop.bind(r)),r;return A.map(c,pe,l),v(l.opts.start)&&l.opts.start.call(t,l),l.progress(l.opts.progress).done(l.opts.done,l.opts.complete).fail(l.opts.fail).always(l.opts.always),A.fx.timer(A.extend(u,{elem:t,anim:l,queue:l.opts.queue})),l}A.Animation=A.extend(de,{tweeners:{"*":[function(t,e){var n=this.createTween(t,e);return ct(n.elem,t,it.exec(e),n),n}]},tweener:function(t,e){v(t)?(e=t,t=["*"]):t=t.match(P);for(var n,r=0,i=t.length;r<i;r++)n=t[r],de.tweeners[n]=de.tweeners[n]||[],de.tweeners[n].unshift(e)},prefilters:[function(t,e,n){var r,i,o,a,s,u,l,c,h="width"in e||"height"in e,f=this,p={},d=t.style,y=t.nodeType&&lt(t),g=J.get(t,"fxshow");for(r in n.queue||(null==(a=A._queueHooks(t,"fx")).unqueued&&(a.unqueued=0,s=a.empty.fire,a.empty.fire=function(){a.unqueued||s()}),a.unqueued++,f.always((function(){f.always((function(){a.unqueued--,A.queue(t,"fx").length||a.empty.fire()}))}))),e)if(i=e[r],ue.test(i)){if(delete e[r],o=o||"toggle"===i,i===(y?"hide":"show")){if("show"!==i||!g||void 0===g[r])continue;y=!0}p[r]=g&&g[r]||A.style(t,r)}if((u=!A.isEmptyObject(e))||!A.isEmptyObject(p))for(r in h&&1===t.nodeType&&(n.overflow=[d.overflow,d.overflowX,d.overflowY],null==(l=g&&g.display)&&(l=J.get(t,"display")),"none"===(c=A.css(t,"display"))&&(l?c=l:(pt([t],!0),l=t.style.display||l,c=A.css(t,"display"),pt([t]))),("inline"===c||"inline-block"===c&&null!=l)&&"none"===A.css(t,"float")&&(u||(f.done((function(){d.display=l})),null==l&&(c=d.display,l="none"===c?"":c)),d.display="inline-block")),n.overflow&&(d.overflow="hidden",f.always((function(){d.overflow=n.overflow[0],d.overflowX=n.overflow[1],d.overflowY=n.overflow[2]}))),u=!1,p)u||(g?"hidden"in g&&(y=g.hidden):g=J.access(t,"fxshow",{display:l}),o&&(g.hidden=!y),y&&pt([t],!0),f.done((function(){for(r in y||pt([t]),J.remove(t,"fxshow"),p)A.style(t,r,p[r])}))),u=pe(y?g[r]:0,r,f),r in g||(g[r]=u.start,y&&(u.end=u.start,u.start=0))}],prefilter:function(t,e){e?de.prefilters.unshift(t):de.prefilters.push(t)}}),A.speed=function(t,e,n){var r=t&&"object"==typeof t?A.extend({},t):{complete:n||!n&&e||v(t)&&t,duration:t,easing:n&&e||e&&!v(e)&&e};return A.fx.off?r.duration=0:"number"!=typeof r.duration&&(r.duration in A.fx.speeds?r.duration=A.fx.speeds[r.duration]:r.duration=A.fx.speeds._default),null!=r.queue&&!0!==r.queue||(r.queue="fx"),r.old=r.complete,r.complete=function(){v(r.old)&&r.old.call(this),r.queue&&A.dequeue(this,r.queue)},r},A.fn.extend({fadeTo:function(t,e,n,r){return this.filter(lt).css("opacity",0).show().end().animate({opacity:e},t,n,r)},animate:function(t,e,n,r){var i=A.isEmptyObject(t),o=A.speed(e,n,r),a=function(){var e=de(this,A.extend({},t),o);(i||J.get(this,"finish"))&&e.stop(!0)};return a.finish=a,i||!1===o.queue?this.each(a):this.queue(o.queue,a)},stop:function(t,e,n){var r=function(t){var e=t.stop;delete t.stop,e(n)};return"string"!=typeof t&&(n=e,e=t,t=void 0),e&&this.queue(t||"fx",[]),this.each((function(){var e=!0,i=null!=t&&t+"queueHooks",o=A.timers,a=J.get(this);if(i)a[i]&&a[i].stop&&r(a[i]);else for(i in a)a[i]&&a[i].stop&&le.test(i)&&r(a[i]);for(i=o.length;i--;)o[i].elem!==this||null!=t&&o[i].queue!==t||(o[i].anim.stop(n),e=!1,o.splice(i,1));!e&&n||A.dequeue(this,t)}))},finish:function(t){return!1!==t&&(t=t||"fx"),this.each((function(){var e,n=J.get(this),r=n[t+"queue"],i=n[t+"queueHooks"],o=A.timers,a=r?r.length:0;for(n.finish=!0,A.queue(this,t,[]),i&&i.stop&&i.stop.call(this,!0),e=o.length;e--;)o[e].elem===this&&o[e].queue===t&&(o[e].anim.stop(!0),o.splice(e,1));for(e=0;e<a;e++)r[e]&&r[e].finish&&r[e].finish.call(this);delete n.finish}))}}),A.each(["toggle","show","hide"],(function(t,e){var n=A.fn[e];A.fn[e]=function(t,r,i){return null==t||"boolean"==typeof t?n.apply(this,arguments):this.animate(fe(e,!0),t,r,i)}})),A.each({slideDown:fe("show"),slideUp:fe("hide"),slideToggle:fe("toggle"),fadeIn:{opacity:"show"},fadeOut:{opacity:"hide"},fadeToggle:{opacity:"toggle"}},(function(t,e){A.fn[t]=function(t,n,r){return this.animate(e,t,n,r)}})),A.timers=[],A.fx.tick=function(){var t,e=0,n=A.timers;for(ae=Date.now();e<n.length;e++)(t=n[e])()||n[e]!==t||n.splice(e--,1);n.length||A.fx.stop(),ae=void 0},A.fx.timer=function(t){A.timers.push(t),A.fx.start()},A.fx.interval=13,A.fx.start=function(){se||(se=!0,ce())},A.fx.stop=function(){se=null},A.fx.speeds={slow:600,fast:200,_default:400},A.fn.delay=function(t,e){return t=A.fx&&A.fx.speeds[t]||t,e=e||"fx",this.queue(e,(function(e,n){var i=r.setTimeout(e,t);n.stop=function(){r.clearTimeout(i)}}))},function(){var t=x.createElement("input"),e=x.createElement("select").appendChild(x.createElement("option"));t.type="checkbox",g.checkOn=""!==t.value,g.optSelected=e.selected,(t=x.createElement("input")).value="t",t.type="radio",g.radioValue="t"===t.value}();var ye,ge=A.expr.attrHandle;A.fn.extend({attr:function(t,e){return W(this,A.attr,t,e,arguments.length>1)},removeAttr:function(t){return this.each((function(){A.removeAttr(this,t)}))}}),A.extend({attr:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return void 0===t.getAttribute?A.prop(t,e,n):(1===o&&A.isXMLDoc(t)||(i=A.attrHooks[e.toLowerCase()]||(A.expr.match.bool.test(e)?ye:void 0)),void 0!==n?null===n?void A.removeAttr(t,e):i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:(t.setAttribute(e,n+""),n):i&&"get"in i&&null!==(r=i.get(t,e))?r:null==(r=A.find.attr(t,e))?void 0:r)},attrHooks:{type:{set:function(t,e){if(!g.radioValue&&"radio"===e&&M(t,"input")){var n=t.value;return t.setAttribute("type",e),n&&(t.value=n),e}}}},removeAttr:function(t,e){var n,r=0,i=e&&e.match(P);if(i&&1===t.nodeType)for(;n=i[r++];)t.removeAttribute(n)}}),ye={set:function(t,e,n){return!1===e?A.removeAttr(t,n):t.setAttribute(n,n),n}},A.each(A.expr.match.bool.source.match(/\w+/g),(function(t,e){var n=ge[e]||A.find.attr;ge[e]=function(t,e,r){var i,o,a=e.toLowerCase();return r||(o=ge[a],ge[a]=i,i=null!=n(t,e,r)?a:null,ge[a]=o),i}}));var ve=/^(?:input|select|textarea|button)$/i,me=/^(?:a|area)$/i;function xe(t){return(t.match(P)||[]).join(" ")}function we(t){return t.getAttribute&&t.getAttribute("class")||""}function be(t){return Array.isArray(t)?t:"string"==typeof t&&t.match(P)||[]}A.fn.extend({prop:function(t,e){return W(this,A.prop,t,e,arguments.length>1)},removeProp:function(t){return this.each((function(){delete this[A.propFix[t]||t]}))}}),A.extend({prop:function(t,e,n){var r,i,o=t.nodeType;if(3!==o&&8!==o&&2!==o)return 1===o&&A.isXMLDoc(t)||(e=A.propFix[e]||e,i=A.propHooks[e]),void 0!==n?i&&"set"in i&&void 0!==(r=i.set(t,n,e))?r:t[e]=n:i&&"get"in i&&null!==(r=i.get(t,e))?r:t[e]},propHooks:{tabIndex:{get:function(t){var e=A.find.attr(t,"tabindex");return e?parseInt(e,10):ve.test(t.nodeName)||me.test(t.nodeName)&&t.href?0:-1}}},propFix:{for:"htmlFor",class:"className"}}),g.optSelected||(A.propHooks.selected={get:function(t){var e=t.parentNode;return e&&e.parentNode&&e.parentNode.selectedIndex,null},set:function(t){var e=t.parentNode;e&&(e.selectedIndex,e.parentNode&&e.parentNode.selectedIndex)}}),A.each(["tabIndex","readOnly","maxLength","cellSpacing","cellPadding","rowSpan","colSpan","useMap","frameBorder","contentEditable"],(function(){A.propFix[this.toLowerCase()]=this})),A.fn.extend({addClass:function(t){var e,n,r,i,o,a;return v(t)?this.each((function(e){A(this).addClass(t.call(this,e,we(this)))})):(e=be(t)).length?this.each((function(){if(r=we(this),n=1===this.nodeType&&" "+xe(r)+" "){for(o=0;o<e.length;o++)i=e[o],n.indexOf(" "+i+" ")<0&&(n+=i+" ");a=xe(n),r!==a&&this.setAttribute("class",a)}})):this},removeClass:function(t){var e,n,r,i,o,a;return v(t)?this.each((function(e){A(this).removeClass(t.call(this,e,we(this)))})):arguments.length?(e=be(t)).length?this.each((function(){if(r=we(this),n=1===this.nodeType&&" "+xe(r)+" "){for(o=0;o<e.length;o++)for(i=e[o];n.indexOf(" "+i+" ")>-1;)n=n.replace(" "+i+" "," ");a=xe(n),r!==a&&this.setAttribute("class",a)}})):this:this.attr("class","")},toggleClass:function(t,e){var n,r,i,o,a=typeof t,s="string"===a||Array.isArray(t);return v(t)?this.each((function(n){A(this).toggleClass(t.call(this,n,we(this),e),e)})):"boolean"==typeof e&&s?e?this.addClass(t):this.removeClass(t):(n=be(t),this.each((function(){if(s)for(o=A(this),i=0;i<n.length;i++)r=n[i],o.hasClass(r)?o.removeClass(r):o.addClass(r);else void 0!==t&&"boolean"!==a||((r=we(this))&&J.set(this,"__className__",r),this.setAttribute&&this.setAttribute("class",r||!1===t?"":J.get(this,"__className__")||""))})))},hasClass:function(t){var e,n,r=0;for(e=" "+t+" ";n=this[r++];)if(1===n.nodeType&&(" "+xe(we(n))+" ").indexOf(e)>-1)return!0;return!1}});var _e=/\r/g;A.fn.extend({val:function(t){var e,n,r,i=this[0];return arguments.length?(r=v(t),this.each((function(n){var i;1===this.nodeType&&(null==(i=r?t.call(this,n,A(this).val()):t)?i="":"number"==typeof i?i+="":Array.isArray(i)&&(i=A.map(i,(function(t){return null==t?"":t+""}))),(e=A.valHooks[this.type]||A.valHooks[this.nodeName.toLowerCase()])&&"set"in e&&void 0!==e.set(this,i,"value")||(this.value=i))}))):i?(e=A.valHooks[i.type]||A.valHooks[i.nodeName.toLowerCase()])&&"get"in e&&void 0!==(n=e.get(i,"value"))?n:"string"==typeof(n=i.value)?n.replace(_e,""):null==n?"":n:void 0}}),A.extend({valHooks:{option:{get:function(t){var e=A.find.attr(t,"value");return null!=e?e:xe(A.text(t))}},select:{get:function(t){var e,n,r,i=t.options,o=t.selectedIndex,a="select-one"===t.type,s=a?null:[],u=a?o+1:i.length;for(r=o<0?u:a?o:0;r<u;r++)if(((n=i[r]).selected||r===o)&&!n.disabled&&(!n.parentNode.disabled||!M(n.parentNode,"optgroup"))){if(e=A(n).val(),a)return e;s.push(e)}return s},set:function(t,e){for(var n,r,i=t.options,o=A.makeArray(e),a=i.length;a--;)((r=i[a]).selected=A.inArray(A.valHooks.option.get(r),o)>-1)&&(n=!0);return n||(t.selectedIndex=-1),o}}}}),A.each(["radio","checkbox"],(function(){A.valHooks[this]={set:function(t,e){if(Array.isArray(e))return t.checked=A.inArray(A(t).val(),e)>-1}},g.checkOn||(A.valHooks[this].get=function(t){return null===t.getAttribute("value")?"on":t.value})})),g.focusin="onfocusin"in r;var Te=/^(?:focusinfocus|focusoutblur)$/,Ae=function(t){t.stopPropagation()};A.extend(A.event,{trigger:function(t,e,n,i){var o,a,s,u,l,c,h,f,d=[n||x],y=p.call(t,"type")?t.type:t,g=p.call(t,"namespace")?t.namespace.split("."):[];if(a=f=s=n=n||x,3!==n.nodeType&&8!==n.nodeType&&!Te.test(y+A.event.triggered)&&(y.indexOf(".")>-1&&(g=y.split("."),y=g.shift(),g.sort()),l=y.indexOf(":")<0&&"on"+y,(t=t[A.expando]?t:new A.Event(y,"object"==typeof t&&t)).isTrigger=i?2:3,t.namespace=g.join("."),t.rnamespace=t.namespace?new RegExp("(^|\\.)"+g.join("\\.(?:.*\\.|)")+"(\\.|$)"):null,t.result=void 0,t.target||(t.target=n),e=null==e?[t]:A.makeArray(e,[t]),h=A.event.special[y]||{},i||!h.trigger||!1!==h.trigger.apply(n,e))){if(!i&&!h.noBubble&&!m(n)){for(u=h.delegateType||y,Te.test(u+y)||(a=a.parentNode);a;a=a.parentNode)d.push(a),s=a;s===(n.ownerDocument||x)&&d.push(s.defaultView||s.parentWindow||r)}for(o=0;(a=d[o++])&&!t.isPropagationStopped();)f=a,t.type=o>1?u:h.bindType||y,(c=(J.get(a,"events")||Object.create(null))[t.type]&&J.get(a,"handle"))&&c.apply(a,e),(c=l&&a[l])&&c.apply&&Q(a)&&(t.result=c.apply(a,e),!1===t.result&&t.preventDefault());return t.type=y,i||t.isDefaultPrevented()||h._default&&!1!==h._default.apply(d.pop(),e)||!Q(n)||l&&v(n[y])&&!m(n)&&((s=n[l])&&(n[l]=null),A.event.triggered=y,t.isPropagationStopped()&&f.addEventListener(y,Ae),n[y](),t.isPropagationStopped()&&f.removeEventListener(y,Ae),A.event.triggered=void 0,s&&(n[l]=s)),t.result}},simulate:function(t,e,n){var r=A.extend(new A.Event,n,{type:t,isSimulated:!0});A.event.trigger(r,null,e)}}),A.fn.extend({trigger:function(t,e){return this.each((function(){A.event.trigger(t,e,this)}))},triggerHandler:function(t,e){var n=this[0];if(n)return A.event.trigger(t,e,n,!0)}}),g.focusin||A.each({focus:"focusin",blur:"focusout"},(function(t,e){var n=function(t){A.event.simulate(e,t.target,A.event.fix(t))};A.event.special[e]={setup:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,e);i||r.addEventListener(t,n,!0),J.access(r,e,(i||0)+1)},teardown:function(){var r=this.ownerDocument||this.document||this,i=J.access(r,e)-1;i?J.access(r,e,i):(r.removeEventListener(t,n,!0),J.remove(r,e))}}}));var De=r.location,Se={guid:Date.now()},Ee=/\?/;A.parseXML=function(t){var e,n;if(!t||"string"!=typeof t)return null;try{e=(new r.DOMParser).parseFromString(t,"text/xml")}catch(t){}return n=e&&e.getElementsByTagName("parsererror")[0],e&&!n||A.error("Invalid XML: "+(n?A.map(n.childNodes,(function(t){return t.textContent})).join("\n"):t)),e};var Ce=/\[\]$/,ke=/\r?\n/g,Me=/^(?:submit|button|image|reset|file)$/i,Ne=/^(?:input|select|textarea|keygen)/i;function Oe(t,e,n,r){var i;if(Array.isArray(e))A.each(e,(function(e,i){n||Ce.test(t)?r(t,i):Oe(t+"["+("object"==typeof i&&null!=i?e:"")+"]",i,n,r)}));else if(n||"object"!==_(e))r(t,e);else for(i in e)Oe(t+"["+i+"]",e[i],n,r)}A.param=function(t,e){var n,r=[],i=function(t,e){var n=v(e)?e():e;r[r.length]=encodeURIComponent(t)+"="+encodeURIComponent(null==n?"":n)};if(null==t)return"";if(Array.isArray(t)||t.jquery&&!A.isPlainObject(t))A.each(t,(function(){i(this.name,this.value)}));else for(n in t)Oe(n,t[n],e,i);return r.join("&")},A.fn.extend({serialize:function(){return A.param(this.serializeArray())},serializeArray:function(){return this.map((function(){var t=A.prop(this,"elements");return t?A.makeArray(t):this})).filter((function(){var t=this.type;return this.name&&!A(this).is(":disabled")&&Ne.test(this.nodeName)&&!Me.test(t)&&(this.checked||!gt.test(t))})).map((function(t,e){var n=A(this).val();return null==n?null:Array.isArray(n)?A.map(n,(function(t){return{name:e.name,value:t.replace(ke,"\r\n")}})):{name:e.name,value:n.replace(ke,"\r\n")}})).get()}});var $e=/%20/g,He=/#.*$/,Le=/([?&])_=[^&]*/,Ie=/^(.*?):[ \t]*([^\r\n]*)$/gm,je=/^(?:GET|HEAD)$/,Pe=/^\/\//,Re={},Ue={},qe="*/".concat("*"),Fe=x.createElement("a");function Ye(t){return function(e,n){"string"!=typeof e&&(n=e,e="*");var r,i=0,o=e.toLowerCase().match(P)||[];if(v(n))for(;r=o[i++];)"+"===r[0]?(r=r.slice(1)||"*",(t[r]=t[r]||[]).unshift(n)):(t[r]=t[r]||[]).push(n)}}function Be(t,e,n,r){var i={},o=t===Ue;function a(s){var u;return i[s]=!0,A.each(t[s]||[],(function(t,s){var l=s(e,n,r);return"string"!=typeof l||o||i[l]?o?!(u=l):void 0:(e.dataTypes.unshift(l),a(l),!1)})),u}return a(e.dataTypes[0])||!i["*"]&&a("*")}function We(t,e){var n,r,i=A.ajaxSettings.flatOptions||{};for(n in e)void 0!==e[n]&&((i[n]?t:r||(r={}))[n]=e[n]);return r&&A.extend(!0,t,r),t}Fe.href=De.href,A.extend({active:0,lastModified:{},etag:{},ajaxSettings:{url:De.href,type:"GET",isLocal:/^(?:about|app|app-storage|.+-extension|file|res|widget):$/.test(De.protocol),global:!0,processData:!0,async:!0,contentType:"application/x-www-form-urlencoded; charset=UTF-8",accepts:{"*":qe,text:"text/plain",html:"text/html",xml:"application/xml, text/xml",json:"application/json, text/javascript"},contents:{xml:/\bxml\b/,html:/\bhtml/,json:/\bjson\b/},responseFields:{xml:"responseXML",text:"responseText",json:"responseJSON"},converters:{"* text":String,"text html":!0,"text json":JSON.parse,"text xml":A.parseXML},flatOptions:{url:!0,context:!0}},ajaxSetup:function(t,e){return e?We(We(t,A.ajaxSettings),e):We(A.ajaxSettings,t)},ajaxPrefilter:Ye(Re),ajaxTransport:Ye(Ue),ajax:function(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};var n,i,o,a,s,u,l,c,h,f,p=A.ajaxSetup({},e),d=p.context||p,y=p.context&&(d.nodeType||d.jquery)?A(d):A.event,g=A.Deferred(),v=A.Callbacks("once memory"),m=p.statusCode||{},w={},b={},_="canceled",T={readyState:0,getResponseHeader:function(t){var e;if(l){if(!a)for(a={};e=Ie.exec(o);)a[e[1].toLowerCase()+" "]=(a[e[1].toLowerCase()+" "]||[]).concat(e[2]);e=a[t.toLowerCase()+" "]}return null==e?null:e.join(", ")},getAllResponseHeaders:function(){return l?o:null},setRequestHeader:function(t,e){return null==l&&(t=b[t.toLowerCase()]=b[t.toLowerCase()]||t,w[t]=e),this},overrideMimeType:function(t){return null==l&&(p.mimeType=t),this},statusCode:function(t){var e;if(t)if(l)T.always(t[T.status]);else for(e in t)m[e]=[m[e],t[e]];return this},abort:function(t){var e=t||_;return n&&n.abort(e),D(0,e),this}};if(g.promise(T),p.url=((t||p.url||De.href)+"").replace(Pe,De.protocol+"//"),p.type=e.method||e.type||p.method||p.type,p.dataTypes=(p.dataType||"*").toLowerCase().match(P)||[""],null==p.crossDomain){u=x.createElement("a");try{u.href=p.url,u.href=u.href,p.crossDomain=Fe.protocol+"//"+Fe.host!=u.protocol+"//"+u.host}catch(t){p.crossDomain=!0}}if(p.data&&p.processData&&"string"!=typeof p.data&&(p.data=A.param(p.data,p.traditional)),Be(Re,p,e,T),l)return T;for(h in(c=A.event&&p.global)&&0==A.active++&&A.event.trigger("ajaxStart"),p.type=p.type.toUpperCase(),p.hasContent=!je.test(p.type),i=p.url.replace(He,""),p.hasContent?p.data&&p.processData&&0===(p.contentType||"").indexOf("application/x-www-form-urlencoded")&&(p.data=p.data.replace($e,"+")):(f=p.url.slice(i.length),p.data&&(p.processData||"string"==typeof p.data)&&(i+=(Ee.test(i)?"&":"?")+p.data,delete p.data),!1===p.cache&&(i=i.replace(Le,"$1"),f=(Ee.test(i)?"&":"?")+"_="+Se.guid+++f),p.url=i+f),p.ifModified&&(A.lastModified[i]&&T.setRequestHeader("If-Modified-Since",A.lastModified[i]),A.etag[i]&&T.setRequestHeader("If-None-Match",A.etag[i])),(p.data&&p.hasContent&&!1!==p.contentType||e.contentType)&&T.setRequestHeader("Content-Type",p.contentType),T.setRequestHeader("Accept",p.dataTypes[0]&&p.accepts[p.dataTypes[0]]?p.accepts[p.dataTypes[0]]+("*"!==p.dataTypes[0]?", "+qe+"; q=0.01":""):p.accepts["*"]),p.headers)T.setRequestHeader(h,p.headers[h]);if(p.beforeSend&&(!1===p.beforeSend.call(d,T,p)||l))return T.abort();if(_="abort",v.add(p.complete),T.done(p.success),T.fail(p.error),n=Be(Ue,p,e,T)){if(T.readyState=1,c&&y.trigger("ajaxSend",[T,p]),l)return T;p.async&&p.timeout>0&&(s=r.setTimeout((function(){T.abort("timeout")}),p.timeout));try{l=!1,n.send(w,D)}catch(t){if(l)throw t;D(-1,t)}}else D(-1,"No Transport");function D(t,e,a,u){var h,f,x,w,b,_=e;l||(l=!0,s&&r.clearTimeout(s),n=void 0,o=u||"",T.readyState=t>0?4:0,h=t>=200&&t<300||304===t,a&&(w=function(t,e,n){for(var r,i,o,a,s=t.contents,u=t.dataTypes;"*"===u[0];)u.shift(),void 0===r&&(r=t.mimeType||e.getResponseHeader("Content-Type"));if(r)for(i in s)if(s[i]&&s[i].test(r)){u.unshift(i);break}if(u[0]in n)o=u[0];else{for(i in n){if(!u[0]||t.converters[i+" "+u[0]]){o=i;break}a||(a=i)}o=o||a}if(o)return o!==u[0]&&u.unshift(o),n[o]}(p,T,a)),!h&&A.inArray("script",p.dataTypes)>-1&&A.inArray("json",p.dataTypes)<0&&(p.converters["text script"]=function(){}),w=function(t,e,n,r){var i,o,a,s,u,l={},c=t.dataTypes.slice();if(c[1])for(a in t.converters)l[a.toLowerCase()]=t.converters[a];for(o=c.shift();o;)if(t.responseFields[o]&&(n[t.responseFields[o]]=e),!u&&r&&t.dataFilter&&(e=t.dataFilter(e,t.dataType)),u=o,o=c.shift())if("*"===o)o=u;else if("*"!==u&&u!==o){if(!(a=l[u+" "+o]||l["* "+o]))for(i in l)if((s=i.split(" "))[1]===o&&(a=l[u+" "+s[0]]||l["* "+s[0]])){!0===a?a=l[i]:!0!==l[i]&&(o=s[0],c.unshift(s[1]));break}if(!0!==a)if(a&&t.throws)e=a(e);else try{e=a(e)}catch(t){return{state:"parsererror",error:a?t:"No conversion from "+u+" to "+o}}}return{state:"success",data:e}}(p,w,T,h),h?(p.ifModified&&((b=T.getResponseHeader("Last-Modified"))&&(A.lastModified[i]=b),(b=T.getResponseHeader("etag"))&&(A.etag[i]=b)),204===t||"HEAD"===p.type?_="nocontent":304===t?_="notmodified":(_=w.state,f=w.data,h=!(x=w.error))):(x=_,!t&&_||(_="error",t<0&&(t=0))),T.status=t,T.statusText=(e||_)+"",h?g.resolveWith(d,[f,_,T]):g.rejectWith(d,[T,_,x]),T.statusCode(m),m=void 0,c&&y.trigger(h?"ajaxSuccess":"ajaxError",[T,p,h?f:x]),v.fireWith(d,[T,_]),c&&(y.trigger("ajaxComplete",[T,p]),--A.active||A.event.trigger("ajaxStop")))}return T},getJSON:function(t,e,n){return A.get(t,e,n,"json")},getScript:function(t,e){return A.get(t,void 0,e,"script")}}),A.each(["get","post"],(function(t,e){A[e]=function(t,n,r,i){return v(n)&&(i=i||r,r=n,n=void 0),A.ajax(A.extend({url:t,type:e,dataType:i,data:n,success:r},A.isPlainObject(t)&&t))}})),A.ajaxPrefilter((function(t){var e;for(e in t.headers)"content-type"===e.toLowerCase()&&(t.contentType=t.headers[e]||"")})),A._evalUrl=function(t,e,n){return A.ajax({url:t,type:"GET",dataType:"script",cache:!0,async:!1,global:!1,converters:{"text script":function(){}},dataFilter:function(t){A.globalEval(t,e,n)}})},A.fn.extend({wrapAll:function(t){var e;return this[0]&&(v(t)&&(t=t.call(this[0])),e=A(t,this[0].ownerDocument).eq(0).clone(!0),this[0].parentNode&&e.insertBefore(this[0]),e.map((function(){for(var t=this;t.firstElementChild;)t=t.firstElementChild;return t})).append(this)),this},wrapInner:function(t){return v(t)?this.each((function(e){A(this).wrapInner(t.call(this,e))})):this.each((function(){var e=A(this),n=e.contents();n.length?n.wrapAll(t):e.append(t)}))},wrap:function(t){var e=v(t);return this.each((function(n){A(this).wrapAll(e?t.call(this,n):t)}))},unwrap:function(t){return this.parent(t).not("body").each((function(){A(this).replaceWith(this.childNodes)})),this}}),A.expr.pseudos.hidden=function(t){return!A.expr.pseudos.visible(t)},A.expr.pseudos.visible=function(t){return!!(t.offsetWidth||t.offsetHeight||t.getClientRects().length)},A.ajaxSettings.xhr=function(){try{return new r.XMLHttpRequest}catch(t){}};var Ve={0:200,1223:204},Xe=A.ajaxSettings.xhr();g.cors=!!Xe&&"withCredentials"in Xe,g.ajax=Xe=!!Xe,A.ajaxTransport((function(t){var e,n;if(g.cors||Xe&&!t.crossDomain)return{send:function(i,o){var a,s=t.xhr();if(s.open(t.type,t.url,t.async,t.username,t.password),t.xhrFields)for(a in t.xhrFields)s[a]=t.xhrFields[a];for(a in t.mimeType&&s.overrideMimeType&&s.overrideMimeType(t.mimeType),t.crossDomain||i["X-Requested-With"]||(i["X-Requested-With"]="XMLHttpRequest"),i)s.setRequestHeader(a,i[a]);e=function(t){return function(){e&&(e=n=s.onload=s.onerror=s.onabort=s.ontimeout=s.onreadystatechange=null,"abort"===t?s.abort():"error"===t?"number"!=typeof s.status?o(0,"error"):o(s.status,s.statusText):o(Ve[s.status]||s.status,s.statusText,"text"!==(s.responseType||"text")||"string"!=typeof s.responseText?{binary:s.response}:{text:s.responseText},s.getAllResponseHeaders()))}},s.onload=e(),n=s.onerror=s.ontimeout=e("error"),void 0!==s.onabort?s.onabort=n:s.onreadystatechange=function(){4===s.readyState&&r.setTimeout((function(){e&&n()}))},e=e("abort");try{s.send(t.hasContent&&t.data||null)}catch(t){if(e)throw t}},abort:function(){e&&e()}}})),A.ajaxPrefilter((function(t){t.crossDomain&&(t.contents.script=!1)})),A.ajaxSetup({accepts:{script:"text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"},contents:{script:/\b(?:java|ecma)script\b/},converters:{"text script":function(t){return A.globalEval(t),t}}}),A.ajaxPrefilter("script",(function(t){void 0===t.cache&&(t.cache=!1),t.crossDomain&&(t.type="GET")})),A.ajaxTransport("script",(function(t){var e,n;if(t.crossDomain||t.scriptAttrs)return{send:function(r,i){e=A("<script>").attr(t.scriptAttrs||{}).prop({charset:t.scriptCharset,src:t.url}).on("load error",n=function(t){e.remove(),n=null,t&&i("error"===t.type?404:200,t.type)}),x.head.appendChild(e[0])},abort:function(){n&&n()}}}));var Ge,ze=[],Qe=/(=)\?(?=&|$)|\?\?/;A.ajaxSetup({jsonp:"callback",jsonpCallback:function(){var t=ze.pop()||A.expando+"_"+Se.guid++;return this[t]=!0,t}}),A.ajaxPrefilter("json jsonp",(function(t,e,n){var i,o,a,s=!1!==t.jsonp&&(Qe.test(t.url)?"url":"string"==typeof t.data&&0===(t.contentType||"").indexOf("application/x-www-form-urlencoded")&&Qe.test(t.data)&&"data");if(s||"jsonp"===t.dataTypes[0])return i=t.jsonpCallback=v(t.jsonpCallback)?t.jsonpCallback():t.jsonpCallback,s?t[s]=t[s].replace(Qe,"$1"+i):!1!==t.jsonp&&(t.url+=(Ee.test(t.url)?"&":"?")+t.jsonp+"="+i),t.converters["script json"]=function(){return a||A.error(i+" was not called"),a[0]},t.dataTypes[0]="json",o=r[i],r[i]=function(){a=arguments},n.always((function(){void 0===o?A(r).removeProp(i):r[i]=o,t[i]&&(t.jsonpCallback=e.jsonpCallback,ze.push(i)),a&&v(o)&&o(a[0]),a=o=void 0})),"script"})),g.createHTMLDocument=((Ge=x.implementation.createHTMLDocument("").body).innerHTML="<form></form><form></form>",2===Ge.childNodes.length),A.parseHTML=function(t,e,n){return"string"!=typeof t?[]:("boolean"==typeof e&&(n=e,e=!1),e||(g.createHTMLDocument?((r=(e=x.implementation.createHTMLDocument("")).createElement("base")).href=x.location.href,e.head.appendChild(r)):e=x),o=!n&&[],(i=N.exec(t))?[e.createElement(i[1])]:(i=Tt([t],e,o),o&&o.length&&A(o).remove(),A.merge([],i.childNodes)));var r,i,o},A.fn.load=function(t,e,n){var r,i,o,a=this,s=t.indexOf(" ");return s>-1&&(r=xe(t.slice(s)),t=t.slice(0,s)),v(e)?(n=e,e=void 0):e&&"object"==typeof e&&(i="POST"),a.length>0&&A.ajax({url:t,type:i||"GET",dataType:"html",data:e}).done((function(t){o=arguments,a.html(r?A("<div>").append(A.parseHTML(t)).find(r):t)})).always(n&&function(t,e){a.each((function(){n.apply(this,o||[t.responseText,e,t])}))}),this},A.expr.pseudos.animated=function(t){return A.grep(A.timers,(function(e){return t===e.elem})).length},A.offset={setOffset:function(t,e,n){var r,i,o,a,s,u,l=A.css(t,"position"),c=A(t),h={};"static"===l&&(t.style.position="relative"),s=c.offset(),o=A.css(t,"top"),u=A.css(t,"left"),("absolute"===l||"fixed"===l)&&(o+u).indexOf("auto")>-1?(a=(r=c.position()).top,i=r.left):(a=parseFloat(o)||0,i=parseFloat(u)||0),v(e)&&(e=e.call(t,n,A.extend({},s))),null!=e.top&&(h.top=e.top-s.top+a),null!=e.left&&(h.left=e.left-s.left+i),"using"in e?e.using.call(t,h):c.css(h)}},A.fn.extend({offset:function(t){if(arguments.length)return void 0===t?this:this.each((function(e){A.offset.setOffset(this,t,e)}));var e,n,r=this[0];return r?r.getClientRects().length?(e=r.getBoundingClientRect(),n=r.ownerDocument.defaultView,{top:e.top+n.pageYOffset,left:e.left+n.pageXOffset}):{top:0,left:0}:void 0},position:function(){if(this[0]){var t,e,n,r=this[0],i={top:0,left:0};if("fixed"===A.css(r,"position"))e=r.getBoundingClientRect();else{for(e=this.offset(),n=r.ownerDocument,t=r.offsetParent||n.documentElement;t&&(t===n.body||t===n.documentElement)&&"static"===A.css(t,"position");)t=t.parentNode;t&&t!==r&&1===t.nodeType&&((i=A(t).offset()).top+=A.css(t,"borderTopWidth",!0),i.left+=A.css(t,"borderLeftWidth",!0))}return{top:e.top-i.top-A.css(r,"marginTop",!0),left:e.left-i.left-A.css(r,"marginLeft",!0)}}},offsetParent:function(){return this.map((function(){for(var t=this.offsetParent;t&&"static"===A.css(t,"position");)t=t.offsetParent;return t||at}))}}),A.each({scrollLeft:"pageXOffset",scrollTop:"pageYOffset"},(function(t,e){var n="pageYOffset"===e;A.fn[t]=function(r){return W(this,(function(t,r,i){var o;if(m(t)?o=t:9===t.nodeType&&(o=t.defaultView),void 0===i)return o?o[e]:t[r];o?o.scrollTo(n?o.pageXOffset:i,n?i:o.pageYOffset):t[r]=i}),t,r,arguments.length)}})),A.each(["top","left"],(function(t,e){A.cssHooks[e]=Gt(g.pixelPosition,(function(t,n){if(n)return n=Xt(t,e),Ut.test(n)?A(t).position()[e]+"px":n}))})),A.each({Height:"height",Width:"width"},(function(t,e){A.each({padding:"inner"+t,content:e,"":"outer"+t},(function(n,r){A.fn[r]=function(i,o){var a=arguments.length&&(n||"boolean"!=typeof i),s=n||(!0===i||!0===o?"margin":"border");return W(this,(function(e,n,i){var o;return m(e)?0===r.indexOf("outer")?e["inner"+t]:e.document.documentElement["client"+t]:9===e.nodeType?(o=e.documentElement,Math.max(e.body["scroll"+t],o["scroll"+t],e.body["offset"+t],o["offset"+t],o["client"+t])):void 0===i?A.css(e,n,s):A.style(e,n,i,s)}),e,a?i:void 0,a)}}))})),A.each(["ajaxStart","ajaxStop","ajaxComplete","ajaxError","ajaxSuccess","ajaxSend"],(function(t,e){A.fn[e]=function(t){return this.on(e,t)}})),A.fn.extend({bind:function(t,e,n){return this.on(t,null,e,n)},unbind:function(t,e){return this.off(t,null,e)},delegate:function(t,e,n,r){return this.on(e,t,n,r)},undelegate:function(t,e,n){return 1===arguments.length?this.off(t,"**"):this.off(e,t||"**",n)},hover:function(t,e){return this.mouseenter(t).mouseleave(e||t)}}),A.each("blur focus focusin focusout resize scroll click dblclick mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave change select submit keydown keypress keyup contextmenu".split(" "),(function(t,e){A.fn[e]=function(t,n){return arguments.length>0?this.on(e,null,t,n):this.trigger(e)}}));var Ze=/^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;A.proxy=function(t,e){var n,r,i;if("string"==typeof e&&(n=t[e],e=t,t=n),v(t))return r=s.call(arguments,2),i=function(){return t.apply(e||this,r.concat(s.call(arguments)))},i.guid=t.guid=t.guid||A.guid++,i},A.holdReady=function(t){t?A.readyWait++:A.ready(!0)},A.isArray=Array.isArray,A.parseJSON=JSON.parse,A.nodeName=M,A.isFunction=v,A.isWindow=m,A.camelCase=z,A.type=_,A.now=Date.now,A.isNumeric=function(t){var e=A.type(t);return("number"===e||"string"===e)&&!isNaN(t-parseFloat(t))},A.trim=function(t){return null==t?"":(t+"").replace(Ze,"$1")},void 0===(n=function(){return A}.apply(e,[]))||(t.exports=n);var Je=r.jQuery,Ke=r.$;return A.noConflict=function(t){return r.$===A&&(r.$=Ke),t&&r.jQuery===A&&(r.jQuery=Je),A},void 0===i&&(r.jQuery=r.$=A),A}))}},e={};function n(r){var i=e[r];if(void 0!==i)return i.exports;var o=e[r]={exports:{}};return t[r].call(o.exports,o,o.exports,n),o.exports}(()=>{"use strict";var t=n(755);class e{get firstHistoryItem(){return this.history[0]}get lastHistoryItem(){return this.history[this.history.length-1]}get numberOfTrades(){return this.history.length}get currentValue(){return this.amountOfMoney+this.numberOfShares*this.tradeData[this.tradeData.length-1].close}constructor(t,e,n,r){this.amountOfMoney=t,this.numberOfShares=e,this.startDate=n,this.history=new Array,this.tradeData=r}}class r{constructor(t,e){this.stockHistory=t,this.propertySelector=e}populateOpenVariation(){this.stockHistory.forEach(((t,e,n)=>{null!=this.stockHistory[e].previousDay&&(this.stockHistory[e].openVariation=this.propertySelector(this.stockHistory[e])/this.propertySelector(this.stockHistory[e].previousDay)*100)}))}populateDayVariation(){this.stockHistory.forEach(((t,e,n)=>{if(this.stockHistory[e].oneDayVariation=(this.stockHistory[e].high-this.stockHistory[e].low)/this.stockHistory[e].low*100,null!=this.stockHistory[e].previousDay){var r=Math.max(this.stockHistory[e].high,this.stockHistory[e].previousDay.high),i=Math.min(this.stockHistory[e].low,this.stockHistory[e].previousDay.low);if(this.stockHistory[e].twoDaysVariation=(r-i)/i*100,null!=this.stockHistory[e].previousDay.previousDay){var o=Math.max(r,this.stockHistory[e].previousDay.previousDay.high),a=Math.min(i,this.stockHistory[e].previousDay.previousDay.low);this.stockHistory[e].threeDaysVariation=(o-a)/a*100}}}))}populate52WeeksRange(){let t=Number.MAX_SAFE_INTEGER,e=Number.MIN_SAFE_INTEGER;this.stockHistory.forEach(((n,r,i)=>{if(r>=260){for(let n=r-260;n<=r;n++)this.stockHistory[n].high>=e&&(e=this.stockHistory[r].high),this.stockHistory[n].low<=t&&(t=this.stockHistory[r].low);this.stockHistory[r].high52Weeks=e,this.stockHistory[r].low52Weeks=t}}))}populate50DaysOpenSMA(){this.stockHistory.map(((t,e)=>t.sma50Days=this.getSimpleMovingAverage(50,e)))}populate100DaysOpenSMA(){this.stockHistory.map(((t,e)=>t.sma100Days=this.getSimpleMovingAverage(100,e)))}populate200DaysOpenSMA(){this.stockHistory.map(((t,e)=>t.sma200Days=this.getSimpleMovingAverage(200,e)))}getSimpleMovingAverage(t,e){if(e>=t){let n=0;for(let r=e-t;r<=e;r++)n+=this.propertySelector(this.stockHistory[r]);return n/t}return null}populate50DaysOpenEMA(){this.stockHistory.map(((t,e)=>t.ema50Days=this.getExponentialMovingAverage(50,e,e<50?0:this.stockHistory[e-1].ema50Days)))}populate100DaysOpenEMA(){this.stockHistory.map(((t,e)=>t.ema100Days=this.getExponentialMovingAverage(100,e,e<100?0:this.stockHistory[e-1].ema100Days)))}populate200DaysOpenEMA(){this.stockHistory.map(((t,e)=>t.ema200Days=this.getExponentialMovingAverage(200,e,e<200?0:this.stockHistory[e-1].ema200Days)))}getExponentialMovingAverage(t,e,n){const r=2/(t+1);return e===t?this.getSimpleMovingAverage(t,e):e>t?this.propertySelector(this.stockHistory[e])*r+n*(1-r):null}populate14DaysOpenAverages(){let t=0,e=0;for(let n=1;n<14;n++)this.propertySelector(this.stockHistory[n-1])<this.propertySelector(this.stockHistory[n])&&(t+=this.propertySelector(this.stockHistory[n])-this.propertySelector(this.stockHistory[n-1])),this.propertySelector(this.stockHistory[n-1])>this.propertySelector(this.stockHistory[n])&&(e+=this.propertySelector(this.stockHistory[n-1])-this.propertySelector(this.stockHistory[n]));this.stockHistory[14].averageGains14Days=t/14,this.stockHistory[14].averageLosses14Days=e/14;for(let t=15;t<this.stockHistory.length;t++){let e=0,n=0;this.propertySelector(this.stockHistory[t-1])<this.propertySelector(this.stockHistory[t])&&(e+=this.propertySelector(this.stockHistory[t])-this.propertySelector(this.stockHistory[t-1])),this.propertySelector(this.stockHistory[t-1])>this.propertySelector(this.stockHistory[t])&&(n+=this.propertySelector(this.stockHistory[t-1])-this.propertySelector(this.stockHistory[t])),this.stockHistory[t].averageGains14Days=(13*this.stockHistory[t-1].averageGains14Days+e)/14,this.stockHistory[t].averageLosses14Days=(13*this.stockHistory[t-1].averageLosses14Days+n)/14}}populate14DaysOpenRSI(){this.stockHistory.map(((t,e)=>t.rsi14Days=this.getRelativeStrengthIndex(14,e)))}getRelativeStrengthIndex(t,e){return e>=t?100-100/(1+this.stockHistory[e].averageGains14Days/this.stockHistory[e].averageLosses14Days):null}populateDerivativeFirst(){this.stockHistory[0].derivativeFirst=0;for(var t=1;t<this.stockHistory.length;t++)this.stockHistory[t].derivativeFirst=this.propertySelector(this.stockHistory[t].previousDay)-this.propertySelector(this.stockHistory[t])}populateDerivativeSecond(){this.stockHistory[0].derivativeSecond=0,this.stockHistory[1].derivativeSecond=0;for(var t=2;t<this.stockHistory.length;t++)this.stockHistory[t].derivativeSecond=this.stockHistory[t].previousDay.derivativeFirst-this.stockHistory[t].derivativeFirst}populateDerivativeThird(){this.stockHistory[0].derivativeThird=0,this.stockHistory[1].derivativeThird=0,this.stockHistory[2].derivativeThird=0;for(var t=3;t<this.stockHistory.length;t++)this.stockHistory[t].derivativeThird=this.stockHistory[t].previousDay.derivativeSecond-this.stockHistory[t].derivativeSecond}}var i=n(755);class o{deepCopy(){const t=new o;return t.date=this.date,t.open=this.open,t.high=this.high,t.low=this.low,t.close=this.close,t.volume=this.volume,t.high52Weeks=this.high52Weeks,t.low52Weeks=this.low52Weeks,t}static loadFromAlphavantage(t){let e=new Array;i.each(t["Time Series (Daily)"],((n,r)=>{const i=new o;i.date=new Date(n.toString()),i.open=Number(t["Time Series (Daily)"][n]["1. open"]),i.high=Number(t["Time Series (Daily)"][n]["2. high"]),i.low=Number(t["Time Series (Daily)"][n]["3. low"]),i.close=Number(t["Time Series (Daily)"][n]["4. close"]),i.volume=Number(t["Time Series (Daily)"][n]["5. volume"]),e.push(i)}));let n=null;e.sort(((t,e)=>t.date.getTime()-e.date.getTime())),i.each(e,((t,r)=>{e[t].previousDay=n,n=e[t]}));const a=new r(e,(t=>t.open));return a.populateOpenVariation(),a.populateDayVariation(),a.populate52WeeksRange(),a.populate50DaysOpenSMA(),a.populate100DaysOpenSMA(),a.populate200DaysOpenSMA(),a.populate50DaysOpenEMA(),a.populate100DaysOpenEMA(),a.populate200DaysOpenEMA(),a.populate14DaysOpenAverages(),a.populate14DaysOpenRSI(),a.populateDerivativeFirst(),a.populateDerivativeSecond(),a.populateDerivativeThird(),e}}class a{constructor(){this.strategyBranches=new Array}toString(){var t;let e="";for(const n in this.strategyBranches)e+=`${null===(t=this.strategyBranches[n])||void 0===t?void 0:t.toString()}<br/>`;return e}simplify(){for(const t in this.strategyBranches)this.strategyBranches[t].simplify()}toCode(){let t="";for(const e in this.strategyBranches)t+=`${this.strategyBranches[e].toCode()}; `;return t}run(t,e){e.strategy=this,t.forEach((t=>{this.strategyBranches.forEach((n=>{if(n.binaryCondition&&!n.binaryCondition.evaluate(t,e))return!1;n.action.trade(t,e),e.lastHistoryItem&&(e.lastHistoryItem.executionDescription=n.toString())}))}))}}var s=n(755);class u{static printHistoricData(t,e){const n=s('\n        <table class="table table-striped" style="width: 100%">\n            <thead>\n                <tr><td style="width: 110px">date</td>\n                    <td style="width: 80px; text-align: right;">open</td>\n                    <td style="width: 80px; text-align: right;">high</td>\n                    <td style="width: 80px; text-align: right;">low</td>\n                    <td style="width: 80px; text-align: right;">close</td>\n                    <td style="width: 80px; text-align: right;">volume</td>\n                    <td style="width: 80px; text-align: right;">52 weeks low</td>\n                    <td style="width: 80px; text-align: right;">52 weeks high</td>\n                    <td style="width: 80px; text-align: right;">50 days SMA</td>\n                    <td style="width: 80px; text-align: right;">100 days SMA</td>\n                    <td style="width: 80px; text-align: right;">200 days SMA</td>\n                    <td style="width: 80px; text-align: right;">50 days EMA</td>\n                    <td style="width: 80px; text-align: right;">100 days EMA</td>\n                    <td style="width: 80px; text-align: right;">200 days EMA</td>\n                    <td style="width: 80px; text-align: right;">14 days average gains/losses</td>\n                    <td style="width: 80px; text-align: right;">14 days RSI</td>\n                    <td style="width: 80px; text-align: right;">open variation</td>\n                    <td style="width: 10px"></td>\n                    <td style="width: 80px; text-align: right;">1 day variation</td>\n                    <td style="width: 80px; text-align: right;">2 days variation</td>\n                    <td style="width: 80px; text-align: right;">3 days variation</td>\n                    <td>trade</td>\n                </tr>\n            </thead>\n            <tbody></tbody>\n        </table>');e.forEach((t=>{let e="";t.openVariation>100&&(e="<i style='color: green;' class='fas fa-arrow-up'></i>"),t.openVariation<100&&(e="<i style='color: red;' class='fas fa-arrow-down'></i>"),n.children("tbody").append(`\n                <tr>\n                    <td>${t.date.toISOString().split("T")[0]}</td>\n                    <td>${t.open.toFixed(4)}</td>\n                    <td>${t.high.toFixed(4)}</td>\n                    <td>${t.low.toFixed(4)}</td>\n                    <td>${t.close.toFixed(4)}</td>\n                    <td>${t.volume}</td>\n                    <td>${null===t.low52Weeks||void 0===t.low52Weeks?"":t.low52Weeks}</td>\n                    <td>${null===t.high52Weeks||null==t.high52Weeks?"":t.high52Weeks}</td>\n                    <td>${null===t.sma50Days||null==t.sma50Days?"":t.sma50Days.toFixed(4)}</td>\n                    <td>${null===t.sma100Days||null==t.sma100Days?"":t.sma100Days.toFixed(4)}</td>\n                    <td>${null===t.sma200Days||null==t.sma200Days?"":t.sma200Days.toFixed(4)}</td>\n                    <td>${null===t.ema50Days||null==t.ema50Days?"":t.ema50Days.toFixed(4)}</td>\n                    <td>${null===t.ema100Days||null==t.ema100Days?"":t.ema100Days.toFixed(4)}</td>\n                    <td>${null===t.ema200Days||null==t.ema200Days?"":t.ema200Days.toFixed(4)}</td>\n                    <td>\n                        ${null===t.averageGains14Days||null==t.averageGains14Days||0==t.averageGains14Days?"":"+"+t.averageGains14Days.toFixed(4)}\n                        ${null===t.averageLosses14Days||null==t.averageLosses14Days||0==t.averageLosses14Days?"":"-"+t.averageLosses14Days.toFixed(4)}\n                    </td>\n                    <td>${null===t.rsi14Days||null==t.rsi14Days?"":t.rsi14Days.toFixed(4)}</td>\n                    <td>${t.openVariation?t.openVariation.toFixed(4)+"%":""}</td>\n                    <td>${e}</td>\n                    <td>${t.oneDayVariation?t.oneDayVariation.toFixed(4)+"%":""}</td>\n                    <td>${t.twoDaysVariation?t.twoDaysVariation.toFixed(4)+"%":""}</td>\n                    <td>${t.threeDaysVariation?t.threeDaysVariation.toFixed(4)+"%":""}</td>\n                    <td style="text-align: left;">${t.trade?t.trade:""}</td>\n                </tr>`)})),t.append(n)}}function l(t,e){let n;if(void 0===e)for(const e of t)null!=e&&(n<e||void 0===n&&e>=e)&&(n=e);else{let r=-1;for(let i of t)null!=(i=e(i,++r,t))&&(n<i||void 0===n&&i>=i)&&(n=i)}return n}function c(t){return t}var h=1,f=2,p=3,d=4,y=1e-6;function g(t){return"translate("+t+",0)"}function v(t){return"translate(0,"+t+")"}function m(t){return e=>+t(e)}function x(t,e){return e=Math.max(0,t.bandwidth()-2*e)/2,t.round()&&(e=Math.round(e)),n=>+t(n)+e}function w(){return!this.__axis}function b(t,e){var n=[],r=null,i=null,o=6,a=6,s=3,u="undefined"!=typeof window&&window.devicePixelRatio>1?0:.5,l=t===h||t===d?-1:1,b=t===d||t===f?"x":"y",_=t===h||t===p?g:v;function T(g){var v=null==r?e.ticks?e.ticks.apply(e,n):e.domain():r,T=null==i?e.tickFormat?e.tickFormat.apply(e,n):c:i,A=Math.max(o,0)+s,D=e.range(),S=+D[0]+u,E=+D[D.length-1]+u,C=(e.bandwidth?x:m)(e.copy(),u),k=g.selection?g.selection():g,M=k.selectAll(".domain").data([null]),N=k.selectAll(".tick").data(v,e).order(),O=N.exit(),$=N.enter().append("g").attr("class","tick"),H=N.select("line"),L=N.select("text");M=M.merge(M.enter().insert("path",".tick").attr("class","domain").attr("stroke","currentColor")),N=N.merge($),H=H.merge($.append("line").attr("stroke","currentColor").attr(b+"2",l*o)),L=L.merge($.append("text").attr("fill","currentColor").attr(b,l*A).attr("dy",t===h?"0em":t===p?"0.71em":"0.32em")),g!==k&&(M=M.transition(g),N=N.transition(g),H=H.transition(g),L=L.transition(g),O=O.transition(g).attr("opacity",y).attr("transform",(function(t){return isFinite(t=C(t))?_(t+u):this.getAttribute("transform")})),$.attr("opacity",y).attr("transform",(function(t){var e=this.parentNode.__axis;return _((e&&isFinite(e=e(t))?e:C(t))+u)}))),O.remove(),M.attr("d",t===d||t===f?a?"M"+l*a+","+S+"H"+u+"V"+E+"H"+l*a:"M"+u+","+S+"V"+E:a?"M"+S+","+l*a+"V"+u+"H"+E+"V"+l*a:"M"+S+","+u+"H"+E),N.attr("opacity",1).attr("transform",(function(t){return _(C(t)+u)})),H.attr(b+"2",l*o),L.attr(b,l*A).text(T),k.filter(w).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===f?"start":t===d?"end":"middle"),k.each((function(){this.__axis=C}))}return T.scale=function(t){return arguments.length?(e=t,T):e},T.ticks=function(){return n=Array.from(arguments),T},T.tickArguments=function(t){return arguments.length?(n=null==t?[]:Array.from(t),T):n.slice()},T.tickValues=function(t){return arguments.length?(r=null==t?null:Array.from(t),T):r&&r.slice()},T.tickFormat=function(t){return arguments.length?(i=t,T):i},T.tickSize=function(t){return arguments.length?(o=a=+t,T):o},T.tickSizeInner=function(t){return arguments.length?(o=+t,T):o},T.tickSizeOuter=function(t){return arguments.length?(a=+t,T):a},T.tickPadding=function(t){return arguments.length?(s=+t,T):s},T.offset=function(t){return arguments.length?(u=+t,T):u},T}function _(){}function T(t){return null==t?_:function(){return this.querySelector(t)}}function A(){return[]}function D(t){return null==t?A:function(){return this.querySelectorAll(t)}}function S(t){return function(){return this.matches(t)}}function E(t){return function(e){return e.matches(t)}}var C=Array.prototype.find;function k(){return this.firstElementChild}var M=Array.prototype.filter;function N(){return Array.from(this.children)}function O(t){return new Array(t.length)}function $(t,e){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=e}function H(t,e,n,r,i,o){for(var a,s=0,u=e.length,l=o.length;s<l;++s)(a=e[s])?(a.__data__=o[s],r[s]=a):n[s]=new $(t,o[s]);for(;s<u;++s)(a=e[s])&&(i[s]=a)}function L(t,e,n,r,i,o,a){var s,u,l,c=new Map,h=e.length,f=o.length,p=new Array(h);for(s=0;s<h;++s)(u=e[s])&&(p[s]=l=a.call(u,u.__data__,s,e)+"",c.has(l)?i[s]=u:c.set(l,u));for(s=0;s<f;++s)l=a.call(t,o[s],s,o)+"",(u=c.get(l))?(r[s]=u,u.__data__=o[s],c.delete(l)):n[s]=new $(t,o[s]);for(s=0;s<h;++s)(u=e[s])&&c.get(p[s])===u&&(i[s]=u)}function I(t){return t.__data__}function j(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}function P(t,e){return t<e?-1:t>e?1:t>=e?0:NaN}$.prototype={constructor:$,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,e){return this._parent.insertBefore(t,e)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var R="http://www.w3.org/1999/xhtml";const U={svg:"http://www.w3.org/2000/svg",xhtml:R,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};function q(t){var e=t+="",n=e.indexOf(":");return n>=0&&"xmlns"!==(e=t.slice(0,n))&&(t=t.slice(n+1)),U.hasOwnProperty(e)?{space:U[e],local:t}:t}function F(t){return function(){this.removeAttribute(t)}}function Y(t){return function(){this.removeAttributeNS(t.space,t.local)}}function B(t,e){return function(){this.setAttribute(t,e)}}function W(t,e){return function(){this.setAttributeNS(t.space,t.local,e)}}function V(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttribute(t):this.setAttribute(t,n)}}function X(t,e){return function(){var n=e.apply(this,arguments);null==n?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,n)}}function G(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView}function z(t){return function(){this.style.removeProperty(t)}}function Q(t,e,n){return function(){this.style.setProperty(t,e,n)}}function Z(t,e,n){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,n)}}function J(t,e){return t.style.getPropertyValue(e)||G(t).getComputedStyle(t,null).getPropertyValue(e)}function K(t){return function(){delete this[t]}}function tt(t,e){return function(){this[t]=e}}function et(t,e){return function(){var n=e.apply(this,arguments);null==n?delete this[t]:this[t]=n}}function nt(t){return t.trim().split(/^|\s+/)}function rt(t){return t.classList||new it(t)}function it(t){this._node=t,this._names=nt(t.getAttribute("class")||"")}function ot(t,e){for(var n=rt(t),r=-1,i=e.length;++r<i;)n.add(e[r])}function at(t,e){for(var n=rt(t),r=-1,i=e.length;++r<i;)n.remove(e[r])}function st(t){return function(){ot(this,t)}}function ut(t){return function(){at(this,t)}}function lt(t,e){return function(){(e.apply(this,arguments)?ot:at)(this,t)}}function ct(){this.textContent=""}function ht(t){return function(){this.textContent=t}}function ft(t){return function(){var e=t.apply(this,arguments);this.textContent=null==e?"":e}}function pt(){this.innerHTML=""}function dt(t){return function(){this.innerHTML=t}}function yt(t){return function(){var e=t.apply(this,arguments);this.innerHTML=null==e?"":e}}function gt(){this.nextSibling&&this.parentNode.appendChild(this)}function vt(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function mt(t){return function(){var e=this.ownerDocument,n=this.namespaceURI;return n===R&&e.documentElement.namespaceURI===R?e.createElement(t):e.createElementNS(n,t)}}function xt(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function wt(t){var e=q(t);return(e.local?xt:mt)(e)}function bt(){return null}function _t(){var t=this.parentNode;t&&t.removeChild(this)}function Tt(){var t=this.cloneNode(!1),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function At(){var t=this.cloneNode(!0),e=this.parentNode;return e?e.insertBefore(t,this.nextSibling):t}function Dt(t){return function(){var e=this.__on;if(e){for(var n,r=0,i=-1,o=e.length;r<o;++r)n=e[r],t.type&&n.type!==t.type||n.name!==t.name?e[++i]=n:this.removeEventListener(n.type,n.listener,n.options);++i?e.length=i:delete this.__on}}}function St(t,e,n){return function(){var r,i=this.__on,o=function(t){return function(e){t.call(this,e,this.__data__)}}(e);if(i)for(var a=0,s=i.length;a<s;++a)if((r=i[a]).type===t.type&&r.name===t.name)return this.removeEventListener(r.type,r.listener,r.options),this.addEventListener(r.type,r.listener=o,r.options=n),void(r.value=e);this.addEventListener(t.type,o,n),r={type:t.type,name:t.name,value:e,listener:o,options:n},i?i.push(r):this.__on=[r]}}function Et(t,e,n){var r=G(t),i=r.CustomEvent;"function"==typeof i?i=new i(e,n):(i=r.document.createEvent("Event"),n?(i.initEvent(e,n.bubbles,n.cancelable),i.detail=n.detail):i.initEvent(e,!1,!1)),t.dispatchEvent(i)}function Ct(t,e){return function(){return Et(this,t,e)}}function kt(t,e){return function(){return Et(this,t,e.apply(this,arguments))}}it.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var e=this._names.indexOf(t);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Mt=[null];function Nt(t,e){this._groups=t,this._parents=e}function Ot(){return new Nt([[document.documentElement]],Mt)}Nt.prototype=Ot.prototype={constructor:Nt,select:function(t){"function"!=typeof t&&(t=T(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a,s=e[i],u=s.length,l=r[i]=new Array(u),c=0;c<u;++c)(o=s[c])&&(a=t.call(o,o.__data__,c,s))&&("__data__"in o&&(a.__data__=o.__data__),l[c]=a);return new Nt(r,this._parents)},selectAll:function(t){t="function"==typeof t?function(t){return function(){return null==(e=t.apply(this,arguments))?[]:Array.isArray(e)?e:Array.from(e);var e}}(t):D(t);for(var e=this._groups,n=e.length,r=[],i=[],o=0;o<n;++o)for(var a,s=e[o],u=s.length,l=0;l<u;++l)(a=s[l])&&(r.push(t.call(a,a.__data__,l,s)),i.push(a));return new Nt(r,i)},selectChild:function(t){return this.select(null==t?k:function(t){return function(){return C.call(this.children,t)}}("function"==typeof t?t:E(t)))},selectChildren:function(t){return this.selectAll(null==t?N:function(t){return function(){return M.call(this.children,t)}}("function"==typeof t?t:E(t)))},filter:function(t){"function"!=typeof t&&(t=S(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new Nt(r,this._parents)},data:function(t,e){if(!arguments.length)return Array.from(this,I);var n,r=e?L:H,i=this._parents,o=this._groups;"function"!=typeof t&&(n=t,t=function(){return n});for(var a=o.length,s=new Array(a),u=new Array(a),l=new Array(a),c=0;c<a;++c){var h=i[c],f=o[c],p=f.length,d=j(t.call(h,h&&h.__data__,c,i)),y=d.length,g=u[c]=new Array(y),v=s[c]=new Array(y);r(h,f,g,v,l[c]=new Array(p),d,e);for(var m,x,w=0,b=0;w<y;++w)if(m=g[w]){for(w>=b&&(b=w+1);!(x=v[b])&&++b<y;);m._next=x||null}}return(s=new Nt(s,i))._enter=u,s._exit=l,s},enter:function(){return new Nt(this._enter||this._groups.map(O),this._parents)},exit:function(){return new Nt(this._exit||this._groups.map(O),this._parents)},join:function(t,e,n){var r=this.enter(),i=this,o=this.exit();return"function"==typeof t?(r=t(r))&&(r=r.selection()):r=r.append(t+""),null!=e&&(i=e(i))&&(i=i.selection()),null==n?o.remove():n(o),r&&i?r.merge(i).order():i},merge:function(t){for(var e=t.selection?t.selection():t,n=this._groups,r=e._groups,i=n.length,o=r.length,a=Math.min(i,o),s=new Array(i),u=0;u<a;++u)for(var l,c=n[u],h=r[u],f=c.length,p=s[u]=new Array(f),d=0;d<f;++d)(l=c[d]||h[d])&&(p[d]=l);for(;u<i;++u)s[u]=n[u];return new Nt(s,this._parents)},selection:function(){return this},order:function(){for(var t=this._groups,e=-1,n=t.length;++e<n;)for(var r,i=t[e],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&4^r.compareDocumentPosition(a)&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(t){function e(e,n){return e&&n?t(e.__data__,n.__data__):!e-!n}t||(t=P);for(var n=this._groups,r=n.length,i=new Array(r),o=0;o<r;++o){for(var a,s=n[o],u=s.length,l=i[o]=new Array(u),c=0;c<u;++c)(a=s[c])&&(l[c]=a);l.sort(e)}return new Nt(i,this._parents).order()},call:function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},nodes:function(){return Array.from(this)},node:function(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r=t[e],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},size:function(){let t=0;for(const e of this)++t;return t},empty:function(){return!this.node()},each:function(t){for(var e=this._groups,n=0,r=e.length;n<r;++n)for(var i,o=e[n],a=0,s=o.length;a<s;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},attr:function(t,e){var n=q(t);if(arguments.length<2){var r=this.node();return n.local?r.getAttributeNS(n.space,n.local):r.getAttribute(n)}return this.each((null==e?n.local?Y:F:"function"==typeof e?n.local?X:V:n.local?W:B)(n,e))},style:function(t,e,n){return arguments.length>1?this.each((null==e?z:"function"==typeof e?Z:Q)(t,e,null==n?"":n)):J(this.node(),t)},property:function(t,e){return arguments.length>1?this.each((null==e?K:"function"==typeof e?et:tt)(t,e)):this.node()[t]},classed:function(t,e){var n=nt(t+"");if(arguments.length<2){for(var r=rt(this.node()),i=-1,o=n.length;++i<o;)if(!r.contains(n[i]))return!1;return!0}return this.each(("function"==typeof e?lt:e?st:ut)(n,e))},text:function(t){return arguments.length?this.each(null==t?ct:("function"==typeof t?ft:ht)(t)):this.node().textContent},html:function(t){return arguments.length?this.each(null==t?pt:("function"==typeof t?yt:dt)(t)):this.node().innerHTML},raise:function(){return this.each(gt)},lower:function(){return this.each(vt)},append:function(t){var e="function"==typeof t?t:wt(t);return this.select((function(){return this.appendChild(e.apply(this,arguments))}))},insert:function(t,e){var n="function"==typeof t?t:wt(t),r=null==e?bt:"function"==typeof e?e:T(e);return this.select((function(){return this.insertBefore(n.apply(this,arguments),r.apply(this,arguments)||null)}))},remove:function(){return this.each(_t)},clone:function(t){return this.select(t?At:Tt)},datum:function(t){return arguments.length?this.property("__data__",t):this.node().__data__},on:function(t,e,n){var r,i,o=function(t){return t.trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");return n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),{type:t,name:e}}))}(t+""),a=o.length;if(!(arguments.length<2)){for(s=e?St:Dt,r=0;r<a;++r)this.each(s(o[r],e,n));return this}var s=this.node().__on;if(s)for(var u,l=0,c=s.length;l<c;++l)for(r=0,u=s[l];r<a;++r)if((i=o[r]).type===u.type&&i.name===u.name)return u.value},dispatch:function(t,e){return this.each(("function"==typeof e?kt:Ct)(t,e))},[Symbol.iterator]:function*(){for(var t=this._groups,e=0,n=t.length;e<n;++e)for(var r,i=t[e],o=0,a=i.length;o<a;++o)(r=i[o])&&(yield r)}};const $t=Ot;var Ht={value:()=>{}};function Lt(){for(var t,e=0,n=arguments.length,r={};e<n;++e){if(!(t=arguments[e]+"")||t in r||/[\s.]/.test(t))throw new Error("illegal type: "+t);r[t]=[]}return new It(r)}function It(t){this._=t}function jt(t,e){for(var n,r=0,i=t.length;r<i;++r)if((n=t[r]).name===e)return n.value}function Pt(t,e,n){for(var r=0,i=t.length;r<i;++r)if(t[r].name===e){t[r]=Ht,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=n&&t.push({name:e,value:n}),t}It.prototype=Lt.prototype={constructor:It,on:function(t,e){var n,r,i=this._,o=(r=i,(t+"").trim().split(/^|\s+/).map((function(t){var e="",n=t.indexOf(".");if(n>=0&&(e=t.slice(n+1),t=t.slice(0,n)),t&&!r.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}}))),a=-1,s=o.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<s;)if(n=(t=o[a]).type)i[n]=Pt(i[n],t.name,e);else if(null==e)for(n in i)i[n]=Pt(i[n],t.name,null);return this}for(;++a<s;)if((n=(t=o[a]).type)&&(n=jt(i[n],t.name)))return n},copy:function(){var t={},e=this._;for(var n in e)t[n]=e[n].slice();return new It(t)},call:function(t,e){if((n=arguments.length-2)>0)for(var n,r,i=new Array(n),o=0;o<n;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,n=(r=this._[t]).length;o<n;++o)r[o].value.apply(e,i)},apply:function(t,e,n){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(e,n)}};const Rt=Lt;var Ut,qt,Ft=0,Yt=0,Bt=0,Wt=1e3,Vt=0,Xt=0,Gt=0,zt="object"==typeof performance&&performance.now?performance:Date,Qt="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(t){setTimeout(t,17)};function Zt(){return Xt||(Qt(Jt),Xt=zt.now()+Gt)}function Jt(){Xt=0}function Kt(){this._call=this._time=this._next=null}function te(t,e,n){var r=new Kt;return r.restart(t,e,n),r}function ee(){Xt=(Vt=zt.now())+Gt,Ft=Yt=0;try{!function(){Zt(),++Ft;for(var t,e=Ut;e;)(t=Xt-e._time)>=0&&e._call.call(void 0,t),e=e._next;--Ft}()}finally{Ft=0,function(){for(var t,e,n=Ut,r=1/0;n;)n._call?(r>n._time&&(r=n._time),t=n,n=n._next):(e=n._next,n._next=null,n=t?t._next=e:Ut=e);qt=t,re(r)}(),Xt=0}}function ne(){var t=zt.now(),e=t-Vt;e>Wt&&(Gt-=e,Vt=t)}function re(t){Ft||(Yt&&(Yt=clearTimeout(Yt)),t-Xt>24?(t<1/0&&(Yt=setTimeout(ee,t-zt.now()-Gt)),Bt&&(Bt=clearInterval(Bt))):(Bt||(Vt=zt.now(),Bt=setInterval(ne,Wt)),Ft=1,Qt(ee)))}function ie(t,e,n){var r=new Kt;return e=null==e?0:+e,r.restart((n=>{r.stop(),t(n+e)}),e,n),r}Kt.prototype=te.prototype={constructor:Kt,restart:function(t,e,n){if("function"!=typeof t)throw new TypeError("callback is not a function");n=(null==n?Zt():+n)+(null==e?0:+e),this._next||qt===this||(qt?qt._next=this:Ut=this,qt=this),this._call=t,this._time=n,re()},stop:function(){this._call&&(this._call=null,this._time=1/0,re())}};var oe=Rt("start","end","cancel","interrupt"),ae=[],se=0,ue=1,le=2,ce=3,he=4,fe=5,pe=6;function de(t,e,n,r,i,o){var a=t.__transition;if(a){if(n in a)return}else t.__transition={};!function(t,e,n){var r,i=t.__transition;function o(u){var l,c,h,f;if(n.state!==ue)return s();for(l in i)if((f=i[l]).name===n.name){if(f.state===ce)return ie(o);f.state===he?(f.state=pe,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete i[l]):+l<e&&(f.state=pe,f.timer.stop(),f.on.call("cancel",t,t.__data__,f.index,f.group),delete i[l])}if(ie((function(){n.state===ce&&(n.state=he,n.timer.restart(a,n.delay,n.time),a(u))})),n.state=le,n.on.call("start",t,t.__data__,n.index,n.group),n.state===le){for(n.state=ce,r=new Array(h=n.tween.length),l=0,c=-1;l<h;++l)(f=n.tween[l].value.call(t,t.__data__,n.index,n.group))&&(r[++c]=f);r.length=c+1}}function a(e){for(var i=e<n.duration?n.ease.call(null,e/n.duration):(n.timer.restart(s),n.state=fe,1),o=-1,a=r.length;++o<a;)r[o].call(t,i);n.state===fe&&(n.on.call("end",t,t.__data__,n.index,n.group),s())}function s(){for(var r in n.state=pe,n.timer.stop(),delete i[e],i)return;delete t.__transition}i[e]=n,n.timer=te((function(t){n.state=ue,n.timer.restart(o,n.delay,n.time),n.delay<=t&&o(t-n.delay)}),0,n.time)}(t,n,{name:e,index:r,group:i,on:oe,tween:ae,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:se})}function ye(t,e){var n=ve(t,e);if(n.state>se)throw new Error("too late; already scheduled");return n}function ge(t,e){var n=ve(t,e);if(n.state>ce)throw new Error("too late; already running");return n}function ve(t,e){var n=t.__transition;if(!n||!(n=n[e]))throw new Error("transition not found");return n}function me(t,e){return t=+t,e=+e,function(n){return t*(1-n)+e*n}}var xe,we=180/Math.PI,be={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1};function _e(t,e,n,r,i,o){var a,s,u;return(a=Math.sqrt(t*t+e*e))&&(t/=a,e/=a),(u=t*n+e*r)&&(n-=t*u,r-=e*u),(s=Math.sqrt(n*n+r*r))&&(n/=s,r/=s,u/=s),t*r<e*n&&(t=-t,e=-e,u=-u,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(e,t)*we,skewX:Math.atan(u)*we,scaleX:a,scaleY:s}}function Te(t,e,n,r){function i(t){return t.length?t.pop()+" ":""}return function(o,a){var s=[],u=[];return o=t(o),a=t(a),function(t,r,i,o,a,s){if(t!==i||r!==o){var u=a.push("translate(",null,e,null,n);s.push({i:u-4,x:me(t,i)},{i:u-2,x:me(r,o)})}else(i||o)&&a.push("translate("+i+e+o+n)}(o.translateX,o.translateY,a.translateX,a.translateY,s,u),function(t,e,n,o){t!==e?(t-e>180?e+=360:e-t>180&&(t+=360),o.push({i:n.push(i(n)+"rotate(",null,r)-2,x:me(t,e)})):e&&n.push(i(n)+"rotate("+e+r)}(o.rotate,a.rotate,s,u),function(t,e,n,o){t!==e?o.push({i:n.push(i(n)+"skewX(",null,r)-2,x:me(t,e)}):e&&n.push(i(n)+"skewX("+e+r)}(o.skewX,a.skewX,s,u),function(t,e,n,r,o,a){if(t!==n||e!==r){var s=o.push(i(o)+"scale(",null,",",null,")");a.push({i:s-4,x:me(t,n)},{i:s-2,x:me(e,r)})}else 1===n&&1===r||o.push(i(o)+"scale("+n+","+r+")")}(o.scaleX,o.scaleY,a.scaleX,a.scaleY,s,u),o=a=null,function(t){for(var e,n=-1,r=u.length;++n<r;)s[(e=u[n]).i]=e.x(t);return s.join("")}}}var Ae=Te((function(t){const e=new("function"==typeof DOMMatrix?DOMMatrix:WebKitCSSMatrix)(t+"");return e.isIdentity?be:_e(e.a,e.b,e.c,e.d,e.e,e.f)}),"px, ","px)","deg)"),De=Te((function(t){return null==t?be:(xe||(xe=document.createElementNS("http://www.w3.org/2000/svg","g")),xe.setAttribute("transform",t),(t=xe.transform.baseVal.consolidate())?_e((t=t.matrix).a,t.b,t.c,t.d,t.e,t.f):be)}),", ",")",")");function Se(t,e){var n,r;return function(){var i=ge(this,t),o=i.tween;if(o!==n)for(var a=0,s=(r=n=o).length;a<s;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}i.tween=r}}function Ee(t,e,n){var r,i;if("function"!=typeof n)throw new Error;return function(){var o=ge(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var s={name:e,value:n},u=0,l=i.length;u<l;++u)if(i[u].name===e){i[u]=s;break}u===l&&i.push(s)}o.tween=i}}function Ce(t,e,n){var r=t._id;return t.each((function(){var t=ge(this,r);(t.value||(t.value={}))[e]=n.apply(this,arguments)})),function(t){return ve(t,r).value[e]}}function ke(t,e,n){t.prototype=e.prototype=n,n.constructor=t}function Me(t,e){var n=Object.create(t.prototype);for(var r in e)n[r]=e[r];return n}function Ne(){}var Oe=.7,$e=1/Oe,He="\\s*([+-]?\\d+)\\s*",Le="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)\\s*",Ie="\\s*([+-]?(?:\\d*\\.)?\\d+(?:[eE][+-]?\\d+)?)%\\s*",je=/^#([0-9a-f]{3,8})$/,Pe=new RegExp(`^rgb\\(${He},${He},${He}\\)$`),Re=new RegExp(`^rgb\\(${Ie},${Ie},${Ie}\\)$`),Ue=new RegExp(`^rgba\\(${He},${He},${He},${Le}\\)$`),qe=new RegExp(`^rgba\\(${Ie},${Ie},${Ie},${Le}\\)$`),Fe=new RegExp(`^hsl\\(${Le},${Ie},${Ie}\\)$`),Ye=new RegExp(`^hsla\\(${Le},${Ie},${Ie},${Le}\\)$`),Be={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function We(){return this.rgb().formatHex()}function Ve(){return this.rgb().formatRgb()}function Xe(t){var e,n;return t=(t+"").trim().toLowerCase(),(e=je.exec(t))?(n=e[1].length,e=parseInt(e[1],16),6===n?Ge(e):3===n?new Ze(e>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):8===n?ze(e>>24&255,e>>16&255,e>>8&255,(255&e)/255):4===n?ze(e>>12&15|e>>8&240,e>>8&15|e>>4&240,e>>4&15|240&e,((15&e)<<4|15&e)/255):null):(e=Pe.exec(t))?new Ze(e[1],e[2],e[3],1):(e=Re.exec(t))?new Ze(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=Ue.exec(t))?ze(e[1],e[2],e[3],e[4]):(e=qe.exec(t))?ze(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=Fe.exec(t))?rn(e[1],e[2]/100,e[3]/100,1):(e=Ye.exec(t))?rn(e[1],e[2]/100,e[3]/100,e[4]):Be.hasOwnProperty(t)?Ge(Be[t]):"transparent"===t?new Ze(NaN,NaN,NaN,0):null}function Ge(t){return new Ze(t>>16&255,t>>8&255,255&t,1)}function ze(t,e,n,r){return r<=0&&(t=e=n=NaN),new Ze(t,e,n,r)}function Qe(t,e,n,r){return 1===arguments.length?((i=t)instanceof Ne||(i=Xe(i)),i?new Ze((i=i.rgb()).r,i.g,i.b,i.opacity):new Ze):new Ze(t,e,n,null==r?1:r);var i}function Ze(t,e,n,r){this.r=+t,this.g=+e,this.b=+n,this.opacity=+r}function Je(){return`#${nn(this.r)}${nn(this.g)}${nn(this.b)}`}function Ke(){const t=tn(this.opacity);return`${1===t?"rgb(":"rgba("}${en(this.r)}, ${en(this.g)}, ${en(this.b)}${1===t?")":`, ${t})`}`}function tn(t){return isNaN(t)?1:Math.max(0,Math.min(1,t))}function en(t){return Math.max(0,Math.min(255,Math.round(t)||0))}function nn(t){return((t=en(t))<16?"0":"")+t.toString(16)}function rn(t,e,n,r){return r<=0?t=e=n=NaN:n<=0||n>=1?t=e=NaN:e<=0&&(t=NaN),new an(t,e,n,r)}function on(t){if(t instanceof an)return new an(t.h,t.s,t.l,t.opacity);if(t instanceof Ne||(t=Xe(t)),!t)return new an;if(t instanceof an)return t;var e=(t=t.rgb()).r/255,n=t.g/255,r=t.b/255,i=Math.min(e,n,r),o=Math.max(e,n,r),a=NaN,s=o-i,u=(o+i)/2;return s?(a=e===o?(n-r)/s+6*(n<r):n===o?(r-e)/s+2:(e-n)/s+4,s/=u<.5?o+i:2-o-i,a*=60):s=u>0&&u<1?0:a,new an(a,s,u,t.opacity)}function an(t,e,n,r){this.h=+t,this.s=+e,this.l=+n,this.opacity=+r}function sn(t){return(t=(t||0)%360)<0?t+360:t}function un(t){return Math.max(0,Math.min(1,t||0))}function ln(t,e,n){return 255*(t<60?e+(n-e)*t/60:t<180?n:t<240?e+(n-e)*(240-t)/60:e)}function cn(t,e,n,r,i){var o=t*t,a=o*t;return((1-3*t+3*o-a)*e+(4-6*o+3*a)*n+(1+3*t+3*o-3*a)*r+a*i)/6}ke(Ne,Xe,{copy(t){return Object.assign(new this.constructor,this,t)},displayable(){return this.rgb().displayable()},hex:We,formatHex:We,formatHex8:function(){return this.rgb().formatHex8()},formatHsl:function(){return on(this).formatHsl()},formatRgb:Ve,toString:Ve}),ke(Ze,Qe,Me(Ne,{brighter(t){return t=null==t?$e:Math.pow($e,t),new Ze(this.r*t,this.g*t,this.b*t,this.opacity)},darker(t){return t=null==t?Oe:Math.pow(Oe,t),new Ze(this.r*t,this.g*t,this.b*t,this.opacity)},rgb(){return this},clamp(){return new Ze(en(this.r),en(this.g),en(this.b),tn(this.opacity))},displayable(){return-.5<=this.r&&this.r<255.5&&-.5<=this.g&&this.g<255.5&&-.5<=this.b&&this.b<255.5&&0<=this.opacity&&this.opacity<=1},hex:Je,formatHex:Je,formatHex8:function(){return`#${nn(this.r)}${nn(this.g)}${nn(this.b)}${nn(255*(isNaN(this.opacity)?1:this.opacity))}`},formatRgb:Ke,toString:Ke})),ke(an,(function(t,e,n,r){return 1===arguments.length?on(t):new an(t,e,n,null==r?1:r)}),Me(Ne,{brighter(t){return t=null==t?$e:Math.pow($e,t),new an(this.h,this.s,this.l*t,this.opacity)},darker(t){return t=null==t?Oe:Math.pow(Oe,t),new an(this.h,this.s,this.l*t,this.opacity)},rgb(){var t=this.h%360+360*(this.h<0),e=isNaN(t)||isNaN(this.s)?0:this.s,n=this.l,r=n+(n<.5?n:1-n)*e,i=2*n-r;return new Ze(ln(t>=240?t-240:t+120,i,r),ln(t,i,r),ln(t<120?t+240:t-120,i,r),this.opacity)},clamp(){return new an(sn(this.h),un(this.s),un(this.l),tn(this.opacity))},displayable(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1},formatHsl(){const t=tn(this.opacity);return`${1===t?"hsl(":"hsla("}${sn(this.h)}, ${100*un(this.s)}%, ${100*un(this.l)}%${1===t?")":`, ${t})`}`}}));const hn=t=>()=>t;function fn(t,e){var n=e-t;return n?function(t,e){return function(n){return t+n*e}}(t,n):hn(isNaN(t)?e:t)}const pn=function t(e){var n=function(t){return 1==(t=+t)?fn:function(e,n){return n-e?function(t,e,n){return t=Math.pow(t,n),e=Math.pow(e,n)-t,n=1/n,function(r){return Math.pow(t+r*e,n)}}(e,n,t):hn(isNaN(e)?n:e)}}(e);function r(t,e){var r=n((t=Qe(t)).r,(e=Qe(e)).r),i=n(t.g,e.g),o=n(t.b,e.b),a=fn(t.opacity,e.opacity);return function(e){return t.r=r(e),t.g=i(e),t.b=o(e),t.opacity=a(e),t+""}}return r.gamma=t,r}(1);function dn(t){return function(e){var n,r,i=e.length,o=new Array(i),a=new Array(i),s=new Array(i);for(n=0;n<i;++n)r=Qe(e[n]),o[n]=r.r||0,a[n]=r.g||0,s[n]=r.b||0;return o=t(o),a=t(a),s=t(s),r.opacity=1,function(t){return r.r=o(t),r.g=a(t),r.b=s(t),r+""}}}dn((function(t){var e=t.length-1;return function(n){var r=n<=0?n=0:n>=1?(n=1,e-1):Math.floor(n*e),i=t[r],o=t[r+1],a=r>0?t[r-1]:2*i-o,s=r<e-1?t[r+2]:2*o-i;return cn((n-r/e)*e,a,i,o,s)}})),dn((function(t){var e=t.length;return function(n){var r=Math.floor(((n%=1)<0?++n:n)*e),i=t[(r+e-1)%e],o=t[r%e],a=t[(r+1)%e],s=t[(r+2)%e];return cn((n-r/e)*e,i,o,a,s)}}));var yn=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,gn=new RegExp(yn.source,"g");function vn(t,e){var n,r,i,o=yn.lastIndex=gn.lastIndex=0,a=-1,s=[],u=[];for(t+="",e+="";(n=yn.exec(t))&&(r=gn.exec(e));)(i=r.index)>o&&(i=e.slice(o,i),s[a]?s[a]+=i:s[++a]=i),(n=n[0])===(r=r[0])?s[a]?s[a]+=r:s[++a]=r:(s[++a]=null,u.push({i:a,x:me(n,r)})),o=gn.lastIndex;return o<e.length&&(i=e.slice(o),s[a]?s[a]+=i:s[++a]=i),s.length<2?u[0]?function(t){return function(e){return t(e)+""}}(u[0].x):function(t){return function(){return t}}(e):(e=u.length,function(t){for(var n,r=0;r<e;++r)s[(n=u[r]).i]=n.x(t);return s.join("")})}function mn(t,e){var n;return("number"==typeof e?me:e instanceof Xe?pn:(n=Xe(e))?(e=n,pn):vn)(t,e)}function xn(t){return function(){this.removeAttribute(t)}}function wn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function bn(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttribute(t);return a===o?null:a===r?i:i=e(r=a,n)}}function _n(t,e,n){var r,i,o=n+"";return function(){var a=this.getAttributeNS(t.space,t.local);return a===o?null:a===r?i:i=e(r=a,n)}}function Tn(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttribute(t))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttribute(t)}}function An(t,e,n){var r,i,o;return function(){var a,s,u=n(this);if(null!=u)return(a=this.getAttributeNS(t.space,t.local))===(s=u+"")?null:a===r&&s===i?o:(i=s,o=e(r=a,u));this.removeAttributeNS(t.space,t.local)}}function Dn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttributeNS(t.space,t.local,e.call(this,n))}}(t,i)),n}return i._value=e,i}function Sn(t,e){var n,r;function i(){var i=e.apply(this,arguments);return i!==r&&(n=(r=i)&&function(t,e){return function(n){this.setAttribute(t,e.call(this,n))}}(t,i)),n}return i._value=e,i}function En(t,e){return function(){ye(this,t).delay=+e.apply(this,arguments)}}function Cn(t,e){return e=+e,function(){ye(this,t).delay=e}}function kn(t,e){return function(){ge(this,t).duration=+e.apply(this,arguments)}}function Mn(t,e){return e=+e,function(){ge(this,t).duration=e}}var Nn=$t.prototype.constructor;function On(t){return function(){this.style.removeProperty(t)}}var $n=0;function Hn(t,e,n,r){this._groups=t,this._parents=e,this._name=n,this._id=r}function Ln(){return++$n}var In=$t.prototype;Hn.prototype=function(t){return $t().transition(t)}.prototype={constructor:Hn,select:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=T(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var s,u,l=r[a],c=l.length,h=o[a]=new Array(c),f=0;f<c;++f)(s=l[f])&&(u=t.call(s,s.__data__,f,l))&&("__data__"in s&&(u.__data__=s.__data__),h[f]=u,de(h[f],e,n,f,h,ve(s,n)));return new Hn(o,this._parents,e,n)},selectAll:function(t){var e=this._name,n=this._id;"function"!=typeof t&&(t=D(t));for(var r=this._groups,i=r.length,o=[],a=[],s=0;s<i;++s)for(var u,l=r[s],c=l.length,h=0;h<c;++h)if(u=l[h]){for(var f,p=t.call(u,u.__data__,h,l),d=ve(u,n),y=0,g=p.length;y<g;++y)(f=p[y])&&de(f,e,n,y,p,d);o.push(p),a.push(u)}return new Hn(o,a,e,n)},selectChild:In.selectChild,selectChildren:In.selectChildren,filter:function(t){"function"!=typeof t&&(t=S(t));for(var e=this._groups,n=e.length,r=new Array(n),i=0;i<n;++i)for(var o,a=e[i],s=a.length,u=r[i]=[],l=0;l<s;++l)(o=a[l])&&t.call(o,o.__data__,l,a)&&u.push(o);return new Hn(r,this._parents,this._name,this._id)},merge:function(t){if(t._id!==this._id)throw new Error;for(var e=this._groups,n=t._groups,r=e.length,i=n.length,o=Math.min(r,i),a=new Array(r),s=0;s<o;++s)for(var u,l=e[s],c=n[s],h=l.length,f=a[s]=new Array(h),p=0;p<h;++p)(u=l[p]||c[p])&&(f[p]=u);for(;s<r;++s)a[s]=e[s];return new Hn(a,this._parents,this._name,this._id)},selection:function(){return new Nn(this._groups,this._parents)},transition:function(){for(var t=this._name,e=this._id,n=Ln(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)if(a=s[l]){var c=ve(a,e);de(a,t,n,l,s,{time:c.time+c.delay+c.duration,delay:0,duration:c.duration,ease:c.ease})}return new Hn(r,this._parents,t,n)},call:In.call,nodes:In.nodes,node:In.node,size:In.size,empty:In.empty,each:In.each,on:function(t,e){var n=this._id;return arguments.length<2?ve(this.node(),n).on.on(t):this.each(function(t,e,n){var r,i,o=function(t){return(t+"").trim().split(/^|\s+/).every((function(t){var e=t.indexOf(".");return e>=0&&(t=t.slice(0,e)),!t||"start"===t}))}(e)?ye:ge;return function(){var a=o(this,t),s=a.on;s!==r&&(i=(r=s).copy()).on(e,n),a.on=i}}(n,t,e))},attr:function(t,e){var n=q(t),r="transform"===n?De:mn;return this.attrTween(t,"function"==typeof e?(n.local?An:Tn)(n,r,Ce(this,"attr."+t,e)):null==e?(n.local?wn:xn)(n):(n.local?_n:bn)(n,r,e))},attrTween:function(t,e){var n="attr."+t;if(arguments.length<2)return(n=this.tween(n))&&n._value;if(null==e)return this.tween(n,null);if("function"!=typeof e)throw new Error;var r=q(t);return this.tween(n,(r.local?Dn:Sn)(r,e))},style:function(t,e,n){var r="transform"==(t+="")?Ae:mn;return null==e?this.styleTween(t,function(t,e){var n,r,i;return function(){var o=J(this,t),a=(this.style.removeProperty(t),J(this,t));return o===a?null:o===n&&a===r?i:i=e(n=o,r=a)}}(t,r)).on("end.style."+t,On(t)):"function"==typeof e?this.styleTween(t,function(t,e,n){var r,i,o;return function(){var a=J(this,t),s=n(this),u=s+"";return null==s&&(this.style.removeProperty(t),u=s=J(this,t)),a===u?null:a===r&&u===i?o:(i=u,o=e(r=a,s))}}(t,r,Ce(this,"style."+t,e))).each(function(t,e){var n,r,i,o,a="style."+e,s="end."+a;return function(){var u=ge(this,t),l=u.on,c=null==u.value[a]?o||(o=On(e)):void 0;l===n&&i===c||(r=(n=l).copy()).on(s,i=c),u.on=r}}(this._id,t)):this.styleTween(t,function(t,e,n){var r,i,o=n+"";return function(){var a=J(this,t);return a===o?null:a===r?i:i=e(r=a,n)}}(t,r,e),n).on("end.style."+t,null)},styleTween:function(t,e,n){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(t,e,n){var r,i;function o(){var o=e.apply(this,arguments);return o!==i&&(r=(i=o)&&function(t,e,n){return function(r){this.style.setProperty(t,e.call(this,r),n)}}(t,o,n)),r}return o._value=e,o}(t,e,null==n?"":n))},text:function(t){return this.tween("text","function"==typeof t?function(t){return function(){var e=t(this);this.textContent=null==e?"":e}}(Ce(this,"text",t)):function(t){return function(){this.textContent=t}}(null==t?"":t+""))},textTween:function(t){var e="text";if(arguments.length<1)return(e=this.tween(e))&&e._value;if(null==t)return this.tween(e,null);if("function"!=typeof t)throw new Error;return this.tween(e,function(t){var e,n;function r(){var r=t.apply(this,arguments);return r!==n&&(e=(n=r)&&function(t){return function(e){this.textContent=t.call(this,e)}}(r)),e}return r._value=t,r}(t))},remove:function(){return this.on("end.remove",function(t){return function(){var e=this.parentNode;for(var n in this.__transition)if(+n!==t)return;e&&e.removeChild(this)}}(this._id))},tween:function(t,e){var n=this._id;if(t+="",arguments.length<2){for(var r,i=ve(this.node(),n).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==e?Se:Ee)(n,t,e))},delay:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?En:Cn)(e,t)):ve(this.node(),e).delay},duration:function(t){var e=this._id;return arguments.length?this.each(("function"==typeof t?kn:Mn)(e,t)):ve(this.node(),e).duration},ease:function(t){var e=this._id;return arguments.length?this.each(function(t,e){if("function"!=typeof e)throw new Error;return function(){ge(this,t).ease=e}}(e,t)):ve(this.node(),e).ease},easeVarying:function(t){if("function"!=typeof t)throw new Error;return this.each(function(t,e){return function(){var n=e.apply(this,arguments);if("function"!=typeof n)throw new Error;ge(this,t).ease=n}}(this._id,t))},end:function(){var t,e,n=this,r=n._id,i=n.size();return new Promise((function(o,a){var s={value:a},u={value:function(){0==--i&&o()}};n.each((function(){var n=ge(this,r),i=n.on;i!==t&&((e=(t=i).copy())._.cancel.push(s),e._.interrupt.push(s),e._.end.push(u)),n.on=e})),0===i&&o()}))},[Symbol.iterator]:In[Symbol.iterator]};var jn={time:null,delay:0,duration:250,ease:function(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}};function Pn(t,e){for(var n;!(n=t.__transition)||!(n=n[e]);)if(!(t=t.parentNode))throw new Error(`transition ${e} not found`);return n}$t.prototype.interrupt=function(t){return this.each((function(){!function(t,e){var n,r,i,o=t.__transition,a=!0;if(o){for(i in e=null==e?null:e+"",o)(n=o[i]).name===e?(r=n.state>le&&n.state<fe,n.state=pe,n.timer.stop(),n.on.call(r?"interrupt":"cancel",t,t.__data__,n.index,n.group),delete o[i]):a=!1;a&&delete t.__transition}}(this,t)}))},$t.prototype.transition=function(t){var e,n;t instanceof Hn?(e=t._id,t=t._name):(e=Ln(),(n=jn).time=Zt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,s=r[o],u=s.length,l=0;l<u;++l)(a=s[l])&&de(a,t,e,l,s,n||Pn(a,e));return new Hn(r,this._parents,t,e)};const{abs:Rn,max:Un,min:qn}=Math;function Fn(t){return{type:t}}["w","e"].map(Fn),["n","s"].map(Fn),["n","w","e","s","nw","ne","sw","se"].map(Fn);const Yn=Math.sqrt(50),Bn=Math.sqrt(10),Wn=Math.sqrt(2);function Vn(t,e,n){const r=(e-t)/Math.max(0,n),i=Math.floor(Math.log10(r)),o=r/Math.pow(10,i),a=o>=Yn?10:o>=Bn?5:o>=Wn?2:1;let s,u,l;return i<0?(l=Math.pow(10,-i)/a,s=Math.round(t*l),u=Math.round(e*l),s/l<t&&++s,u/l>e&&--u,l=-l):(l=Math.pow(10,i)*a,s=Math.round(t/l),u=Math.round(e/l),s*l<t&&++s,u*l>e&&--u),u<s&&.5<=n&&n<2?Vn(t,e,2*n):[s,u,l]}function Xn(t,e,n){return Vn(t=+t,e=+e,n=+n)[2]}function Gn(t,e,n){n=+n;const r=(e=+e)<(t=+t),i=r?Xn(e,t,n):Xn(t,e,n);return(r?-1:1)*(i<0?1/-i:i)}function zn(t,e){return null==t||null==e?NaN:t<e?-1:t>e?1:t>=e?0:NaN}function Qn(t,e){return null==t||null==e?NaN:e<t?-1:e>t?1:e>=t?0:NaN}function Zn(t){let e,n,r;function i(t,r,i=0,o=t.length){if(i<o){if(0!==e(r,r))return o;do{const e=i+o>>>1;n(t[e],r)<0?i=e+1:o=e}while(i<o)}return i}return 2!==t.length?(e=zn,n=(e,n)=>zn(t(e),n),r=(e,n)=>t(e)-n):(e=t===zn||t===Qn?t:Jn,n=t,r=t),{left:i,center:function(t,e,n=0,o=t.length){const a=i(t,e,n,o-1);return a>n&&r(t[a-1],e)>-r(t[a],e)?a-1:a},right:function(t,r,i=0,o=t.length){if(i<o){if(0!==e(r,r))return o;do{const e=i+o>>>1;n(t[e],r)<=0?i=e+1:o=e}while(i<o)}return i}}}function Jn(){return 0}const Kn=Zn(zn),tr=Kn.right,er=(Kn.left,Zn((function(t){return null===t?NaN:+t})).center,tr);function nr(t,e){var n,r=e?e.length:0,i=t?Math.min(r,t.length):0,o=new Array(i),a=new Array(r);for(n=0;n<i;++n)o[n]=ar(t[n],e[n]);for(;n<r;++n)a[n]=e[n];return function(t){for(n=0;n<i;++n)a[n]=o[n](t);return a}}function rr(t,e){var n=new Date;return t=+t,e=+e,function(r){return n.setTime(t*(1-r)+e*r),n}}function ir(t,e){var n,r={},i={};for(n in null!==t&&"object"==typeof t||(t={}),null!==e&&"object"==typeof e||(e={}),e)n in t?r[n]=ar(t[n],e[n]):i[n]=e[n];return function(t){for(n in r)i[n]=r[n](t);return i}}function or(t,e){e||(e=[]);var n,r=t?Math.min(e.length,t.length):0,i=e.slice();return function(o){for(n=0;n<r;++n)i[n]=t[n]*(1-o)+e[n]*o;return i}}function ar(t,e){var n,r,i=typeof e;return null==e||"boolean"===i?hn(e):("number"===i?me:"string"===i?(n=Xe(e))?(e=n,pn):vn:e instanceof Xe?pn:e instanceof Date?rr:(r=e,!ArrayBuffer.isView(r)||r instanceof DataView?Array.isArray(e)?nr:"function"!=typeof e.valueOf&&"function"!=typeof e.toString||isNaN(e)?ir:me:or))(t,e)}function sr(t,e){return t=+t,e=+e,function(n){return Math.round(t*(1-n)+e*n)}}function ur(t){return+t}var lr=[0,1];function cr(t){return t}function hr(t,e){return(e-=t=+t)?function(n){return(n-t)/e}:(n=isNaN(e)?NaN:.5,function(){return n});var n}function fr(t,e,n){var r=t[0],i=t[1],o=e[0],a=e[1];return i<r?(r=hr(i,r),o=n(a,o)):(r=hr(r,i),o=n(o,a)),function(t){return o(r(t))}}function pr(t,e,n){var r=Math.min(t.length,e.length)-1,i=new Array(r),o=new Array(r),a=-1;for(t[r]<t[0]&&(t=t.slice().reverse(),e=e.slice().reverse());++a<r;)i[a]=hr(t[a],t[a+1]),o[a]=n(e[a],e[a+1]);return function(e){var n=er(t,e,1,r)-1;return o[n](i[n](e))}}function dr(t,e){return e.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp()).unknown(t.unknown())}function yr(){return function(){var t,e,n,r,i,o,a=lr,s=lr,u=ar,l=cr;function c(){var t,e,n,u=Math.min(a.length,s.length);return l!==cr&&(t=a[0],e=a[u-1],t>e&&(n=t,t=e,e=n),l=function(n){return Math.max(t,Math.min(e,n))}),r=u>2?pr:fr,i=o=null,h}function h(e){return null==e||isNaN(e=+e)?n:(i||(i=r(a.map(t),s,u)))(t(l(e)))}return h.invert=function(n){return l(e((o||(o=r(s,a.map(t),me)))(n)))},h.domain=function(t){return arguments.length?(a=Array.from(t,ur),c()):a.slice()},h.range=function(t){return arguments.length?(s=Array.from(t),c()):s.slice()},h.rangeRound=function(t){return s=Array.from(t),u=sr,c()},h.clamp=function(t){return arguments.length?(l=!!t||cr,c()):l!==cr},h.interpolate=function(t){return arguments.length?(u=t,c()):u},h.unknown=function(t){return arguments.length?(n=t,h):n},function(n,r){return t=n,e=r,c()}}()(cr,cr)}function gr(t,e){switch(arguments.length){case 0:break;case 1:this.range(t);break;default:this.range(e).domain(t)}return this}var vr,mr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function xr(t){if(!(e=mr.exec(t)))throw new Error("invalid format: "+t);var e;return new wr({fill:e[1],align:e[2],sign:e[3],symbol:e[4],zero:e[5],width:e[6],comma:e[7],precision:e[8]&&e[8].slice(1),trim:e[9],type:e[10]})}function wr(t){this.fill=void 0===t.fill?" ":t.fill+"",this.align=void 0===t.align?">":t.align+"",this.sign=void 0===t.sign?"-":t.sign+"",this.symbol=void 0===t.symbol?"":t.symbol+"",this.zero=!!t.zero,this.width=void 0===t.width?void 0:+t.width,this.comma=!!t.comma,this.precision=void 0===t.precision?void 0:+t.precision,this.trim=!!t.trim,this.type=void 0===t.type?"":t.type+""}function br(t,e){if((n=(t=e?t.toExponential(e-1):t.toExponential()).indexOf("e"))<0)return null;var n,r=t.slice(0,n);return[r.length>1?r[0]+r.slice(2):r,+t.slice(n+1)]}function _r(t){return(t=br(Math.abs(t)))?t[1]:NaN}function Tr(t,e){var n=br(t,e);if(!n)return t+"";var r=n[0],i=n[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")}xr.prototype=wr.prototype,wr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(void 0===this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(void 0===this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};const Ar={"%":(t,e)=>(100*t).toFixed(e),b:t=>Math.round(t).toString(2),c:t=>t+"",d:function(t){return Math.abs(t=Math.round(t))>=1e21?t.toLocaleString("en").replace(/,/g,""):t.toString(10)},e:(t,e)=>t.toExponential(e),f:(t,e)=>t.toFixed(e),g:(t,e)=>t.toPrecision(e),o:t=>Math.round(t).toString(8),p:(t,e)=>Tr(100*t,e),r:Tr,s:function(t,e){var n=br(t,e);if(!n)return t+"";var r=n[0],i=n[1],o=i-(vr=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+br(t,Math.max(0,e+o-1))[0]},X:t=>Math.round(t).toString(16).toUpperCase(),x:t=>Math.round(t).toString(16)};function Dr(t){return t}var Sr,Er,Cr,kr=Array.prototype.map,Mr=["y","z","a","f","p","n","Âµ","m","","k","M","G","T","P","E","Z","Y"];function Nr(t){var e=t.domain;return t.ticks=function(t){var n=e();return function(t,e,n){if(!((n=+n)>0))return[];if((t=+t)==(e=+e))return[t];const r=e<t,[i,o,a]=r?Vn(e,t,n):Vn(t,e,n);if(!(o>=i))return[];const s=o-i+1,u=new Array(s);if(r)if(a<0)for(let t=0;t<s;++t)u[t]=(o-t)/-a;else for(let t=0;t<s;++t)u[t]=(o-t)*a;else if(a<0)for(let t=0;t<s;++t)u[t]=(i+t)/-a;else for(let t=0;t<s;++t)u[t]=(i+t)*a;return u}(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){var r=e();return function(t,e,n,r){var i,o=Gn(t,e,n);switch((r=xr(null==r?",f":r)).type){case"s":var a=Math.max(Math.abs(t),Math.abs(e));return null!=r.precision||isNaN(i=function(t,e){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(_r(e)/3)))-_r(Math.abs(t)))}(o,a))||(r.precision=i),Cr(r,a);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=function(t,e){return t=Math.abs(t),e=Math.abs(e)-t,Math.max(0,_r(e)-_r(t))+1}(o,Math.max(Math.abs(t),Math.abs(e))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=function(t){return Math.max(0,-_r(Math.abs(t)))}(o))||(r.precision=i-2*("%"===r.type))}return Er(r)}(r[0],r[r.length-1],null==t?10:t,n)},t.nice=function(n){null==n&&(n=10);var r,i,o=e(),a=0,s=o.length-1,u=o[a],l=o[s],c=10;for(l<u&&(i=u,u=l,l=i,i=a,a=s,s=i);c-- >0;){if((i=Xn(u,l,n))===r)return o[a]=u,o[s]=l,e(o);if(i>0)u=Math.floor(u/i)*i,l=Math.ceil(l/i)*i;else{if(!(i<0))break;u=Math.ceil(u*i)/i,l=Math.floor(l*i)/i}r=i}return t},t}function Or(){var t=yr();return t.copy=function(){return dr(t,Or())},gr.apply(t,arguments),Nr(t)}Sr=function(t){var e,n,r=void 0===t.grouping||void 0===t.thousands?Dr:(e=kr.call(t.grouping,Number),n=t.thousands+"",function(t,r){for(var i=t.length,o=[],a=0,s=e[0],u=0;i>0&&s>0&&(u+s+1>r&&(s=Math.max(1,r-u)),o.push(t.substring(i-=s,i+s)),!((u+=s+1)>r));)s=e[a=(a+1)%e.length];return o.reverse().join(n)}),i=void 0===t.currency?"":t.currency[0]+"",o=void 0===t.currency?"":t.currency[1]+"",a=void 0===t.decimal?".":t.decimal+"",s=void 0===t.numerals?Dr:function(t){return function(e){return e.replace(/[0-9]/g,(function(e){return t[+e]}))}}(kr.call(t.numerals,String)),u=void 0===t.percent?"%":t.percent+"",l=void 0===t.minus?"â":t.minus+"",c=void 0===t.nan?"NaN":t.nan+"";function h(t){var e=(t=xr(t)).fill,n=t.align,h=t.sign,f=t.symbol,p=t.zero,d=t.width,y=t.comma,g=t.precision,v=t.trim,m=t.type;"n"===m?(y=!0,m="g"):Ar[m]||(void 0===g&&(g=12),v=!0,m="g"),(p||"0"===e&&"="===n)&&(p=!0,e="0",n="=");var x="$"===f?i:"#"===f&&/[boxX]/.test(m)?"0"+m.toLowerCase():"",w="$"===f?o:/[%p]/.test(m)?u:"",b=Ar[m],_=/[defgprs%]/.test(m);function T(t){var i,o,u,f=x,T=w;if("c"===m)T=b(t)+T,t="";else{var A=(t=+t)<0||1/t<0;if(t=isNaN(t)?c:b(Math.abs(t),g),v&&(t=function(t){t:for(var e,n=t.length,r=1,i=-1;r<n;++r)switch(t[r]){case".":i=e=r;break;case"0":0===i&&(i=r),e=r;break;default:if(!+t[r])break t;i>0&&(i=0)}return i>0?t.slice(0,i)+t.slice(e+1):t}(t)),A&&0==+t&&"+"!==h&&(A=!1),f=(A?"("===h?h:l:"-"===h||"("===h?"":h)+f,T=("s"===m?Mr[8+vr/3]:"")+T+(A&&"("===h?")":""),_)for(i=-1,o=t.length;++i<o;)if(48>(u=t.charCodeAt(i))||u>57){T=(46===u?a+t.slice(i+1):t.slice(i))+T,t=t.slice(0,i);break}}y&&!p&&(t=r(t,1/0));var D=f.length+t.length+T.length,S=D<d?new Array(d-D+1).join(e):"";switch(y&&p&&(t=r(S+t,S.length?d-T.length:1/0),S=""),n){case"<":t=f+t+T+S;break;case"=":t=f+S+t+T;break;case"^":t=S.slice(0,D=S.length>>1)+f+t+T+S.slice(D);break;default:t=S+f+t+T}return s(t)}return g=void 0===g?6:/[gprs]/.test(m)?Math.max(1,Math.min(21,g)):Math.max(0,Math.min(20,g)),T.toString=function(){return t+""},T}return{format:h,formatPrefix:function(t,e){var n=h(((t=xr(t)).type="f",t)),r=3*Math.max(-8,Math.min(8,Math.floor(_r(e)/3))),i=Math.pow(10,-r),o=Mr[8+r/3];return function(t){return n(i*t)+o}}}}({thousands:",",grouping:[3],currency:["$",""]}),Er=Sr.format,Cr=Sr.formatPrefix;const $r=1e3,Hr=60*$r,Lr=60*Hr,Ir=24*Lr,jr=7*Ir,Pr=30*Ir,Rr=365*Ir,Ur=new Date,qr=new Date;function Fr(t,e,n,r){function i(e){return t(e=0===arguments.length?new Date:new Date(+e)),e}return i.floor=e=>(t(e=new Date(+e)),e),i.ceil=n=>(t(n=new Date(n-1)),e(n,1),t(n),n),i.round=t=>{const e=i(t),n=i.ceil(t);return t-e<n-t?e:n},i.offset=(t,n)=>(e(t=new Date(+t),null==n?1:Math.floor(n)),t),i.range=(n,r,o)=>{const a=[];if(n=i.ceil(n),o=null==o?1:Math.floor(o),!(n<r&&o>0))return a;let s;do{a.push(s=new Date(+n)),e(n,o),t(n)}while(s<n&&n<r);return a},i.filter=n=>Fr((e=>{if(e>=e)for(;t(e),!n(e);)e.setTime(e-1)}),((t,r)=>{if(t>=t)if(r<0)for(;++r<=0;)for(;e(t,-1),!n(t););else for(;--r>=0;)for(;e(t,1),!n(t););})),n&&(i.count=(e,r)=>(Ur.setTime(+e),qr.setTime(+r),t(Ur),t(qr),Math.floor(n(Ur,qr))),i.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?e=>r(e)%t==0:e=>i.count(0,e)%t==0):i:null)),i}const Yr=Fr((()=>{}),((t,e)=>{t.setTime(+t+e)}),((t,e)=>e-t));Yr.every=t=>(t=Math.floor(t),isFinite(t)&&t>0?t>1?Fr((e=>{e.setTime(Math.floor(e/t)*t)}),((e,n)=>{e.setTime(+e+n*t)}),((e,n)=>(n-e)/t)):Yr:null),Yr.range;const Br=Fr((t=>{t.setTime(t-t.getMilliseconds())}),((t,e)=>{t.setTime(+t+e*$r)}),((t,e)=>(e-t)/$r),(t=>t.getUTCSeconds())),Wr=(Br.range,Fr((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*$r)}),((t,e)=>{t.setTime(+t+e*Hr)}),((t,e)=>(e-t)/Hr),(t=>t.getMinutes()))),Vr=(Wr.range,Fr((t=>{t.setUTCSeconds(0,0)}),((t,e)=>{t.setTime(+t+e*Hr)}),((t,e)=>(e-t)/Hr),(t=>t.getUTCMinutes()))),Xr=(Vr.range,Fr((t=>{t.setTime(t-t.getMilliseconds()-t.getSeconds()*$r-t.getMinutes()*Hr)}),((t,e)=>{t.setTime(+t+e*Lr)}),((t,e)=>(e-t)/Lr),(t=>t.getHours()))),Gr=(Xr.range,Fr((t=>{t.setUTCMinutes(0,0,0)}),((t,e)=>{t.setTime(+t+e*Lr)}),((t,e)=>(e-t)/Lr),(t=>t.getUTCHours()))),zr=(Gr.range,Fr((t=>t.setHours(0,0,0,0)),((t,e)=>t.setDate(t.getDate()+e)),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Hr)/Ir),(t=>t.getDate()-1))),Qr=(zr.range,Fr((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/Ir),(t=>t.getUTCDate()-1))),Zr=(Qr.range,Fr((t=>{t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+e)}),((t,e)=>(e-t)/Ir),(t=>Math.floor(t/Ir))));function Jr(t){return Fr((e=>{e.setDate(e.getDate()-(e.getDay()+7-t)%7),e.setHours(0,0,0,0)}),((t,e)=>{t.setDate(t.getDate()+7*e)}),((t,e)=>(e-t-(e.getTimezoneOffset()-t.getTimezoneOffset())*Hr)/jr))}Zr.range;const Kr=Jr(0),ti=Jr(1),ei=Jr(2),ni=Jr(3),ri=Jr(4),ii=Jr(5),oi=Jr(6);function ai(t){return Fr((e=>{e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-t)%7),e.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCDate(t.getUTCDate()+7*e)}),((t,e)=>(e-t)/jr))}Kr.range,ti.range,ei.range,ni.range,ri.range,ii.range,oi.range;const si=ai(0),ui=ai(1),li=ai(2),ci=ai(3),hi=ai(4),fi=ai(5),pi=ai(6),di=(si.range,ui.range,li.range,ci.range,hi.range,fi.range,pi.range,Fr((t=>{t.setDate(1),t.setHours(0,0,0,0)}),((t,e)=>{t.setMonth(t.getMonth()+e)}),((t,e)=>e.getMonth()-t.getMonth()+12*(e.getFullYear()-t.getFullYear())),(t=>t.getMonth()))),yi=(di.range,Fr((t=>{t.setUTCDate(1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCMonth(t.getUTCMonth()+e)}),((t,e)=>e.getUTCMonth()-t.getUTCMonth()+12*(e.getUTCFullYear()-t.getUTCFullYear())),(t=>t.getUTCMonth()))),gi=(yi.range,Fr((t=>{t.setMonth(0,1),t.setHours(0,0,0,0)}),((t,e)=>{t.setFullYear(t.getFullYear()+e)}),((t,e)=>e.getFullYear()-t.getFullYear()),(t=>t.getFullYear())));gi.every=t=>isFinite(t=Math.floor(t))&&t>0?Fr((e=>{e.setFullYear(Math.floor(e.getFullYear()/t)*t),e.setMonth(0,1),e.setHours(0,0,0,0)}),((e,n)=>{e.setFullYear(e.getFullYear()+n*t)})):null,gi.range;const vi=Fr((t=>{t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)}),((t,e)=>{t.setUTCFullYear(t.getUTCFullYear()+e)}),((t,e)=>e.getUTCFullYear()-t.getUTCFullYear()),(t=>t.getUTCFullYear()));function mi(t,e,n,r,i,o){const a=[[Br,1,$r],[Br,5,5*$r],[Br,15,15*$r],[Br,30,30*$r],[o,1,Hr],[o,5,5*Hr],[o,15,15*Hr],[o,30,30*Hr],[i,1,Lr],[i,3,3*Lr],[i,6,6*Lr],[i,12,12*Lr],[r,1,Ir],[r,2,2*Ir],[n,1,jr],[e,1,Pr],[e,3,3*Pr],[t,1,Rr]];function s(e,n,r){const i=Math.abs(n-e)/r,o=Zn((([,,t])=>t)).right(a,i);if(o===a.length)return t.every(Gn(e/Rr,n/Rr,r));if(0===o)return Yr.every(Math.max(Gn(e,n,r),1));const[s,u]=a[i/a[o-1][2]<a[o][2]/i?o-1:o];return s.every(u)}return[function(t,e,n){const r=e<t;r&&([t,e]=[e,t]);const i=n&&"function"==typeof n.range?n:s(t,e,n),o=i?i.range(t,+e+1):[];return r?o.reverse():o},s]}vi.every=t=>isFinite(t=Math.floor(t))&&t>0?Fr((e=>{e.setUTCFullYear(Math.floor(e.getUTCFullYear()/t)*t),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)}),((e,n)=>{e.setUTCFullYear(e.getUTCFullYear()+n*t)})):null,vi.range;const[xi,wi]=mi(vi,yi,si,Zr,Gr,Vr),[bi,_i]=mi(gi,di,Kr,zr,Xr,Wr);function Ti(t){if(0<=t.y&&t.y<100){var e=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return e.setFullYear(t.y),e}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ai(t){if(0<=t.y&&t.y<100){var e=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return e.setUTCFullYear(t.y),e}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Di(t,e,n){return{y:t,m:e,d:n,H:0,M:0,S:0,L:0}}var Si,Ei,Ci={"-":"",_:" ",0:"0"},ki=/^\s*\d+/,Mi=/^%/,Ni=/[\\^$*+?|[\]().{}]/g;function Oi(t,e,n){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<n?new Array(n-o+1).join(e)+i:i)}function $i(t){return t.replace(Ni,"\\$&")}function Hi(t){return new RegExp("^(?:"+t.map($i).join("|")+")","i")}function Li(t){return new Map(t.map(((t,e)=>[t.toLowerCase(),e])))}function Ii(t,e,n){var r=ki.exec(e.slice(n,n+1));return r?(t.w=+r[0],n+r[0].length):-1}function ji(t,e,n){var r=ki.exec(e.slice(n,n+1));return r?(t.u=+r[0],n+r[0].length):-1}function Pi(t,e,n){var r=ki.exec(e.slice(n,n+2));return r?(t.U=+r[0],n+r[0].length):-1}function Ri(t,e,n){var r=ki.exec(e.slice(n,n+2));return r?(t.V=+r[0],n+r[0].length):-1}function Ui(t,e,n){var r=ki.exec(e.slice(n,n+2));return r?(t.W=+r[0],n+r[0].length):-1}function qi(t,e,n){var r=ki.exec(e.slice(n,n+4));return r?(t.y=+r[0],n+r[0].length):-1}function Fi(t,e,n){var r=ki.exec(e.slice(n,n+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),n+r[0].length):-1}function Yi(t,e,n){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(n,n+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),n+r[0].length):-1}function Bi(t,e,n){var r=ki.exec(e.slice(n,n+1));return r?(t.q=3*r[0]-3,n+r[0].length):-1}function Wi(t,e,n){var r=ki.exec(e.slice(n,n+2));return r?(t.m=r[0]-1,n+r[0].length):-1}function Vi(t,e,n){var r=ki.exec(e.slice(n,n+2));return r?(t.d=+r[0],n+r[0].length):-1}function Xi(t,e,n){var r=ki.exec(e.slice(n,n+3));return r?(t.m=0,t.d=+r[0],n+r[0].length):-1}function Gi(t,e,n){var r=ki.exec(e.slice(n,n+2));return r?(t.H=+r[0],n+r[0].length):-1}function zi(t,e,n){var r=ki.exec(e.slice(n,n+2));return r?(t.M=+r[0],n+r[0].length):-1}function Qi(t,e,n){var r=ki.exec(e.slice(n,n+2));return r?(t.S=+r[0],n+r[0].length):-1}function Zi(t,e,n){var r=ki.exec(e.slice(n,n+3));return r?(t.L=+r[0],n+r[0].length):-1}function Ji(t,e,n){var r=ki.exec(e.slice(n,n+6));return r?(t.L=Math.floor(r[0]/1e3),n+r[0].length):-1}function Ki(t,e,n){var r=Mi.exec(e.slice(n,n+1));return r?n+r[0].length:-1}function to(t,e,n){var r=ki.exec(e.slice(n));return r?(t.Q=+r[0],n+r[0].length):-1}function eo(t,e,n){var r=ki.exec(e.slice(n));return r?(t.s=+r[0],n+r[0].length):-1}function no(t,e){return Oi(t.getDate(),e,2)}function ro(t,e){return Oi(t.getHours(),e,2)}function io(t,e){return Oi(t.getHours()%12||12,e,2)}function oo(t,e){return Oi(1+zr.count(gi(t),t),e,3)}function ao(t,e){return Oi(t.getMilliseconds(),e,3)}function so(t,e){return ao(t,e)+"000"}function uo(t,e){return Oi(t.getMonth()+1,e,2)}function lo(t,e){return Oi(t.getMinutes(),e,2)}function co(t,e){return Oi(t.getSeconds(),e,2)}function ho(t){var e=t.getDay();return 0===e?7:e}function fo(t,e){return Oi(Kr.count(gi(t)-1,t),e,2)}function po(t){var e=t.getDay();return e>=4||0===e?ri(t):ri.ceil(t)}function yo(t,e){return t=po(t),Oi(ri.count(gi(t),t)+(4===gi(t).getDay()),e,2)}function go(t){return t.getDay()}function vo(t,e){return Oi(ti.count(gi(t)-1,t),e,2)}function mo(t,e){return Oi(t.getFullYear()%100,e,2)}function xo(t,e){return Oi((t=po(t)).getFullYear()%100,e,2)}function wo(t,e){return Oi(t.getFullYear()%1e4,e,4)}function bo(t,e){var n=t.getDay();return Oi((t=n>=4||0===n?ri(t):ri.ceil(t)).getFullYear()%1e4,e,4)}function _o(t){var e=t.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Oi(e/60|0,"0",2)+Oi(e%60,"0",2)}function To(t,e){return Oi(t.getUTCDate(),e,2)}function Ao(t,e){return Oi(t.getUTCHours(),e,2)}function Do(t,e){return Oi(t.getUTCHours()%12||12,e,2)}function So(t,e){return Oi(1+Qr.count(vi(t),t),e,3)}function Eo(t,e){return Oi(t.getUTCMilliseconds(),e,3)}function Co(t,e){return Eo(t,e)+"000"}function ko(t,e){return Oi(t.getUTCMonth()+1,e,2)}function Mo(t,e){return Oi(t.getUTCMinutes(),e,2)}function No(t,e){return Oi(t.getUTCSeconds(),e,2)}function Oo(t){var e=t.getUTCDay();return 0===e?7:e}function $o(t,e){return Oi(si.count(vi(t)-1,t),e,2)}function Ho(t){var e=t.getUTCDay();return e>=4||0===e?hi(t):hi.ceil(t)}function Lo(t,e){return t=Ho(t),Oi(hi.count(vi(t),t)+(4===vi(t).getUTCDay()),e,2)}function Io(t){return t.getUTCDay()}function jo(t,e){return Oi(ui.count(vi(t)-1,t),e,2)}function Po(t,e){return Oi(t.getUTCFullYear()%100,e,2)}function Ro(t,e){return Oi((t=Ho(t)).getUTCFullYear()%100,e,2)}function Uo(t,e){return Oi(t.getUTCFullYear()%1e4,e,4)}function qo(t,e){var n=t.getUTCDay();return Oi((t=n>=4||0===n?hi(t):hi.ceil(t)).getUTCFullYear()%1e4,e,4)}function Fo(){return"+0000"}function Yo(){return"%"}function Bo(t){return+t}function Wo(t){return Math.floor(+t/1e3)}function Vo(t){return new Date(t)}function Xo(t){return t instanceof Date?+t:+new Date(+t)}function Go(t,e,n,r,i,o,a,s,u,l){var c=yr(),h=c.invert,f=c.domain,p=l(".%L"),d=l(":%S"),y=l("%I:%M"),g=l("%I %p"),v=l("%a %d"),m=l("%b %d"),x=l("%B"),w=l("%Y");function b(t){return(u(t)<t?p:s(t)<t?d:a(t)<t?y:o(t)<t?g:r(t)<t?i(t)<t?v:m:n(t)<t?x:w)(t)}return c.invert=function(t){return new Date(h(t))},c.domain=function(t){return arguments.length?f(Array.from(t,Xo)):f().map(Vo)},c.ticks=function(e){var n=f();return t(n[0],n[n.length-1],null==e?10:e)},c.tickFormat=function(t,e){return null==e?b:l(e)},c.nice=function(t){var n=f();return t&&"function"==typeof t.range||(t=e(n[0],n[n.length-1],null==t?10:t)),t?f(function(t,e){var n,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(n=r,r=i,i=n,n=o,o=a,a=n),t[r]=e.floor(o),t[i]=e.ceil(a),t}(n,t)):c},c.copy=function(){return dr(c,Go(t,e,n,r,i,o,a,s,u,l))},c}function zo(){return gr.apply(Go(bi,_i,gi,di,Kr,zr,Xr,Wr,Br,Ei).domain([new Date(2e3,0,1),new Date(2e3,0,2)]),arguments)}function Qo(t){return"string"==typeof t?new Nt([[document.querySelector(t)]],[document.documentElement]):new Nt([[t]],Mt)}function Zo(t){return function(){return t}}function Jo(t){this._context=t}function Ko(t){return new Jo(t)}Si=function(t){var e=t.dateTime,n=t.date,r=t.time,i=t.periods,o=t.days,a=t.shortDays,s=t.months,u=t.shortMonths,l=Hi(i),c=Li(i),h=Hi(o),f=Li(o),p=Hi(a),d=Li(a),y=Hi(s),g=Li(s),v=Hi(u),m=Li(u),x={a:function(t){return a[t.getDay()]},A:function(t){return o[t.getDay()]},b:function(t){return u[t.getMonth()]},B:function(t){return s[t.getMonth()]},c:null,d:no,e:no,f:so,g:xo,G:bo,H:ro,I:io,j:oo,L:ao,m:uo,M:lo,p:function(t){return i[+(t.getHours()>=12)]},q:function(t){return 1+~~(t.getMonth()/3)},Q:Bo,s:Wo,S:co,u:ho,U:fo,V:yo,w:go,W:vo,x:null,X:null,y:mo,Y:wo,Z:_o,"%":Yo},w={a:function(t){return a[t.getUTCDay()]},A:function(t){return o[t.getUTCDay()]},b:function(t){return u[t.getUTCMonth()]},B:function(t){return s[t.getUTCMonth()]},c:null,d:To,e:To,f:Co,g:Ro,G:qo,H:Ao,I:Do,j:So,L:Eo,m:ko,M:Mo,p:function(t){return i[+(t.getUTCHours()>=12)]},q:function(t){return 1+~~(t.getUTCMonth()/3)},Q:Bo,s:Wo,S:No,u:Oo,U:$o,V:Lo,w:Io,W:jo,x:null,X:null,y:Po,Y:Uo,Z:Fo,"%":Yo},b={a:function(t,e,n){var r=p.exec(e.slice(n));return r?(t.w=d.get(r[0].toLowerCase()),n+r[0].length):-1},A:function(t,e,n){var r=h.exec(e.slice(n));return r?(t.w=f.get(r[0].toLowerCase()),n+r[0].length):-1},b:function(t,e,n){var r=v.exec(e.slice(n));return r?(t.m=m.get(r[0].toLowerCase()),n+r[0].length):-1},B:function(t,e,n){var r=y.exec(e.slice(n));return r?(t.m=g.get(r[0].toLowerCase()),n+r[0].length):-1},c:function(t,n,r){return A(t,e,n,r)},d:Vi,e:Vi,f:Ji,g:Fi,G:qi,H:Gi,I:Gi,j:Xi,L:Zi,m:Wi,M:zi,p:function(t,e,n){var r=l.exec(e.slice(n));return r?(t.p=c.get(r[0].toLowerCase()),n+r[0].length):-1},q:Bi,Q:to,s:eo,S:Qi,u:ji,U:Pi,V:Ri,w:Ii,W:Ui,x:function(t,e,r){return A(t,n,e,r)},X:function(t,e,n){return A(t,r,e,n)},y:Fi,Y:qi,Z:Yi,"%":Ki};function _(t,e){return function(n){var r,i,o,a=[],s=-1,u=0,l=t.length;for(n instanceof Date||(n=new Date(+n));++s<l;)37===t.charCodeAt(s)&&(a.push(t.slice(u,s)),null!=(i=Ci[r=t.charAt(++s)])?r=t.charAt(++s):i="e"===r?" ":"0",(o=e[r])&&(r=o(n,i)),a.push(r),u=s+1);return a.push(t.slice(u,s)),a.join("")}}function T(t,e){return function(n){var r,i,o=Di(1900,void 0,1);if(A(o,t,n+="",0)!=n.length)return null;if("Q"in o)return new Date(o.Q);if("s"in o)return new Date(1e3*o.s+("L"in o?o.L:0));if(e&&!("Z"in o)&&(o.Z=0),"p"in o&&(o.H=o.H%12+12*o.p),void 0===o.m&&(o.m="q"in o?o.q:0),"V"in o){if(o.V<1||o.V>53)return null;"w"in o||(o.w=1),"Z"in o?(i=(r=Ai(Di(o.y,0,1))).getUTCDay(),r=i>4||0===i?ui.ceil(r):ui(r),r=Qr.offset(r,7*(o.V-1)),o.y=r.getUTCFullYear(),o.m=r.getUTCMonth(),o.d=r.getUTCDate()+(o.w+6)%7):(i=(r=Ti(Di(o.y,0,1))).getDay(),r=i>4||0===i?ti.ceil(r):ti(r),r=zr.offset(r,7*(o.V-1)),o.y=r.getFullYear(),o.m=r.getMonth(),o.d=r.getDate()+(o.w+6)%7)}else("W"in o||"U"in o)&&("w"in o||(o.w="u"in o?o.u%7:"W"in o?1:0),i="Z"in o?Ai(Di(o.y,0,1)).getUTCDay():Ti(Di(o.y,0,1)).getDay(),o.m=0,o.d="W"in o?(o.w+6)%7+7*o.W-(i+5)%7:o.w+7*o.U-(i+6)%7);return"Z"in o?(o.H+=o.Z/100|0,o.M+=o.Z%100,Ai(o)):Ti(o)}}function A(t,e,n,r){for(var i,o,a=0,s=e.length,u=n.length;a<s;){if(r>=u)return-1;if(37===(i=e.charCodeAt(a++))){if(i=e.charAt(a++),!(o=b[i in Ci?e.charAt(a++):i])||(r=o(t,n,r))<0)return-1}else if(i!=n.charCodeAt(r++))return-1}return r}return x.x=_(n,x),x.X=_(r,x),x.c=_(e,x),w.x=_(n,w),w.X=_(r,w),w.c=_(e,w),{format:function(t){var e=_(t+="",x);return e.toString=function(){return t},e},parse:function(t){var e=T(t+="",!1);return e.toString=function(){return t},e},utcFormat:function(t){var e=_(t+="",w);return e.toString=function(){return t},e},utcParse:function(t){var e=T(t+="",!0);return e.toString=function(){return t},e}}}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]}),Ei=Si.format,Si.parse,Si.utcFormat,Si.utcParse,Array.prototype.slice,Jo.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;default:this._context.lineTo(t,e)}}};const ta=Math.PI,ea=2*ta,na=1e-6,ra=ea-na;function ia(t){this._+=t[0];for(let e=1,n=t.length;e<n;++e)this._+=arguments[e]+t[e]}class oa{constructor(t){this._x0=this._y0=this._x1=this._y1=null,this._="",this._append=null==t?ia:function(t){let e=Math.floor(t);if(!(e>=0))throw new Error(`invalid digits: ${t}`);if(e>15)return ia;const n=10**e;return function(t){this._+=t[0];for(let e=1,r=t.length;e<r;++e)this._+=Math.round(arguments[e]*n)/n+t[e]}}(t)}moveTo(t,e){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}`}closePath(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._append`Z`)}lineTo(t,e){this._append`L${this._x1=+t},${this._y1=+e}`}quadraticCurveTo(t,e,n,r){this._append`Q${+t},${+e},${this._x1=+n},${this._y1=+r}`}bezierCurveTo(t,e,n,r,i,o){this._append`C${+t},${+e},${+n},${+r},${this._x1=+i},${this._y1=+o}`}arcTo(t,e,n,r,i){if(t=+t,e=+e,n=+n,r=+r,(i=+i)<0)throw new Error(`negative radius: ${i}`);let o=this._x1,a=this._y1,s=n-t,u=r-e,l=o-t,c=a-e,h=l*l+c*c;if(null===this._x1)this._append`M${this._x1=t},${this._y1=e}`;else if(h>na)if(Math.abs(c*s-u*l)>na&&i){let f=n-o,p=r-a,d=s*s+u*u,y=f*f+p*p,g=Math.sqrt(d),v=Math.sqrt(h),m=i*Math.tan((ta-Math.acos((d+h-y)/(2*g*v)))/2),x=m/v,w=m/g;Math.abs(x-1)>na&&this._append`L${t+x*l},${e+x*c}`,this._append`A${i},${i},0,0,${+(c*f>l*p)},${this._x1=t+w*s},${this._y1=e+w*u}`}else this._append`L${this._x1=t},${this._y1=e}`}arc(t,e,n,r,i,o){if(t=+t,e=+e,o=!!o,(n=+n)<0)throw new Error(`negative radius: ${n}`);let a=n*Math.cos(r),s=n*Math.sin(r),u=t+a,l=e+s,c=1^o,h=o?r-i:i-r;null===this._x1?this._append`M${u},${l}`:(Math.abs(this._x1-u)>na||Math.abs(this._y1-l)>na)&&this._append`L${u},${l}`,n&&(h<0&&(h=h%ea+ea),h>ra?this._append`A${n},${n},0,1,${c},${t-a},${e-s}A${n},${n},0,1,${c},${this._x1=u},${this._y1=l}`:h>na&&this._append`A${n},${n},0,${+(h>=ta)},${c},${this._x1=t+n*Math.cos(i)},${this._y1=e+n*Math.sin(i)}`)}rect(t,e,n,r){this._append`M${this._x0=this._x1=+t},${this._y0=this._y1=+e}h${n=+n}v${+r}h${-n}Z`}toString(){return this._}}function aa(t){return t[0]}function sa(t){return t[1]}function ua(t,e){var n=Zo(!0),r=null,i=Ko,o=null,a=function(t){let e=3;return t.digits=function(n){if(!arguments.length)return e;if(null==n)e=null;else{const t=Math.floor(n);if(!(t>=0))throw new RangeError(`invalid digits: ${n}`);e=t}return t},()=>new oa(e)}(s);function s(s){var u,l,c,h=(s=function(t){return"object"==typeof t&&"length"in t?t:Array.from(t)}(s)).length,f=!1;for(null==r&&(o=i(c=a())),u=0;u<=h;++u)!(u<h&&n(l=s[u],u,s))===f&&((f=!f)?o.lineStart():o.lineEnd()),f&&o.point(+t(l,u,s),+e(l,u,s));if(c)return o=null,c+""||null}return t="function"==typeof t?t:void 0===t?aa:Zo(t),e="function"==typeof e?e:void 0===e?sa:Zo(e),s.x=function(e){return arguments.length?(t="function"==typeof e?e:Zo(+e),s):t},s.y=function(t){return arguments.length?(e="function"==typeof t?t:Zo(+t),s):e},s.defined=function(t){return arguments.length?(n="function"==typeof t?t:Zo(!!t),s):n},s.curve=function(t){return arguments.length?(i=t,null!=r&&(o=i(r)),s):i},s.context=function(t){return arguments.length?(null==t?r=o=null:o=i(r=t),s):r},s}function la(t,e,n){t._context.bezierCurveTo((2*t._x0+t._x1)/3,(2*t._y0+t._y1)/3,(t._x0+2*t._x1)/3,(t._y0+2*t._y1)/3,(t._x0+4*t._x1+e)/6,(t._y0+4*t._y1+n)/6)}function ca(t){this._context=t}function ha(t){return new ca(t)}function fa(t,e,n){this.k=t,this.x=e,this.y=n}var pa,da,ya,ga;ca.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:la(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,e){switch(t=+t,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,e):this._context.moveTo(t,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:la(this,t,e)}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=e}},fa.prototype={constructor:fa,scale:function(t){return 1===t?this:new fa(this.k*t,this.x,this.y)},translate:function(t,e){return 0===t&0===e?this:new fa(this.k,this.x+this.k*t,this.y+this.k*e)},apply:function(t){return[t[0]*this.k+this.x,t[1]*this.k+this.y]},applyX:function(t){return t*this.k+this.x},applyY:function(t){return t*this.k+this.y},invert:function(t){return[(t[0]-this.x)/this.k,(t[1]-this.y)/this.k]},invertX:function(t){return(t-this.x)/this.k},invertY:function(t){return(t-this.y)/this.k},rescaleX:function(t){return t.copy().domain(t.range().map(this.invertX,this).map(t.invert,t))},rescaleY:function(t){return t.copy().domain(t.range().map(this.invertY,this).map(t.invert,t))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}},new fa(1,0,0),fa.prototype;class va{constructor(t,e,n){this.openDayColor="steelblue",this.sma50DaysColor="chocolate",this.sma100DaysColor="brown",this.sma200DaysColor="maroon",this.ema50DaysColor="darkgreen",this.ema100DaysColor="forestgreen",this.ema200DaysColor="lightgreen",this.rsi14DaysColor="mediumpurple",this.derivativeFirst="mediumslateblue",this.derivativeSecond="mediumturquoise",this.derivativeThird="midnightblue",this.svgContainer=t,this.tradeData=e,this.margin=n,this.width=window.innerWidth-n.left-n.right,this.height=window.innerHeight-n.top-n.bottom,this.xScale=zo().domain(function(t,e){let n,r;if(void 0===e)for(const e of t)null!=e&&(void 0===n?e>=e&&(n=r=e):(n>e&&(n=e),r<e&&(r=e)));else{let i=-1;for(let o of t)null!=(o=e(o,++i))&&(void 0===n?o>=o&&(n=r=o):(n>o&&(n=o),r<o&&(r=o)))}return[n,r]}(e,(t=>t.date))).range([0,this.width]),this.yScale=Or().domain([0,l(e,(t=>t.open))]).range([this.height,0]),this.svg=this.svgContainer.append("g").attr("transform",`translate(${n.left}, ${n.top})`)}drawDayOpenGraph(){var t;this.svg.append("g").attr("id","xAxis").attr("transform",`translate(0, ${this.height})`).call((t=this.xScale,b(p,t))),this.svg.append("g").attr("id","yAxis").attr("transform",`translate(${this.width}, 0)`).call(function(t){return b(f,t)}(this.yScale));const e=ua().x((t=>this.xScale(t.date))).y((t=>this.yScale(t.open))).curve(ha);this.svg.append("path").attr("id","dayOpen").data([this.tradeData]).style("fill","none").attr("stroke",this.openDayColor).attr("stroke-width","1.5").attr("d",e)}draw50DaysSMAGraph(){const t=ua().defined((t=>null!==t.sma50Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.sma50Days))).curve(ha);this.svg.append("path").attr("id","sma50Days").data([this.tradeData]).style("fill","none").attr("stroke",this.sma50DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","sma50Days")}draw100DaysSMAGraph(){const t=ua().defined((t=>null!==t.sma100Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.sma100Days))).curve(ha);this.svg.append("path").attr("id","sma100Days").data([this.tradeData]).style("fill","none").attr("stroke",this.sma100DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","sma100Days")}draw200DaysSMAGraph(){const t=ua().defined((t=>null!==t.sma200Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.sma200Days))).curve(ha);this.svg.append("path").attr("id","sma200Days").data([this.tradeData]).style("fill","none").attr("stroke",this.sma200DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","sma200Days")}draw50DaysEMAGraph(){const t=ua().defined((t=>null!==t.ema50Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.ema50Days))).curve(ha);this.svg.append("path").attr("id","ema50Days").data([this.tradeData]).style("fill","none").attr("stroke",this.ema50DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","ema50Days")}draw100DaysEMAGraph(){const t=ua().defined((t=>null!==t.ema100Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.ema100Days))).curve(ha);this.svg.append("path").attr("id","ema100Days").data([this.tradeData]).style("fill","none").attr("stroke",this.ema100DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","ema100Days")}draw200DaysEMAGraph(){const t=ua().defined((t=>null!==t.ema200Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.ema200Days))).curve(ha);this.svg.append("path").attr("id","ema200Days").data([this.tradeData]).style("fill","none").attr("stroke",this.ema200DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","ema200Days")}draw14DaysRSIGraph(){const t=ua().defined((t=>null!==t.rsi14Days)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.rsi14Days))).curve(ha);this.svg.append("path").attr("id","rsi14Days").data([this.tradeData]).style("fill","none").attr("stroke",this.rsi14DaysColor).attr("stroke-width","1.5").attr("d",t).attr("id","rsi14Days")}drawLegend(){const t=this.svgContainer.append("g"),e=[["Day open",this.openDayColor,"dayOpen"],["50 simple moving average",this.sma50DaysColor,"sma50Days"],["100 simple moving average",this.sma100DaysColor,"sma100Days"],["200 simple moving average",this.sma200DaysColor,"sma200Days"],["50 exponential moving average",this.ema50DaysColor,"ema50Days"],["100 exponential moving average",this.ema100DaysColor,"ema100Days"],["200 exponential moving average",this.ema200DaysColor,"ema200Days"],["14 relative strength index",this.rsi14DaysColor,"rsi14Days"]],n="lightsteelblue";t.append("rect").attr("x",50).attr("y",50).attr("width",270).attr("height",30*e.length+20).style("fill",n).style("stroke",n).style("stroke-width",2);for(let r=0;r<e.length;r++){const i=`#${e[r][2]}`,o=e[r][1];t.append("rect").attr("x",60).attr("y",50+30*r+10).attr("width",20).attr("height",20).style("fill",o).style("stroke",o).style("stroke-width",2).attr("id",`icon${e[r][2]}`).on("click",(t=>{const e=Qo(`#${t.currentTarget.id}`);0===Number(Qo(i).style("opacity"))?(Qo(i).style("opacity",1),e.style("fill",o)):(Qo(i).style("opacity",0),e.style("fill",n))})),t.append("text").attr("x",90).attr("y",50+30*r+10+10).style("fill","black").text(e[r][0]).attr("text-anchor","left").style("alignment-baseline","middle")}}drawDerivativeFirstGraph(){const t=ua().defined((t=>null!==t.derivativeFirst)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.derivativeFirst))).curve(ha);this.svg.append("path").attr("id","derivativeFirst").data([this.tradeData]).style("fill","none").attr("stroke",this.derivativeFirst).attr("stroke-width","1.5").attr("d",t).attr("id","derivativeFirst")}drawDerivativeSecondGraph(){const t=ua().defined((t=>null!==t.derivativeSecond)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.derivativeSecond))).curve(ha);this.svg.append("path").attr("id","derivativeSecond").data([this.tradeData]).style("fill","none").attr("stroke",this.derivativeSecond).attr("stroke-width","1.5").attr("d",t).attr("id","derivativeSecond")}drawDerivativeThirdGraph(){const t=ua().defined((t=>null!==t.derivativeThird)).x((t=>this.xScale(t.date))).y((t=>this.yScale(t.derivativeThird))).curve(ha);this.svg.append("path").attr("id","derivativeThird").data([this.tradeData]).style("fill","none").attr("stroke",this.derivativeThird).attr("stroke-width","1.5").attr("d",t).attr("id","derivativeThird")}}class ma{constructor(t,e){this.code=t,this.classDescription=e}}class xa{static item(t){return this.AllComparisonOperatorTypes.filter((e=>e.code.toUpperCase()===t.toUpperCase()))[0]}}pa=xa,xa.EQUAL=new ma("EQUAL","="),xa.NOT_EQUAL=new ma("NOT_EQUAL","!="),xa.GREATER_THAN_OR_EQUAL_TO=new ma("GREATER_THAN_OR_EQUAL_TO",">="),xa.LESS_THAN_OR_EQUAL_TO=new ma("LESS_THAN_OR_EQUAL_TO","<="),xa.GREATER_THAN=new ma("GREATER_THAN",">"),xa.LESS_THAN=new ma("LESS_THAN","<"),xa.AllComparisonOperatorTypes=[pa.EQUAL,pa.NOT_EQUAL,pa.GREATER_THAN_OR_EQUAL_TO,pa.LESS_THAN_OR_EQUAL_TO,pa.GREATER_THAN,pa.LESS_THAN];class wa{constructor(t){this.comparisonOperatorType=xa.item(t)}toString(){return this.comparisonOperatorType.classDescription}toCode(){return this.comparisonOperatorType.classDescription}}class ba{constructor(t,e,n){this.term1=t,this.comparisonOperator=e,this.term2=n}evaluate(t,e){switch(this.comparisonOperator.comparisonOperatorType){case xa.EQUAL:return this.term1.evaluate(t,e)===this.term2.evaluate(t,e);case xa.NOT_EQUAL:return this.term1.evaluate(t,e)!==this.term2.evaluate(t,e);case xa.GREATER_THAN_OR_EQUAL_TO:return this.term1.evaluate(t,e)>=this.term2.evaluate(t,e);case xa.LESS_THAN_OR_EQUAL_TO:return this.term1.evaluate(t,e)<=this.term2.evaluate(t,e);case xa.GREATER_THAN:return this.term1.evaluate(t,e)>this.term2.evaluate(t,e);case xa.LESS_THAN:return this.term1.evaluate(t,e)<this.term2.evaluate(t,e)}}simplify(){this.term1.simplify(),this.term2.simplify()}toString(){var t,e,n;return`${null===(t=this.term1)||void 0===t?void 0:t.toString()} ${null===(e=this.comparisonOperator)||void 0===e?void 0:e.toString()} ${null===(n=this.term2)||void 0===n?void 0:n.toString()}`}toCode(){var t,e,n;return`${null===(t=this.term1)||void 0===t?void 0:t.toCode()} ${null===(e=this.comparisonOperator)||void 0===e?void 0:e.toCode()} ${null===(n=this.term2)||void 0===n?void 0:n.toCode()}`}}class _a{constructor(t){this.controlId=t}}class Ta extends _a{render(){const t=xa.AllComparisonOperatorTypes.map((t=>`<option value='${t.code}'>${t.classDescription}</option>`)).reduce(((t,e)=>t+e));return`<select id='${this.controlId}'><option></option>${t}</select>`}renderHTML(){const t=document.createElement("select");t.setAttribute("data-glyph-type","ComparisonOperator");const e=document.createElement("option");e.value="",e.text="",t.appendChild(e);for(let e of xa.AllComparisonOperatorTypes){const n=document.createElement("option");n.value=e.code,n.text=e.classDescription,t.appendChild(n)}return t}read(){var t;const e=null===(t=document.getElementById(this.controlId))||void 0===t?void 0:t.value.toString();return e?new wa(e):null}}class Aa{constructor(t,e){this.code=t,this.classDescription=e}}class Da{static item(t){return this.AllArithmeticOperatorTypes.filter((e=>e.code.toUpperCase()===t.toUpperCase()))[0]}}da=Da,Da.ADDITION=new Aa("ADDITION","+"),Da.SUBSTRACTION=new Aa("SUBSTRACTION","-"),Da.MULTIPLICATION=new Aa("MULTIPLICATION","*"),Da.DIVISION=new Aa("MULTIPLICATION","/"),Da.AllArithmeticOperatorTypes=[da.ADDITION,da.SUBSTRACTION,da.MULTIPLICATION,da.DIVISION];class Sa{constructor(t){this.arithmeticOperatorType=Da.item(t)}toString(){return this.arithmeticOperatorType.classDescription}toCode(){return this.arithmeticOperatorType.classDescription}}class Ea{constructor(t,e,n){this.coeficient=e,this.arithmeticOperator=n,this.indicator=t}evaluate(t,e){if(!this.coeficient||!this.arithmeticOperator)return this.indicator.evaluate(t,e);switch(this.arithmeticOperator.arithmeticOperatorType){case Da.ADDITION:return this.indicator.evaluate(t,e)+this.coeficient;case Da.SUBSTRACTION:return this.indicator.evaluate(t,e)-this.coeficient;case Da.MULTIPLICATION:return this.indicator.evaluate(t,e)*this.coeficient;case Da.DIVISION:return this.indicator.evaluate(t,e)/this.coeficient}}simplify(){this.arithmeticOperator&&this.coeficient&&(this.arithmeticOperator.arithmeticOperatorType.code===Da.MULTIPLICATION.code&&1===this.coeficient||this.arithmeticOperator.arithmeticOperatorType.code===Da.ADDITION.code&&0===this.coeficient)&&(this.coeficient=null,this.arithmeticOperator=null)}toString(){var t,e,n;return this.coeficient&&this.arithmeticOperator?`${this.coeficient.toString()} ${null===(e=this.arithmeticOperator)||void 0===e?void 0:e.toString()} ${null===(n=this.indicator)||void 0===n?void 0:n.toString()}`:`${null===(t=this.indicator)||void 0===t?void 0:t.toString()}`}toCode(){var t,e,n;return this.coeficient&&this.arithmeticOperator?`${this.coeficient.toString()} ${null===(e=this.arithmeticOperator)||void 0===e?void 0:e.toCode()} ${null===(n=this.indicator)||void 0===n?void 0:n.toCode()}`:`${null===(t=this.indicator)||void 0===t?void 0:t.toCode()}`}}class Ca extends _a{render(){let t=Da.AllArithmeticOperatorTypes.map((t=>`<option value='${t.code}'>${t.classDescription}</option>`)).reduce(((t,e)=>t+e));return`<select id='${this.controlId}'><option></option>${t}</select>`}renderHTML(){const t=document.createElement("select");t.setAttribute("data-glyph-type","ArithmeticOperator");const e=document.createElement("option");e.value="",e.text="",t.appendChild(e);for(let e of Da.AllArithmeticOperatorTypes){const n=document.createElement("option");n.value=e.code,n.text=e.classDescription,t.appendChild(n)}return t}read(){var t;const e=null===(t=document.getElementById(this.controlId))||void 0===t?void 0:t.value.toString();return e?new Sa(e):null}}class ka extends _a{render(){return`<input type='number' id='${this.controlId}' value='' step='0.01' size='4' />`}read(){var t;const e=null===(t=document.getElementById(this.controlId))||void 0===t?void 0:t.value.toString();return e?Number(e):null}}class Ma{constructor(t,e){this.code=t,this.classDescription=e}}class Na{static item(t){return this.AllIndicatorTypes.filter((e=>e.code.toUpperCase()===t.toUpperCase()))[0]}}ya=Na,Na.DAY_OPEN=new Ma("DAY_OPEN","Day Open"),Na.PREV_DAY_OPEN=new Ma("PREV_DAY_OPEN","Previous Day Open"),Na.PREV_BUY=new Ma("PREV_BUY","Previous Buy Price"),Na.MIN_52_WEEK=new Ma("MIN_52_WEEK","52 Weeks Minimum"),Na.MAX_52_WEEK=new Ma("MAX_52_WEEK","52 Weeks Maximum"),Na.SMA_50_DAYS=new Ma("SMA_50_DAYS","Simple Moving Average 50 Days"),Na.SMA_100_DAYS=new Ma("SMA_100_DAYS","Simple Moving Average 100 Days"),Na.SMA_200_DAYS=new Ma("SMA_200_DAYS","Simple Moving Average 200 Days"),Na.EMA_50_DAYS=new Ma("EMA_50_DAYS","Exponential Moving Average 50 Days"),Na.EMA_100_DAYS=new Ma("EMA_100_DAYS","Exponential Moving Average 100 Days"),Na.EMA_200_DAYS=new Ma("EMA_200_DAYS","Exponential Moving Average 200 Days"),Na.RSI_14_DAYS=new Ma("RSI_14_DAYS","Relative Strength Index 200 Days"),Na.AllIndicatorTypes=[ya.DAY_OPEN,ya.PREV_DAY_OPEN,ya.PREV_BUY,ya.MIN_52_WEEK,ya.MAX_52_WEEK,ya.SMA_50_DAYS,ya.SMA_100_DAYS,ya.SMA_200_DAYS,ya.EMA_50_DAYS,ya.EMA_100_DAYS,ya.EMA_200_DAYS,ya.RSI_14_DAYS];class Oa{constructor(t){this.indicatorType=Na.item(t)}evaluate(t,e){var n;switch(this.indicatorType){case Na.DAY_OPEN:return t.open;case Na.PREV_DAY_OPEN:return null===(n=t.previousDay)||void 0===n?void 0:n.open;case Na.PREV_BUY:return null==e?void 0:e.lastHistoryItem.sharePrice;case Na.MIN_52_WEEK:return t.low52Weeks;case Na.MAX_52_WEEK:return t.high52Weeks;case Na.SMA_50_DAYS:return t.sma50Days;case Na.SMA_100_DAYS:return t.sma100Days;case Na.SMA_200_DAYS:return t.sma200Days;case Na.EMA_50_DAYS:return t.ema50Days;case Na.EMA_100_DAYS:return t.ema100Days;case Na.EMA_200_DAYS:return t.ema200Days;case Na.RSI_14_DAYS:return t.rsi14Days}}toString(){return this.indicatorType.classDescription}toCode(){return this.indicatorType.code}}class $a extends _a{render(){const t=Na.AllIndicatorTypes.map((t=>`<option value='${t.code}'>${t.classDescription}</option>`)).reduce(((t,e)=>t+e));return`<select id='${this.controlId}'><option></option>${t}</select>`}renderHTML(){const t=document.createElement("select");t.setAttribute("data-glyph-type","Indicator");const e=document.createElement("option");e.value="",e.text="",t.appendChild(e);for(let e of Na.AllIndicatorTypes){const n=document.createElement("option");n.value=e.code,n.text=e.classDescription,t.appendChild(n)}return t}read(){var t;const e=null===(t=document.getElementById(this.controlId))||void 0===t?void 0:t.value.toString();return e?new Oa(e):null}}class Ha extends _a{constructor(){super(...arguments),this.coeficientPresenter=new ka(`${this.controlId}_coeficient`),this.arithmeticOperatorPresenter=new Ca(`${this.controlId}_arithmeticOperator`),this.indicatorPresenter=new $a(`${this.controlId}_indicator`)}render(){return`${this.coeficientPresenter.render()} ${this.arithmeticOperatorPresenter.render()} ${this.indicatorPresenter.render()}`}read(){const t=this.indicatorPresenter.read(),e=this.coeficientPresenter.read(),n=this.arithmeticOperatorPresenter.read();return t?new Ea(t,e,n):null}}class La{constructor(t,e,n,r,i,o){this.action=t,this.date=e,this.numberOfShares=n,this.sharePrice=r,this.availableCash=i,this.totalNumberOfShares=o,this.totalEquity=this.availableCash+this.totalNumberOfShares*this.sharePrice}}class Ia{constructor(t,e){this.actionType=t,this.param=e}trade(t,e){switch(this.actionType){case Pa.BUY_EXACT:const n=t.open*this.param;if(e.amountOfMoney<n)return;e.numberOfShares+=this.param,e.amountOfMoney-=n,e.history.push(new La("BUY",t.date,this.param,t.open,e.amountOfMoney,e.numberOfShares));break;case Pa.SELL_EXACT:if(e.numberOfShares<this.param)return;const r=t.open*this.param;e.numberOfShares-=this.param,e.amountOfMoney+=r,e.history.push(new La("SELL",t.date,this.param,t.open,e.amountOfMoney,e.numberOfShares));break;case Pa.BUY_PERCENTAGE:const i=e.amountOfMoney*this.param/100;if(i<t.open)return;const o=Math.floor(i/t.open);e.numberOfShares+=o,e.amountOfMoney-=t.open*o,e.history.push(new La("BUY_PERCENTAGE",t.date,this.param,t.open,e.amountOfMoney,e.numberOfShares));break;case Pa.SELL_PERCENTAGE:const a=Math.floor(e.numberOfShares*this.param/100);if(e.numberOfShares<a)return;e.numberOfShares-=a,e.amountOfMoney+=t.open*a,e.history.push(new La("SELL_PERCENTAGE",t.date,a,t.open,e.amountOfMoney,e.numberOfShares))}}simplify(){}toString(){return this.actionType.instanceDescription(this.param)}toCode(){return`${this.actionType.code} ${this.param}`}}class ja{constructor(t,e,n){this.code=t,this.classDescription=e,this.instanceDescription=n}}class Pa{static item(t){return this.AllActionTypes.filter((e=>e.code.toUpperCase()===t.toUpperCase()))[0]}}ga=Pa,Pa.BUY_EXACT=new ja("BUY_EXACT","Buy exact number of shares",(t=>`Buy ${t} number of shares`)),Pa.SELL_EXACT=new ja("SELL_EXACT","Sell exact number of owned shares",(t=>`Sell ${t} number of owned shares`)),Pa.BUY_PERCENTAGE=new ja("BUY_PERCENTAGE","Buy using percentage of cash",(t=>`Buy using ${t}% of cash`)),Pa.SELL_PERCENTAGE=new ja("SELL_PERCENTAGE","Sell percentage of owned shares",(t=>`Sell ${t}% of owned shares`)),Pa.BUY_AT_MOST=new ja("BUY_AT_MOST","Buy at most number of shares",(t=>`Buy at most ${t} shares`)),Pa.SELL_AT_LEAST=new ja("SELL_AT_LEAST","Sell at least number of shares",(t=>`Sell at least ${t} shares`)),Pa.AllActionTypes=[ga.BUY_EXACT,ga.SELL_EXACT,ga.BUY_PERCENTAGE,ga.SELL_PERCENTAGE,ga.BUY_AT_MOST,ga.SELL_AT_LEAST];const Ra=new class extends _a{constructor(){super(...arguments),this.term1Presenter=new Ha(`${this.controlId}_term1`),this.comparisonOperatorPresenter=new Ta(`${this.controlId}_comparisonOperator`),this.term2Presenter=new Ha(`${this.controlId}_term2`)}render(){return`${this.term1Presenter.render()} ${this.comparisonOperatorPresenter.render()} ${this.term2Presenter.render()}`}read(){const t=this.term1Presenter.read(),e=this.comparisonOperatorPresenter.read(),n=this.term2Presenter.read();return t&&e&&n?new ba(t,e,n):null}}("binaryCondition"),Ua=new class extends _a{render(){const t=Pa.AllActionTypes.map((t=>`<option value='${t.code}'>${t.classDescription}</option>`)).reduce(((t,e)=>t+e));return`<select id='${this.controlId}_ActionType'><option></option>${t}</select><span id='${this.controlId}_Span'></span><input type='number' id='${this.controlId}_Param' step='1' size='4' />`}addJavascript(){document.getElementById(`${this.controlId}_ActionType`).addEventListener("change",(()=>this.javascript()))}javascript(){var t;const e=null===(t=document.getElementById(`${this.controlId}_ActionType`))||void 0===t?void 0:t.value.toString(),n=document.getElementById(`${this.controlId}_Param`),r=document.getElementById(`${this.controlId}_Span`);switch(e){case Pa.BUY_EXACT.code:case Pa.BUY_AT_MOST.code:r.textContent="Number of shares",n.removeAttribute("min"),n.removeAttribute("max");break;case Pa.BUY_PERCENTAGE.code:r.textContent="Percentage of cash",n.min="0",n.max="100";break;case Pa.SELL_EXACT.code:case Pa.SELL_AT_LEAST.code:r.textContent="Number of shares",n.removeAttribute("min"),n.removeAttribute("max");break;case Pa.SELL_PERCENTAGE.code:r.textContent="Percentage of owned shares",n.min="0",n.max="100"}}read(){var t,e;const n=null===(t=document.getElementById(`${this.controlId}_ActionType`))||void 0===t?void 0:t.value.toString(),r=Pa.item(n),i=Number(null===(e=document.getElementById(`${this.controlId}_Param`))||void 0===e?void 0:e.value.toString());return new Ia(r,i)}}("action"),qa={top:50,right:50,bottom:50,left:50};window.innerWidth,window.innerHeight,t((()=>{let n;t.getJSON(".\\tickersList.json",(e=>{t.each(e.tickers,((n,r)=>{t("#ticker").append(t("<option></option>").val(e.tickers[n].symbol).html(e.tickers[n].name))}))})).fail((()=>{console.log("Error while reading json")})).always((()=>{})),t(document).ajaxStart((function(){t("#overlay").fadeIn()})).ajaxStop((function(){t("#overlay").fadeOut()}));const r=new Array;r.push(new a),t("#ticker").on("change",(()=>{let e=t("#ticker").val().toString();t("#startDate").prop("disabled",!0),t("#startingAmount").prop("disabled",!0),t.getJSON(`.\\alphavantage\\${e}.json`,(e=>{n=o.loadFromAlphavantage(e).map((t=>t)),t("#startDate").val(n[0].date.toISOString().split("T")[0]),u.printHistoricData(t("#menu2"),n);const r=Qo("#chart").select("svg"),i=new va(r,n,qa);i.drawDayOpenGraph(),i.draw50DaysSMAGraph(),i.draw100DaysSMAGraph(),i.draw200DaysSMAGraph(),i.draw50DaysEMAGraph(),i.draw100DaysEMAGraph(),i.draw200DaysEMAGraph(),i.drawLegend(),t("#startDate").prop("disabled",!1),t("#startingAmount").prop("disabled",!1)})).fail((()=>{console.log("Error while reading json")})).always((()=>{}))})),t("#newStrategy").on("click",(function(){r.push(new a),t("#globalStrategies").append("<hr/>")})),t("#addStrategyBranch").on("click",(function(){})),t("#run").on("click",(function(){const i=Number(t("#startingAmount").val()),o=new Date(t("#startDate").val().toString());t("#globalStrategies").empty(),r.forEach((r=>{t("#globalStrategies").append(`<p>${r.toString()}</p><br/>`);const a=new e(i,0,o,n);r.run(n.filter((t=>((t,e)=>t.date>=e)(t,o))),a);const s=n[0],u=n[n.length-1];t("#globalStrategies").append(`\n            <table class="table table-striped">\n                <thead>\n                    <td>number of transactions</td>\n                    <td>date</td>\n                    <td>number of shares</td>\n                    <td>initial share price</td>\n                    <td>final share price</td>\n                    <td>available cash</td>\n                    <td>total equity</td>\n                </thead>\n                <tbody>\n                    <tr>\n                        <td>${a.history.length}</td>\n                        <td>${u.date.toLocaleDateString()}</td>\n                        <td>${a.numberOfShares}</td>\n                        <td>${s.close}</td>\n                        <td>${u.close}</td>\n                        <td>${a.amountOfMoney.toFixed(2)}</td>\n                        <td>${(a.amountOfMoney+a.numberOfShares*u.close).toFixed(2)}</td>\n                    </tr>\n                </tbody>\n            </table>`)}))})),t("#actionRender").html(Ua.render()),t("#conditionRender").html(Ra.render())}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,